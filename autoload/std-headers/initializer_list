/*  Copyright (C) 2015  Povilas Kanapickas <povilas@radix.lt>

    This file is part of cppreference-doc

    This work is licensed under the Creative Commons Attribution-ShareAlike 3.0
    Unported License. To view a copy of this license, visit
    http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative
    Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3 or
    any later version published by the Free Software Foundation; with no
    Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
*/

#ifndef CPPREFERENCE_INITIALIZER_LIST_H
#define CPPREFERENCE_INITIALIZER_LIST_H

#if CPPREFERENCE_STDVER>= 2011

namespace std {

template<class T>
class initializer_list {
public:
    typedef T value_type;
    typedef const T& reference;
    typedef const T& const_reference;
    typedef size_t size_type;

    typedef const T* iterator;
    typedef const T* const_iterator;

    initializer_list();

    size_t size() const;
    const T* begin() const;
    const T* end() const;
};

template<class T> const T* begin(initializer_list<T> il);
template<class T> const T* end(initializer_list<T> il);

} // namespace std

#endif // CPPREFERENCE_STDVER>= 2011
#endif // CPPREFERENCE_INITIALIZER_LIST_H
