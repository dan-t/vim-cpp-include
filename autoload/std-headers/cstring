/*  Copyright (C) 2015  Povilas Kanapickas <povilas@radix.lt>

    This file is part of cppreference-doc

    This work is licensed under the Creative Commons Attribution-ShareAlike 3.0
    Unported License. To view a copy of this license, visit
    http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative
    Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3 or
    any later version published by the Free Software Foundation; with no
    Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
*/

#ifndef CPPREFERENCE_CSTRING_H
#define CPPREFERENCE_CSTRING_H

namespace std {

char* strcpy(char* dest, const char* src);
char* strncpy(char* dest, const char* src, std::size_t count);
char* strcat(char* dest, const char* src);
char* strncat(char* dest, const char* src, std::size_t count);
std::size_t strxfrm(char* dest, const char* src, std::size_t count);
std::size_t strlen(const char* str);
int strcmp(const char* lhs, const char* rhs);
int strncmp(const char* lhs, const char* rhs, size_t count);
int strcoll(const char* lhs, const char* rhs);
const char* strchr(const char* str, int ch);
char* strchr(char* str, int ch);
const char* strrchr(const char* str, int ch);
char* strrchr(char* str, int ch);
size_t strspn(const char* dest, const char* src);
size_t strcspn(const char* dest, const char* src);
const char* strpbrk(const char* dest, const char* breakset);
char* strpbrk(char* dest, const char* breakset);
const char* strstr(const char* str, const char* target);
char* strstr(char* str, const char* target);
char* strtok(char* str, const char* delim);
const void* memchr(const void* ptr, int ch, std::size_t count);
void* memchr(void* ptr, int ch, std::size_t count);
int memcmp(const void* lhs, const void* rhs, std::size_t count);
void* memset(void* dest, int ch, std::size_t count);
void* memcpy(void* dest, const void* src, std::size_t count);
void* memmove(void* dest, const void* src, std::size_t count);
char* strerror(int errnum);

} // namespace std

#endif // CPPREFERENCE_CSTRING_H
