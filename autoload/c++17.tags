!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/c66bdfb/
ATOMIC_FLAG_INIT	std-headers/atomic	/^#define ATOMIC_FLAG_INIT /;"	d	file:
ATOMIC_VAR_INIT	std-headers/atomic	/^#define ATOMIC_VAR_INIT(/;"	d	file:
Alloc	std-headers/iosfwd	/^template<class CharT, class Traits = std::char_traits<CharT>, class Alloc = std::allocator<CharT/;"	v	namespace:std	typeref:typename:class
Allocator	std-headers/bitset	/^             class Allocator = std::allocator<CharT>>$/;"	m	class:std::bitset	typeref:typename:class	file:
BUFSIZ	std-headers/cstdio	/^#define BUFSIZ /;"	d	file:
CHAR_BIT	std-headers/climits	/^#define CHAR_BIT /;"	d	file:
CHAR_MAX	std-headers/climits	/^#define CHAR_MAX /;"	d	file:
CHAR_MIN	std-headers/climits	/^#define CHAR_MIN /;"	d	file:
CLOCKS_PER_SEC	std-headers/ctime	/^#define CLOCKS_PER_SEC /;"	d	file:
CPPREFERENCE_ALGORITHM_H	std-headers/algorithm	/^#define CPPREFERENCE_ALGORITHM_H$/;"	d	file:
CPPREFERENCE_ARRAY_H	std-headers/array	/^#define CPPREFERENCE_ARRAY_H$/;"	d	file:
CPPREFERENCE_ATOMIC_H	std-headers/atomic	/^#define CPPREFERENCE_ATOMIC_H$/;"	d	file:
CPPREFERENCE_BITSET_H	std-headers/bitset	/^#define CPPREFERENCE_BITSET_H$/;"	d	file:
CPPREFERENCE_CASSERT_H	std-headers/cassert	/^#define CPPREFERENCE_CASSERT_H$/;"	d	file:
CPPREFERENCE_CCOMPLEX_H	std-headers/ccomplex	/^#define CPPREFERENCE_CCOMPLEX_H$/;"	d	file:
CPPREFERENCE_CCTYPE_H	std-headers/cctype	/^#define CPPREFERENCE_CCTYPE_H$/;"	d	file:
CPPREFERENCE_CERRNO_H	std-headers/cerrno	/^#define CPPREFERENCE_CERRNO_H$/;"	d	file:
CPPREFERENCE_CFENV_H	std-headers/cfenv	/^#define CPPREFERENCE_CFENV_H$/;"	d	file:
CPPREFERENCE_CFLOAT_H	std-headers/cfloat	/^#define CPPREFERENCE_CFLOAT_H$/;"	d	file:
CPPREFERENCE_CHRONO_H	std-headers/chrono	/^#define CPPREFERENCE_CHRONO_H$/;"	d	file:
CPPREFERENCE_CINTTYPES_H	std-headers/cinttypes	/^#define CPPREFERENCE_CINTTYPES_H$/;"	d	file:
CPPREFERENCE_CISO646_H	std-headers/ciso646	/^#define CPPREFERENCE_CISO646_H$/;"	d	file:
CPPREFERENCE_CLIMITS_H	std-headers/climits	/^#define CPPREFERENCE_CLIMITS_H$/;"	d	file:
CPPREFERENCE_CLOCALE_H	std-headers/clocale	/^#define CPPREFERENCE_CLOCALE_H$/;"	d	file:
CPPREFERENCE_CMATH_H	std-headers/cmath	/^#define CPPREFERENCE_CMATH_H$/;"	d	file:
CPPREFERENCE_CODECVT_H	std-headers/codecvt	/^#define CPPREFERENCE_CODECVT_H$/;"	d	file:
CPPREFERENCE_COMPLEX_H	std-headers/complex	/^#define CPPREFERENCE_COMPLEX_H$/;"	d	file:
CPPREFERENCE_CONDITION_VARIABLE_H	std-headers/condition_variable	/^#define CPPREFERENCE_CONDITION_VARIABLE_H$/;"	d	file:
CPPREFERENCE_CSETJMP_H	std-headers/csetjmp	/^#define CPPREFERENCE_CSETJMP_H$/;"	d	file:
CPPREFERENCE_CSIGNAL_H	std-headers/csignal	/^#define CPPREFERENCE_CSIGNAL_H$/;"	d	file:
CPPREFERENCE_CSTDARG_H	std-headers/cstdarg	/^#define CPPREFERENCE_CSTDARG_H$/;"	d	file:
CPPREFERENCE_CSTDBOOL_H	std-headers/cstdbool	/^#define CPPREFERENCE_CSTDBOOL_H$/;"	d	file:
CPPREFERENCE_CSTDDEF_H	std-headers/cstddef	/^#define CPPREFERENCE_CSTDDEF_H$/;"	d	file:
CPPREFERENCE_CSTDINT_H	std-headers/cstdint	/^#define CPPREFERENCE_CSTDINT_H$/;"	d	file:
CPPREFERENCE_CSTDIO_H	std-headers/cstdio	/^#define CPPREFERENCE_CSTDIO_H$/;"	d	file:
CPPREFERENCE_CSTDLIB_H	std-headers/cstdlib	/^#define CPPREFERENCE_CSTDLIB_H$/;"	d	file:
CPPREFERENCE_CSTRING_H	std-headers/cstring	/^#define CPPREFERENCE_CSTRING_H$/;"	d	file:
CPPREFERENCE_CTGMATH_H	std-headers/ctgmath	/^#define CPPREFERENCE_CTGMATH_H$/;"	d	file:
CPPREFERENCE_CTIME_H	std-headers/ctime	/^#define CPPREFERENCE_CTIME_H$/;"	d	file:
CPPREFERENCE_CUCHAR_H	std-headers/cuchar	/^#define CPPREFERENCE_CUCHAR_H$/;"	d	file:
CPPREFERENCE_CWCHAR_H	std-headers/cwchar	/^#define CPPREFERENCE_CWCHAR_H$/;"	d	file:
CPPREFERENCE_CWCTYPE_H	std-headers/cwctype	/^#define CPPREFERENCE_CWCTYPE_H$/;"	d	file:
CPPREFERENCE_DEQUE_H	std-headers/deque	/^#define CPPREFERENCE_DEQUE_H$/;"	d	file:
CPPREFERENCE_EXCEPTION_H	std-headers/exception	/^#define CPPREFERENCE_EXCEPTION_H$/;"	d	file:
CPPREFERENCE_FORWARD_LIST_H	std-headers/forward_list	/^#define CPPREFERENCE_FORWARD_LIST_H$/;"	d	file:
CPPREFERENCE_FSTREAM_H	std-headers/fstream	/^#define CPPREFERENCE_FSTREAM_H$/;"	d	file:
CPPREFERENCE_FUNCTIONAL_H	std-headers/functional	/^#define CPPREFERENCE_FUNCTIONAL_H$/;"	d	file:
CPPREFERENCE_FUTURE_H	std-headers/future	/^#define CPPREFERENCE_FUTURE_H$/;"	d	file:
CPPREFERENCE_INITIALIZER_LIST_H	std-headers/initializer_list	/^#define CPPREFERENCE_INITIALIZER_LIST_H$/;"	d	file:
CPPREFERENCE_IOMANIP_H	std-headers/iomanip	/^#define CPPREFERENCE_IOMANIP_H$/;"	d	file:
CPPREFERENCE_IOSFWD_H	std-headers/iosfwd	/^#define CPPREFERENCE_IOSFWD_H$/;"	d	file:
CPPREFERENCE_IOSTREAM_H	std-headers/iostream	/^#define CPPREFERENCE_IOSTREAM_H$/;"	d	file:
CPPREFERENCE_IOS_H	std-headers/ios	/^#define CPPREFERENCE_IOS_H$/;"	d	file:
CPPREFERENCE_ISTREAM_H	std-headers/istream	/^#define CPPREFERENCE_ISTREAM_H$/;"	d	file:
CPPREFERENCE_ITERATOR_H	std-headers/iterator	/^#define CPPREFERENCE_ITERATOR_H$/;"	d	file:
CPPREFERENCE_LIMITS_H	std-headers/limits	/^#define CPPREFERENCE_LIMITS_H$/;"	d	file:
CPPREFERENCE_LIST_H	std-headers/list	/^#define CPPREFERENCE_LIST_H$/;"	d	file:
CPPREFERENCE_LOCALE_H	std-headers/locale	/^#define CPPREFERENCE_LOCALE_H$/;"	d	file:
CPPREFERENCE_MAP_H	std-headers/map	/^#define CPPREFERENCE_MAP_H$/;"	d	file:
CPPREFERENCE_MEMORY_H	std-headers/memory	/^#define CPPREFERENCE_MEMORY_H$/;"	d	file:
CPPREFERENCE_MUTEX_H	std-headers/mutex	/^#define CPPREFERENCE_MUTEX_H$/;"	d	file:
CPPREFERENCE_NEW_H	std-headers/new	/^#define CPPREFERENCE_NEW_H$/;"	d	file:
CPPREFERENCE_NUMERIC_H	std-headers/numeric	/^#define CPPREFERENCE_NUMERIC_H$/;"	d	file:
CPPREFERENCE_OSTREAM_H	std-headers/ostream	/^#define CPPREFERENCE_OSTREAM_H$/;"	d	file:
CPPREFERENCE_QUEUE_H	std-headers/queue	/^#define CPPREFERENCE_QUEUE_H$/;"	d	file:
CPPREFERENCE_RANDOM_H	std-headers/random	/^#define CPPREFERENCE_RANDOM_H$/;"	d	file:
CPPREFERENCE_RATIO_H	std-headers/ratio	/^#define CPPREFERENCE_RATIO_H$/;"	d	file:
CPPREFERENCE_REGEX_H	std-headers/regex	/^#define CPPREFERENCE_REGEX_H$/;"	d	file:
CPPREFERENCE_SCOPED_ALLOCATOR_H	std-headers/scoped_allocator	/^#define CPPREFERENCE_SCOPED_ALLOCATOR_H$/;"	d	file:
CPPREFERENCE_SET_H	std-headers/set	/^#define CPPREFERENCE_SET_H$/;"	d	file:
CPPREFERENCE_SHARED_MUTEX_H	std-headers/shared_mutex	/^#define CPPREFERENCE_SHARED_MUTEX_H$/;"	d	file:
CPPREFERENCE_SSTREAM_H	std-headers/sstream	/^#define CPPREFERENCE_SSTREAM_H$/;"	d	file:
CPPREFERENCE_STACK_H	std-headers/stack	/^#define CPPREFERENCE_STACK_H$/;"	d	file:
CPPREFERENCE_STDEXCEPT_H	std-headers/stdexcept	/^#define CPPREFERENCE_STDEXCEPT_H$/;"	d	file:
CPPREFERENCE_STREAMBUF_H	std-headers/streambuf	/^#define CPPREFERENCE_STREAMBUF_H$/;"	d	file:
CPPREFERENCE_STRING_H	std-headers/string	/^#define CPPREFERENCE_STRING_H$/;"	d	file:
CPPREFERENCE_SYSTEM_ERROR_H	std-headers/system_error	/^#define CPPREFERENCE_SYSTEM_ERROR_H$/;"	d	file:
CPPREFERENCE_THREAD_H	std-headers/thread	/^#define CPPREFERENCE_THREAD_H$/;"	d	file:
CPPREFERENCE_TUPLE_H	std-headers/tuple	/^#define CPPREFERENCE_TUPLE_H$/;"	d	file:
CPPREFERENCE_TYPEINDEX_H	std-headers/typeindex	/^#define CPPREFERENCE_TYPEINDEX_H$/;"	d	file:
CPPREFERENCE_TYPEINFO_H	std-headers/typeinfo	/^#define CPPREFERENCE_TYPEINFO_H$/;"	d	file:
CPPREFERENCE_TYPE_TRAITS_H	std-headers/type_traits	/^#define CPPREFERENCE_TYPE_TRAITS_H$/;"	d	file:
CPPREFERENCE_UNORDERED_MAP_H	std-headers/unordered_map	/^#define CPPREFERENCE_UNORDERED_MAP_H$/;"	d	file:
CPPREFERENCE_UNORDERED_SET_H	std-headers/unordered_set	/^#define CPPREFERENCE_UNORDERED_SET_H$/;"	d	file:
CPPREFERENCE_UTILITY_H	std-headers/utility	/^#define CPPREFERENCE_UTILITY_H$/;"	d	file:
CPPREFERENCE_VALARRAY_H	std-headers/valarray	/^#define CPPREFERENCE_VALARRAY_H$/;"	d	file:
CPPREFERENCE_VECTOR_H	std-headers/vector	/^#define CPPREFERENCE_VECTOR_H$/;"	d	file:
DBL_DIG	std-headers/cfloat	/^#define DBL_DIG /;"	d	file:
DBL_EPSILON	std-headers/cfloat	/^#define DBL_EPSILON /;"	d	file:
DBL_MANT_DIG	std-headers/cfloat	/^#define DBL_MANT_DIG /;"	d	file:
DBL_MAX	std-headers/cfloat	/^#define DBL_MAX /;"	d	file:
DBL_MAX_10_EXP	std-headers/cfloat	/^#define DBL_MAX_10_EXP /;"	d	file:
DBL_MAX_EXP	std-headers/cfloat	/^#define DBL_MAX_EXP /;"	d	file:
DBL_MIN	std-headers/cfloat	/^#define DBL_MIN /;"	d	file:
DBL_MIN_10_EXP	std-headers/cfloat	/^#define DBL_MIN_10_EXP /;"	d	file:
DBL_MIN_EXP	std-headers/cfloat	/^#define DBL_MIN_EXP /;"	d	file:
DECIMAL_DIG	std-headers/cfloat	/^#define DECIMAL_DIG /;"	d	file:
E2BIG	std-headers/cerrno	/^#define E2BIG /;"	d	file:
EACCES	std-headers/cerrno	/^#define EACCES /;"	d	file:
EADDRINUSE	std-headers/cerrno	/^#define EADDRINUSE /;"	d	file:
EADDRNOTAVAIL	std-headers/cerrno	/^#define EADDRNOTAVAIL /;"	d	file:
EAFNOSUPPORT	std-headers/cerrno	/^#define EAFNOSUPPORT /;"	d	file:
EAGAIN	std-headers/cerrno	/^#define EAGAIN /;"	d	file:
EALREADY	std-headers/cerrno	/^#define EALREADY /;"	d	file:
EBADF	std-headers/cerrno	/^#define EBADF /;"	d	file:
EBADMSG	std-headers/cerrno	/^#define EBADMSG /;"	d	file:
EBUSY	std-headers/cerrno	/^#define EBUSY /;"	d	file:
ECANCELED	std-headers/cerrno	/^#define ECANCELED /;"	d	file:
ECHILD	std-headers/cerrno	/^#define ECHILD /;"	d	file:
ECMAScript	std-headers/regex	/^constexpr syntax_option_type ECMAScript;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
ECONNABORTED	std-headers/cerrno	/^#define ECONNABORTED /;"	d	file:
ECONNREFUSED	std-headers/cerrno	/^#define ECONNREFUSED /;"	d	file:
ECONNRESET	std-headers/cerrno	/^#define ECONNRESET /;"	d	file:
EDEADLK	std-headers/cerrno	/^#define EDEADLK /;"	d	file:
EDESTADDRREQ	std-headers/cerrno	/^#define EDESTADDRREQ /;"	d	file:
EDOM	std-headers/cerrno	/^#define EDOM /;"	d	file:
EEXIST	std-headers/cerrno	/^#define EEXIST /;"	d	file:
EFAULT	std-headers/cerrno	/^#define EFAULT /;"	d	file:
EFBIG	std-headers/cerrno	/^#define EFBIG /;"	d	file:
EHOSTUNREACH	std-headers/cerrno	/^#define EHOSTUNREACH /;"	d	file:
EIDRM	std-headers/cerrno	/^#define EIDRM /;"	d	file:
EILSEQ	std-headers/cerrno	/^#define EILSEQ /;"	d	file:
EINPROGRESS	std-headers/cerrno	/^#define EINPROGRESS /;"	d	file:
EINTR	std-headers/cerrno	/^#define EINTR /;"	d	file:
EINVAL	std-headers/cerrno	/^#define EINVAL /;"	d	file:
EIO	std-headers/cerrno	/^#define EIO /;"	d	file:
EISCONN	std-headers/cerrno	/^#define EISCONN /;"	d	file:
EISDIR	std-headers/cerrno	/^#define EISDIR /;"	d	file:
ELOOP	std-headers/cerrno	/^#define ELOOP /;"	d	file:
EMFILE	std-headers/cerrno	/^#define EMFILE /;"	d	file:
EMLINK	std-headers/cerrno	/^#define EMLINK /;"	d	file:
EMSGSIZE	std-headers/cerrno	/^#define EMSGSIZE /;"	d	file:
ENAMETOOLONG	std-headers/cerrno	/^#define ENAMETOOLONG /;"	d	file:
ENETDOWN	std-headers/cerrno	/^#define ENETDOWN /;"	d	file:
ENETRESET	std-headers/cerrno	/^#define ENETRESET /;"	d	file:
ENETUNREACH	std-headers/cerrno	/^#define ENETUNREACH /;"	d	file:
ENFILE	std-headers/cerrno	/^#define ENFILE /;"	d	file:
ENOBUFS	std-headers/cerrno	/^#define ENOBUFS /;"	d	file:
ENODATA	std-headers/cerrno	/^#define ENODATA /;"	d	file:
ENODEV	std-headers/cerrno	/^#define ENODEV /;"	d	file:
ENOENT	std-headers/cerrno	/^#define ENOENT /;"	d	file:
ENOEXEC	std-headers/cerrno	/^#define ENOEXEC /;"	d	file:
ENOLCK	std-headers/cerrno	/^#define ENOLCK /;"	d	file:
ENOLINK	std-headers/cerrno	/^#define ENOLINK /;"	d	file:
ENOMEM	std-headers/cerrno	/^#define ENOMEM /;"	d	file:
ENOMSG	std-headers/cerrno	/^#define ENOMSG /;"	d	file:
ENOPROTOOPT	std-headers/cerrno	/^#define ENOPROTOOPT /;"	d	file:
ENOSPC	std-headers/cerrno	/^#define ENOSPC /;"	d	file:
ENOSR	std-headers/cerrno	/^#define ENOSR /;"	d	file:
ENOSTR	std-headers/cerrno	/^#define ENOSTR /;"	d	file:
ENOSYS	std-headers/cerrno	/^#define ENOSYS /;"	d	file:
ENOTCONN	std-headers/cerrno	/^#define ENOTCONN /;"	d	file:
ENOTDIR	std-headers/cerrno	/^#define ENOTDIR /;"	d	file:
ENOTEMPTY	std-headers/cerrno	/^#define ENOTEMPTY /;"	d	file:
ENOTRECOVERABLE	std-headers/cerrno	/^#define ENOTRECOVERABLE /;"	d	file:
ENOTSOCK	std-headers/cerrno	/^#define ENOTSOCK /;"	d	file:
ENOTSUP	std-headers/cerrno	/^#define ENOTSUP /;"	d	file:
ENOTTY	std-headers/cerrno	/^#define ENOTTY /;"	d	file:
ENXIO	std-headers/cerrno	/^#define ENXIO /;"	d	file:
EOPNOTSUPP	std-headers/cerrno	/^#define EOPNOTSUPP /;"	d	file:
EOR	std-headers/cstdio	/^#define EOR /;"	d	file:
EOVERFLOW	std-headers/cerrno	/^#define EOVERFLOW /;"	d	file:
EOWNERDEAD	std-headers/cerrno	/^#define EOWNERDEAD /;"	d	file:
EPERM	std-headers/cerrno	/^#define EPERM /;"	d	file:
EPIPE	std-headers/cerrno	/^#define EPIPE /;"	d	file:
EPROTO	std-headers/cerrno	/^#define EPROTO /;"	d	file:
EPROTONOSUPPORT	std-headers/cerrno	/^#define EPROTONOSUPPORT /;"	d	file:
EPROTOTYPE	std-headers/cerrno	/^#define EPROTOTYPE /;"	d	file:
ERANGE	std-headers/cerrno	/^#define ERANGE /;"	d	file:
EROFS	std-headers/cerrno	/^#define EROFS /;"	d	file:
ESPIPE	std-headers/cerrno	/^#define ESPIPE /;"	d	file:
ESRCH	std-headers/cerrno	/^#define ESRCH /;"	d	file:
ETIME	std-headers/cerrno	/^#define ETIME /;"	d	file:
ETIMEDOUT	std-headers/cerrno	/^#define ETIMEDOUT /;"	d	file:
ETXTBSY	std-headers/cerrno	/^#define ETXTBSY /;"	d	file:
EWOULDBLOCK	std-headers/cerrno	/^#define EWOULDBLOCK /;"	d	file:
EXDEV	std-headers/cerrno	/^#define EXDEV /;"	d	file:
EXIT_FAILURE	std-headers/cstdlib	/^#define EXIT_FAILURE /;"	d	file:
EXIT_SUCCESS	std-headers/cstdlib	/^#define EXIT_SUCCESS /;"	d	file:
FE_ALL_EXCEPT	std-headers/cfenv	/^#define FE_ALL_EXCEPT /;"	d	file:
FE_DFL_ENV	std-headers/cfenv	/^#define FE_DFL_ENV /;"	d	file:
FE_DIVBYZERO	std-headers/cfenv	/^#define FE_DIVBYZERO /;"	d	file:
FE_DOWNWARD	std-headers/cfenv	/^#define FE_DOWNWARD /;"	d	file:
FE_INEXACT	std-headers/cfenv	/^#define FE_INEXACT /;"	d	file:
FE_INVALID	std-headers/cfenv	/^#define FE_INVALID /;"	d	file:
FE_OVERFLOW	std-headers/cfenv	/^#define FE_OVERFLOW /;"	d	file:
FE_TONEAREST	std-headers/cfenv	/^#define FE_TONEAREST /;"	d	file:
FE_TOWARDZERO	std-headers/cfenv	/^#define FE_TOWARDZERO /;"	d	file:
FE_UNDERFLOW	std-headers/cfenv	/^#define FE_UNDERFLOW /;"	d	file:
FE_UPWARD	std-headers/cfenv	/^#define FE_UPWARD /;"	d	file:
FILENAME_MAX	std-headers/cstdio	/^#define FILENAME_MAX /;"	d	file:
FLT_DIG	std-headers/cfloat	/^#define FLT_DIG /;"	d	file:
FLT_EPSILON	std-headers/cfloat	/^#define FLT_EPSILON /;"	d	file:
FLT_EVAL_METHOD	std-headers/cfloat	/^#define FLT_EVAL_METHOD /;"	d	file:
FLT_MANT_DIG	std-headers/cfloat	/^#define FLT_MANT_DIG /;"	d	file:
FLT_MAX	std-headers/cfloat	/^#define FLT_MAX /;"	d	file:
FLT_MAX_10_EXP	std-headers/cfloat	/^#define FLT_MAX_10_EXP /;"	d	file:
FLT_MAX_EXP	std-headers/cfloat	/^#define FLT_MAX_EXP /;"	d	file:
FLT_MIN	std-headers/cfloat	/^#define FLT_MIN /;"	d	file:
FLT_MIN_10_EXP	std-headers/cfloat	/^#define FLT_MIN_10_EXP /;"	d	file:
FLT_MIN_EXP	std-headers/cfloat	/^#define FLT_MIN_EXP /;"	d	file:
FLT_RADIX	std-headers/cfloat	/^#define FLT_RADIX /;"	d	file:
FLT_ROUNDS	std-headers/cfloat	/^#define FLT_ROUNDS$/;"	d	file:
FOPEN_MAX	std-headers/cstdio	/^#define FOPEN_MAX /;"	d	file:
FP_INFINITE	std-headers/cmath	/^#define FP_INFINITE /;"	d	file:
FP_NAN	std-headers/cmath	/^#define FP_NAN /;"	d	file:
FP_NORMAL	std-headers/cmath	/^#define FP_NORMAL /;"	d	file:
FP_SUBNORMAL	std-headers/cmath	/^#define FP_SUBNORMAL /;"	d	file:
FP_ZERO	std-headers/cmath	/^#define FP_ZERO /;"	d	file:
HUGE_VAL	std-headers/cmath	/^#define HUGE_VAL /;"	d	file:
HUGE_VALF	std-headers/cmath	/^#define HUGE_VALF /;"	d	file:
HUGE_VALL	std-headers/cmath	/^#define HUGE_VALL /;"	d	file:
INFINITY	std-headers/cmath	/^#define INFINITY /;"	d	file:
INT16_C	std-headers/cstdint	/^#define INT16_C(/;"	d	file:
INT16_MAX	std-headers/cstdint	/^#define INT16_MAX /;"	d	file:
INT16_MIN	std-headers/cstdint	/^#define INT16_MIN /;"	d	file:
INT32_C	std-headers/cstdint	/^#define INT32_C(/;"	d	file:
INT32_MAX	std-headers/cstdint	/^#define INT32_MAX /;"	d	file:
INT32_MIN	std-headers/cstdint	/^#define INT32_MIN /;"	d	file:
INT64_C	std-headers/cstdint	/^#define INT64_C(/;"	d	file:
INT64_MAX	std-headers/cstdint	/^#define INT64_MAX /;"	d	file:
INT64_MIN	std-headers/cstdint	/^#define INT64_MIN /;"	d	file:
INT8_C	std-headers/cstdint	/^#define INT8_C(/;"	d	file:
INT8_MAX	std-headers/cstdint	/^#define INT8_MAX /;"	d	file:
INT8_MIN	std-headers/cstdint	/^#define INT8_MIN /;"	d	file:
INTMAX_C	std-headers/cstdint	/^#define INTMAX_C(/;"	d	file:
INTMAX_MAX	std-headers/cstdint	/^#define INTMAX_MAX /;"	d	file:
INTMAX_MIN	std-headers/cstdint	/^#define INTMAX_MIN /;"	d	file:
INTPTR_MAX	std-headers/cstdint	/^#define INTPTR_MAX /;"	d	file:
INTPTR_MIN	std-headers/cstdint	/^#define INTPTR_MIN /;"	d	file:
INT_FAST16_MAX	std-headers/cstdint	/^#define INT_FAST16_MAX /;"	d	file:
INT_FAST16_MIN	std-headers/cstdint	/^#define INT_FAST16_MIN /;"	d	file:
INT_FAST32_MAX	std-headers/cstdint	/^#define INT_FAST32_MAX /;"	d	file:
INT_FAST32_MIN	std-headers/cstdint	/^#define INT_FAST32_MIN /;"	d	file:
INT_FAST64_MAX	std-headers/cstdint	/^#define INT_FAST64_MAX /;"	d	file:
INT_FAST64_MIN	std-headers/cstdint	/^#define INT_FAST64_MIN /;"	d	file:
INT_FAST8_MAX	std-headers/cstdint	/^#define INT_FAST8_MAX /;"	d	file:
INT_FAST8_MIN	std-headers/cstdint	/^#define INT_FAST8_MIN /;"	d	file:
INT_LEAST16_MAX	std-headers/cstdint	/^#define INT_LEAST16_MAX /;"	d	file:
INT_LEAST16_MIN	std-headers/cstdint	/^#define INT_LEAST16_MIN /;"	d	file:
INT_LEAST32_MAX	std-headers/cstdint	/^#define INT_LEAST32_MAX /;"	d	file:
INT_LEAST32_MIN	std-headers/cstdint	/^#define INT_LEAST32_MIN /;"	d	file:
INT_LEAST64_MAX	std-headers/cstdint	/^#define INT_LEAST64_MAX /;"	d	file:
INT_LEAST64_MIN	std-headers/cstdint	/^#define INT_LEAST64_MIN /;"	d	file:
INT_LEAST8_MAX	std-headers/cstdint	/^#define INT_LEAST8_MAX /;"	d	file:
INT_LEAST8_MIN	std-headers/cstdint	/^#define INT_LEAST8_MIN /;"	d	file:
INT_MAX	std-headers/climits	/^#define INT_MAX /;"	d	file:
INT_MIN	std-headers/climits	/^#define INT_MIN /;"	d	file:
LC_ALL	std-headers/clocale	/^#define LC_ALL /;"	d	file:
LC_COLLATE	std-headers/clocale	/^#define LC_COLLATE /;"	d	file:
LC_CTYPE	std-headers/clocale	/^#define LC_CTYPE /;"	d	file:
LC_MONETARY	std-headers/clocale	/^#define LC_MONETARY /;"	d	file:
LC_NUMERIC	std-headers/clocale	/^#define LC_NUMERIC /;"	d	file:
LC_TIME	std-headers/clocale	/^#define LC_TIME /;"	d	file:
LDBL_DIG	std-headers/cfloat	/^#define LDBL_DIG /;"	d	file:
LDBL_EPSILON	std-headers/cfloat	/^#define LDBL_EPSILON /;"	d	file:
LDBL_MANT_DIG	std-headers/cfloat	/^#define LDBL_MANT_DIG /;"	d	file:
LDBL_MAX	std-headers/cfloat	/^#define LDBL_MAX /;"	d	file:
LDBL_MAX_10_EXP	std-headers/cfloat	/^#define LDBL_MAX_10_EXP /;"	d	file:
LDBL_MAX_EXP	std-headers/cfloat	/^#define LDBL_MAX_EXP /;"	d	file:
LDBL_MIN	std-headers/cfloat	/^#define LDBL_MIN /;"	d	file:
LDBL_MIN_10_EXP	std-headers/cfloat	/^#define LDBL_MIN_10_EXP /;"	d	file:
LDBL_MIN_EXP	std-headers/cfloat	/^#define LDBL_MIN_EXP /;"	d	file:
LLONG_MAX	std-headers/climits	/^#define LLONG_MAX /;"	d	file:
LLONG_MIN	std-headers/climits	/^#define LLONG_MIN /;"	d	file:
LONG_MAX	std-headers/climits	/^#define LONG_MAX /;"	d	file:
LONG_MIN	std-headers/climits	/^#define LONG_MIN /;"	d	file:
L_tmpnam	std-headers/cstdio	/^#define L_tmpnam /;"	d	file:
MATH_ERREXCEPT	std-headers/cmath	/^#define MATH_ERREXCEPT /;"	d	file:
MATH_ERRNO	std-headers/cmath	/^#define MATH_ERRNO /;"	d	file:
MB_CUR_MAX	std-headers/cstdlib	/^#define MB_CUR_MAX /;"	d	file:
MB_LEN_MAX	std-headers/climits	/^#define MB_LEN_MAX /;"	d	file:
NAN	std-headers/cmath	/^#define NAN /;"	d	file:
NULL	std-headers/cstddef	/^#define NULL$/;"	d	file:
PRIX16	std-headers/cinttypes	/^#define PRIX16 /;"	d	file:
PRIX32	std-headers/cinttypes	/^#define PRIX32 /;"	d	file:
PRIX64	std-headers/cinttypes	/^#define PRIX64 /;"	d	file:
PRIX8	std-headers/cinttypes	/^#define PRIX8 /;"	d	file:
PRIXFAST16	std-headers/cinttypes	/^#define PRIXFAST16 /;"	d	file:
PRIXFAST32	std-headers/cinttypes	/^#define PRIXFAST32 /;"	d	file:
PRIXFAST64	std-headers/cinttypes	/^#define PRIXFAST64 /;"	d	file:
PRIXFAST8	std-headers/cinttypes	/^#define PRIXFAST8 /;"	d	file:
PRIXLEAST16	std-headers/cinttypes	/^#define PRIXLEAST16 /;"	d	file:
PRIXLEAST32	std-headers/cinttypes	/^#define PRIXLEAST32 /;"	d	file:
PRIXLEAST64	std-headers/cinttypes	/^#define PRIXLEAST64 /;"	d	file:
PRIXLEAST8	std-headers/cinttypes	/^#define PRIXLEAST8 /;"	d	file:
PRIXMAX	std-headers/cinttypes	/^#define PRIXMAX /;"	d	file:
PRIXPTR	std-headers/cinttypes	/^#define PRIXPTR /;"	d	file:
PRId16	std-headers/cinttypes	/^#define PRId16 /;"	d	file:
PRId32	std-headers/cinttypes	/^#define PRId32 /;"	d	file:
PRId64	std-headers/cinttypes	/^#define PRId64 /;"	d	file:
PRId8	std-headers/cinttypes	/^#define PRId8 /;"	d	file:
PRIdFAST16	std-headers/cinttypes	/^#define PRIdFAST16 /;"	d	file:
PRIdFAST32	std-headers/cinttypes	/^#define PRIdFAST32 /;"	d	file:
PRIdFAST64	std-headers/cinttypes	/^#define PRIdFAST64 /;"	d	file:
PRIdFAST8	std-headers/cinttypes	/^#define PRIdFAST8 /;"	d	file:
PRIdLEAST16	std-headers/cinttypes	/^#define PRIdLEAST16 /;"	d	file:
PRIdLEAST32	std-headers/cinttypes	/^#define PRIdLEAST32 /;"	d	file:
PRIdLEAST64	std-headers/cinttypes	/^#define PRIdLEAST64 /;"	d	file:
PRIdLEAST8	std-headers/cinttypes	/^#define PRIdLEAST8 /;"	d	file:
PRIdMAX	std-headers/cinttypes	/^#define PRIdMAX /;"	d	file:
PRIdPTR	std-headers/cinttypes	/^#define PRIdPTR /;"	d	file:
PRIi16	std-headers/cinttypes	/^#define PRIi16 /;"	d	file:
PRIi32	std-headers/cinttypes	/^#define PRIi32 /;"	d	file:
PRIi64	std-headers/cinttypes	/^#define PRIi64 /;"	d	file:
PRIi8	std-headers/cinttypes	/^#define PRIi8 /;"	d	file:
PRIiFAST16	std-headers/cinttypes	/^#define PRIiFAST16 /;"	d	file:
PRIiFAST32	std-headers/cinttypes	/^#define PRIiFAST32 /;"	d	file:
PRIiFAST64	std-headers/cinttypes	/^#define PRIiFAST64 /;"	d	file:
PRIiFAST8	std-headers/cinttypes	/^#define PRIiFAST8 /;"	d	file:
PRIiLEAST16	std-headers/cinttypes	/^#define PRIiLEAST16 /;"	d	file:
PRIiLEAST32	std-headers/cinttypes	/^#define PRIiLEAST32 /;"	d	file:
PRIiLEAST64	std-headers/cinttypes	/^#define PRIiLEAST64 /;"	d	file:
PRIiLEAST8	std-headers/cinttypes	/^#define PRIiLEAST8 /;"	d	file:
PRIiMAX	std-headers/cinttypes	/^#define PRIiMAX /;"	d	file:
PRIiPTR	std-headers/cinttypes	/^#define PRIiPTR /;"	d	file:
PRIo16	std-headers/cinttypes	/^#define PRIo16 /;"	d	file:
PRIo32	std-headers/cinttypes	/^#define PRIo32 /;"	d	file:
PRIo64	std-headers/cinttypes	/^#define PRIo64 /;"	d	file:
PRIo8	std-headers/cinttypes	/^#define PRIo8 /;"	d	file:
PRIoFAST16	std-headers/cinttypes	/^#define PRIoFAST16 /;"	d	file:
PRIoFAST32	std-headers/cinttypes	/^#define PRIoFAST32 /;"	d	file:
PRIoFAST64	std-headers/cinttypes	/^#define PRIoFAST64 /;"	d	file:
PRIoFAST8	std-headers/cinttypes	/^#define PRIoFAST8 /;"	d	file:
PRIoLEAST16	std-headers/cinttypes	/^#define PRIoLEAST16 /;"	d	file:
PRIoLEAST32	std-headers/cinttypes	/^#define PRIoLEAST32 /;"	d	file:
PRIoLEAST64	std-headers/cinttypes	/^#define PRIoLEAST64 /;"	d	file:
PRIoLEAST8	std-headers/cinttypes	/^#define PRIoLEAST8 /;"	d	file:
PRIoMAX	std-headers/cinttypes	/^#define PRIoMAX /;"	d	file:
PRIoPTR	std-headers/cinttypes	/^#define PRIoPTR /;"	d	file:
PRIu16	std-headers/cinttypes	/^#define PRIu16 /;"	d	file:
PRIu32	std-headers/cinttypes	/^#define PRIu32 /;"	d	file:
PRIu64	std-headers/cinttypes	/^#define PRIu64 /;"	d	file:
PRIu8	std-headers/cinttypes	/^#define PRIu8 /;"	d	file:
PRIuFAST16	std-headers/cinttypes	/^#define PRIuFAST16 /;"	d	file:
PRIuFAST32	std-headers/cinttypes	/^#define PRIuFAST32 /;"	d	file:
PRIuFAST64	std-headers/cinttypes	/^#define PRIuFAST64 /;"	d	file:
PRIuFAST8	std-headers/cinttypes	/^#define PRIuFAST8 /;"	d	file:
PRIuLEAST16	std-headers/cinttypes	/^#define PRIuLEAST16 /;"	d	file:
PRIuLEAST32	std-headers/cinttypes	/^#define PRIuLEAST32 /;"	d	file:
PRIuLEAST64	std-headers/cinttypes	/^#define PRIuLEAST64 /;"	d	file:
PRIuLEAST8	std-headers/cinttypes	/^#define PRIuLEAST8 /;"	d	file:
PRIuMAX	std-headers/cinttypes	/^#define PRIuMAX /;"	d	file:
PRIuPTR	std-headers/cinttypes	/^#define PRIuPTR /;"	d	file:
PRIx16	std-headers/cinttypes	/^#define PRIx16 /;"	d	file:
PRIx32	std-headers/cinttypes	/^#define PRIx32 /;"	d	file:
PRIx64	std-headers/cinttypes	/^#define PRIx64 /;"	d	file:
PRIx8	std-headers/cinttypes	/^#define PRIx8 /;"	d	file:
PRIxFAST16	std-headers/cinttypes	/^#define PRIxFAST16 /;"	d	file:
PRIxFAST32	std-headers/cinttypes	/^#define PRIxFAST32 /;"	d	file:
PRIxFAST64	std-headers/cinttypes	/^#define PRIxFAST64 /;"	d	file:
PRIxFAST8	std-headers/cinttypes	/^#define PRIxFAST8 /;"	d	file:
PRIxLEAST16	std-headers/cinttypes	/^#define PRIxLEAST16 /;"	d	file:
PRIxLEAST32	std-headers/cinttypes	/^#define PRIxLEAST32 /;"	d	file:
PRIxLEAST64	std-headers/cinttypes	/^#define PRIxLEAST64 /;"	d	file:
PRIxLEAST8	std-headers/cinttypes	/^#define PRIxLEAST8 /;"	d	file:
PRIxMAX	std-headers/cinttypes	/^#define PRIxMAX /;"	d	file:
PRIxPTR	std-headers/cinttypes	/^#define PRIxPTR /;"	d	file:
PTRDIFF_MAX	std-headers/cstdint	/^#define PTRDIFF_MAX /;"	d	file:
PTRDIFF_MIN	std-headers/cstdint	/^#define PTRDIFF_MIN /;"	d	file:
Possible	std-headers/README.md	/^ - CPPREFERENCE_STDVER: defines the standard version of the interface. Possible$/;"	t	file:
RAND_MAX	std-headers/cstdlib	/^#define RAND_MAX /;"	d	file:
SCHAR_MAX	std-headers/climits	/^#define SCHAR_MAX /;"	d	file:
SCHAR_MIN	std-headers/climits	/^#define SCHAR_MIN /;"	d	file:
SCNd16	std-headers/cinttypes	/^#define SCNd16 /;"	d	file:
SCNd32	std-headers/cinttypes	/^#define SCNd32 /;"	d	file:
SCNd64	std-headers/cinttypes	/^#define SCNd64 /;"	d	file:
SCNd8	std-headers/cinttypes	/^#define SCNd8 /;"	d	file:
SCNdFAST16	std-headers/cinttypes	/^#define SCNdFAST16 /;"	d	file:
SCNdFAST32	std-headers/cinttypes	/^#define SCNdFAST32 /;"	d	file:
SCNdFAST64	std-headers/cinttypes	/^#define SCNdFAST64 /;"	d	file:
SCNdFAST8	std-headers/cinttypes	/^#define SCNdFAST8 /;"	d	file:
SCNdLEAST16	std-headers/cinttypes	/^#define SCNdLEAST16 /;"	d	file:
SCNdLEAST32	std-headers/cinttypes	/^#define SCNdLEAST32 /;"	d	file:
SCNdLEAST64	std-headers/cinttypes	/^#define SCNdLEAST64 /;"	d	file:
SCNdLEAST8	std-headers/cinttypes	/^#define SCNdLEAST8 /;"	d	file:
SCNdMAX	std-headers/cinttypes	/^#define SCNdMAX /;"	d	file:
SCNdPTR	std-headers/cinttypes	/^#define SCNdPTR /;"	d	file:
SCNi16	std-headers/cinttypes	/^#define SCNi16 /;"	d	file:
SCNi32	std-headers/cinttypes	/^#define SCNi32 /;"	d	file:
SCNi64	std-headers/cinttypes	/^#define SCNi64 /;"	d	file:
SCNi8	std-headers/cinttypes	/^#define SCNi8 /;"	d	file:
SCNiFAST16	std-headers/cinttypes	/^#define SCNiFAST16 /;"	d	file:
SCNiFAST32	std-headers/cinttypes	/^#define SCNiFAST32 /;"	d	file:
SCNiFAST64	std-headers/cinttypes	/^#define SCNiFAST64 /;"	d	file:
SCNiFAST8	std-headers/cinttypes	/^#define SCNiFAST8 /;"	d	file:
SCNiLEAST16	std-headers/cinttypes	/^#define SCNiLEAST16 /;"	d	file:
SCNiLEAST32	std-headers/cinttypes	/^#define SCNiLEAST32 /;"	d	file:
SCNiLEAST64	std-headers/cinttypes	/^#define SCNiLEAST64 /;"	d	file:
SCNiLEAST8	std-headers/cinttypes	/^#define SCNiLEAST8 /;"	d	file:
SCNiMAX	std-headers/cinttypes	/^#define SCNiMAX /;"	d	file:
SCNiPTR	std-headers/cinttypes	/^#define SCNiPTR /;"	d	file:
SCNo16	std-headers/cinttypes	/^#define SCNo16 /;"	d	file:
SCNo32	std-headers/cinttypes	/^#define SCNo32 /;"	d	file:
SCNo64	std-headers/cinttypes	/^#define SCNo64 /;"	d	file:
SCNo8	std-headers/cinttypes	/^#define SCNo8 /;"	d	file:
SCNoFAST16	std-headers/cinttypes	/^#define SCNoFAST16 /;"	d	file:
SCNoFAST32	std-headers/cinttypes	/^#define SCNoFAST32 /;"	d	file:
SCNoFAST64	std-headers/cinttypes	/^#define SCNoFAST64 /;"	d	file:
SCNoFAST8	std-headers/cinttypes	/^#define SCNoFAST8 /;"	d	file:
SCNoLEAST16	std-headers/cinttypes	/^#define SCNoLEAST16 /;"	d	file:
SCNoLEAST32	std-headers/cinttypes	/^#define SCNoLEAST32 /;"	d	file:
SCNoLEAST64	std-headers/cinttypes	/^#define SCNoLEAST64 /;"	d	file:
SCNoLEAST8	std-headers/cinttypes	/^#define SCNoLEAST8 /;"	d	file:
SCNoMAX	std-headers/cinttypes	/^#define SCNoMAX /;"	d	file:
SCNoPTR	std-headers/cinttypes	/^#define SCNoPTR /;"	d	file:
SCNu16	std-headers/cinttypes	/^#define SCNu16 /;"	d	file:
SCNu32	std-headers/cinttypes	/^#define SCNu32 /;"	d	file:
SCNu64	std-headers/cinttypes	/^#define SCNu64 /;"	d	file:
SCNu8	std-headers/cinttypes	/^#define SCNu8 /;"	d	file:
SCNuFAST16	std-headers/cinttypes	/^#define SCNuFAST16 /;"	d	file:
SCNuFAST32	std-headers/cinttypes	/^#define SCNuFAST32 /;"	d	file:
SCNuFAST64	std-headers/cinttypes	/^#define SCNuFAST64 /;"	d	file:
SCNuFAST8	std-headers/cinttypes	/^#define SCNuFAST8 /;"	d	file:
SCNuLEAST16	std-headers/cinttypes	/^#define SCNuLEAST16 /;"	d	file:
SCNuLEAST32	std-headers/cinttypes	/^#define SCNuLEAST32 /;"	d	file:
SCNuLEAST64	std-headers/cinttypes	/^#define SCNuLEAST64 /;"	d	file:
SCNuLEAST8	std-headers/cinttypes	/^#define SCNuLEAST8 /;"	d	file:
SCNuMAX	std-headers/cinttypes	/^#define SCNuMAX /;"	d	file:
SCNuPTR	std-headers/cinttypes	/^#define SCNuPTR /;"	d	file:
SCNx16	std-headers/cinttypes	/^#define SCNx16 /;"	d	file:
SCNx32	std-headers/cinttypes	/^#define SCNx32 /;"	d	file:
SCNx64	std-headers/cinttypes	/^#define SCNx64 /;"	d	file:
SCNx8	std-headers/cinttypes	/^#define SCNx8 /;"	d	file:
SCNxFAST16	std-headers/cinttypes	/^#define SCNxFAST16 /;"	d	file:
SCNxFAST32	std-headers/cinttypes	/^#define SCNxFAST32 /;"	d	file:
SCNxFAST64	std-headers/cinttypes	/^#define SCNxFAST64 /;"	d	file:
SCNxFAST8	std-headers/cinttypes	/^#define SCNxFAST8 /;"	d	file:
SCNxLEAST16	std-headers/cinttypes	/^#define SCNxLEAST16 /;"	d	file:
SCNxLEAST32	std-headers/cinttypes	/^#define SCNxLEAST32 /;"	d	file:
SCNxLEAST64	std-headers/cinttypes	/^#define SCNxLEAST64 /;"	d	file:
SCNxLEAST8	std-headers/cinttypes	/^#define SCNxLEAST8 /;"	d	file:
SCNxMAX	std-headers/cinttypes	/^#define SCNxMAX /;"	d	file:
SCNxPTR	std-headers/cinttypes	/^#define SCNxPTR /;"	d	file:
SEEK_CUR	std-headers/cstdio	/^#define SEEK_CUR /;"	d	file:
SEEK_END	std-headers/cstdio	/^#define SEEK_END /;"	d	file:
SEEK_SET	std-headers/cstdio	/^#define SEEK_SET /;"	d	file:
SHRT_MAX	std-headers/climits	/^#define SHRT_MAX /;"	d	file:
SHRT_MIN	std-headers/climits	/^#define SHRT_MIN /;"	d	file:
SIGABRT	std-headers/csignal	/^#define SIGABRT /;"	d	file:
SIGFPE	std-headers/csignal	/^#define SIGFPE /;"	d	file:
SIGILL	std-headers/csignal	/^#define SIGILL /;"	d	file:
SIGINT	std-headers/csignal	/^#define SIGINT /;"	d	file:
SIGSEGV	std-headers/csignal	/^#define SIGSEGV /;"	d	file:
SIGTERM	std-headers/csignal	/^#define SIGTERM /;"	d	file:
SIG_ATOMIC_MAX	std-headers/cstdint	/^#define SIG_ATOMIC_MAX /;"	d	file:
SIG_ATOMIC_MIN	std-headers/cstdint	/^#define SIG_ATOMIC_MIN /;"	d	file:
SIG_DFL	std-headers/csignal	/^#define SIG_DFL /;"	d	file:
SIG_ERR	std-headers/csignal	/^#define SIG_ERR /;"	d	file:
SIG_IGN	std-headers/csignal	/^#define SIG_IGN /;"	d	file:
SIZE_MAX	std-headers/cstdint	/^#define SIZE_MAX /;"	d	file:
TMP_MAX	std-headers/cstdio	/^#define TMP_MAX /;"	d	file:
UCHAR_MAX	std-headers/climits	/^#define UCHAR_MAX /;"	d	file:
UINT16_C	std-headers/cstdint	/^#define UINT16_C(/;"	d	file:
UINT16_MAX	std-headers/cstdint	/^#define UINT16_MAX /;"	d	file:
UINT16_MIN	std-headers/cstdint	/^#define UINT16_MIN /;"	d	file:
UINT32_C	std-headers/cstdint	/^#define UINT32_C(/;"	d	file:
UINT32_MAX	std-headers/cstdint	/^#define UINT32_MAX /;"	d	file:
UINT32_MIN	std-headers/cstdint	/^#define UINT32_MIN /;"	d	file:
UINT64_C	std-headers/cstdint	/^#define UINT64_C(/;"	d	file:
UINT64_MAX	std-headers/cstdint	/^#define UINT64_MAX /;"	d	file:
UINT64_MIN	std-headers/cstdint	/^#define UINT64_MIN /;"	d	file:
UINT8_C	std-headers/cstdint	/^#define UINT8_C(/;"	d	file:
UINT8_MAX	std-headers/cstdint	/^#define UINT8_MAX /;"	d	file:
UINT8_MIN	std-headers/cstdint	/^#define UINT8_MIN /;"	d	file:
UINTMAX_C	std-headers/cstdint	/^#define UINTMAX_C(/;"	d	file:
UINTMAX_MAX	std-headers/cstdint	/^#define UINTMAX_MAX /;"	d	file:
UINTMAX_MIN	std-headers/cstdint	/^#define UINTMAX_MIN /;"	d	file:
UINTPTR_MAX	std-headers/cstdint	/^#define UINTPTR_MAX /;"	d	file:
UINTPTR_MIN	std-headers/cstdint	/^#define UINTPTR_MIN /;"	d	file:
UINT_FAST16_MAX	std-headers/cstdint	/^#define UINT_FAST16_MAX /;"	d	file:
UINT_FAST16_MIN	std-headers/cstdint	/^#define UINT_FAST16_MIN /;"	d	file:
UINT_FAST32_MAX	std-headers/cstdint	/^#define UINT_FAST32_MAX /;"	d	file:
UINT_FAST32_MIN	std-headers/cstdint	/^#define UINT_FAST32_MIN /;"	d	file:
UINT_FAST64_MAX	std-headers/cstdint	/^#define UINT_FAST64_MAX /;"	d	file:
UINT_FAST64_MIN	std-headers/cstdint	/^#define UINT_FAST64_MIN /;"	d	file:
UINT_FAST8_MAX	std-headers/cstdint	/^#define UINT_FAST8_MAX /;"	d	file:
UINT_FAST8_MIN	std-headers/cstdint	/^#define UINT_FAST8_MIN /;"	d	file:
UINT_LEAST16_MAX	std-headers/cstdint	/^#define UINT_LEAST16_MAX /;"	d	file:
UINT_LEAST16_MIN	std-headers/cstdint	/^#define UINT_LEAST16_MIN /;"	d	file:
UINT_LEAST32_MAX	std-headers/cstdint	/^#define UINT_LEAST32_MAX /;"	d	file:
UINT_LEAST32_MIN	std-headers/cstdint	/^#define UINT_LEAST32_MIN /;"	d	file:
UINT_LEAST64_MAX	std-headers/cstdint	/^#define UINT_LEAST64_MAX /;"	d	file:
UINT_LEAST64_MIN	std-headers/cstdint	/^#define UINT_LEAST64_MIN /;"	d	file:
UINT_LEAST8_MAX	std-headers/cstdint	/^#define UINT_LEAST8_MAX /;"	d	file:
UINT_LEAST8_MIN	std-headers/cstdint	/^#define UINT_LEAST8_MIN /;"	d	file:
UINT_MAX	std-headers/climits	/^#define UINT_MAX /;"	d	file:
ULLONG_MAX	std-headers/climits	/^#define ULLONG_MAX /;"	d	file:
ULONG_MAX	std-headers/climits	/^#define ULONG_MAX /;"	d	file:
USHRT_MAX	std-headers/climits	/^#define USHRT_MAX /;"	d	file:
WCHAR_MAX	std-headers/cstdint	/^#define WCHAR_MAX /;"	d	file:
WCHAR_MAX	std-headers/cwctype	/^#define WCHAR_MAX /;"	d	file:
WCHAR_MIN	std-headers/cstdint	/^#define WCHAR_MIN /;"	d	file:
WCHAR_MIN	std-headers/cwctype	/^#define WCHAR_MIN /;"	d	file:
WEOF	std-headers/cwctype	/^#define WEOF /;"	d	file:
WINT_MAX	std-headers/cstdint	/^#define WINT_MAX /;"	d	file:
WINT_MIN	std-headers/cstdint	/^#define WINT_MIN /;"	d	file:
_1	std-headers/functional	/^extern int _1;$/;"	x	namespace:std::placeholders	typeref:typename:int
_2	std-headers/functional	/^extern int _2;$/;"	x	namespace:std::placeholders	typeref:typename:int
_3	std-headers/functional	/^extern int _3;$/;"	x	namespace:std::placeholders	typeref:typename:int
_4	std-headers/functional	/^extern int _4;$/;"	x	namespace:std::placeholders	typeref:typename:int
_5	std-headers/functional	/^extern int _5;$/;"	x	namespace:std::placeholders	typeref:typename:int
_6	std-headers/functional	/^extern int _6;$/;"	x	namespace:std::placeholders	typeref:typename:int
_7	std-headers/functional	/^extern int _7;$/;"	x	namespace:std::placeholders	typeref:typename:int
_8	std-headers/functional	/^extern int _8;$/;"	x	namespace:std::placeholders	typeref:typename:int
_9	std-headers/functional	/^extern int _9;$/;"	x	namespace:std::placeholders	typeref:typename:int
_Exit	std-headers/cstdlib	/^void _Exit(int exit_code);$/;"	p	namespace:std	typeref:typename:void	file:
_IOFBF	std-headers/cstdio	/^#define _IOFBF /;"	d	file:
_IOLBF	std-headers/cstdio	/^#define _IOLBF /;"	d	file:
_IONBF	std-headers/cstdio	/^#define _IONBF /;"	d	file:
__STDC_UTF_16__	std-headers/cuchar	/^#define __STDC_UTF_16__$/;"	d	file:
__STDC_UTF_32__	std-headers/cuchar	/^#define __STDC_UTF_32__$/;"	d	file:
__bool_true_false_are_defined	std-headers/cstdbool	/^#define __bool_true_false_are_defined /;"	d	file:
__unspecified	std-headers/iomanip	/^struct __unspecified { };$/;"	s	namespace:std	file:
a	std-headers/random	/^    result_type a() const;$/;"	p	class:std::cauchy_distribution	typeref:typename:result_type	file:
a	std-headers/random	/^    result_type a() const;$/;"	p	class:std::extreme_value_distribution	typeref:typename:result_type	file:
a	std-headers/random	/^    result_type a() const;$/;"	p	class:std::uniform_int_distribution	typeref:typename:result_type	file:
a	std-headers/random	/^    result_type a() const;$/;"	p	class:std::uniform_real_distribution	typeref:typename:result_type	file:
a	std-headers/random	/^    result_type a() const;$/;"	p	class:std::weibull_distribution	typeref:typename:result_type	file:
abort	std-headers/cstdlib	/^void abort();$/;"	p	namespace:std	typeref:typename:void	file:
abs	std-headers/cinttypes	/^std::intmax_t abs(std::intmax_t n);$/;"	p	namespace:std	typeref:typename:std::intmax_t	file:
abs	std-headers/cmath	/^double      abs(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
abs	std-headers/cmath	/^float       abs(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
abs	std-headers/cmath	/^long double abs(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
abs	std-headers/complex	/^T abs(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:T	file:
abs	std-headers/cstdlib	/^int abs(int n);$/;"	p	namespace:std	typeref:typename:int	file:
abs	std-headers/cstdlib	/^long      abs(long n);$/;"	p	namespace:std	typeref:typename:long	file:
abs	std-headers/cstdlib	/^long long abs(long long n);$/;"	p	namespace:std	typeref:typename:long long	file:
abs	std-headers/valarray	/^valarray<T> abs(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
accumulate	std-headers/numeric	/^T accumulate(InputIt first, InputIt last, T init);$/;"	p	namespace:std	typeref:typename:T	file:
accumulate	std-headers/numeric	/^T accumulate(InputIt first, InputIt last, T init,$/;"	p	namespace:std	typeref:typename:T	file:
acos	std-headers/cmath	/^double      acos(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
acos	std-headers/cmath	/^float       acos(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
acos	std-headers/cmath	/^long double acos(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
acos	std-headers/complex	/^complex<T> acos(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
acos	std-headers/valarray	/^valarray<T> acos(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
acosh	std-headers/cmath	/^double      acosh(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
acosh	std-headers/cmath	/^float       acosh(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
acosh	std-headers/cmath	/^long double acosh(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
acosh	std-headers/complex	/^complex<T> acosh(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
add_const	std-headers/type_traits	/^template<class T> struct add_const {$/;"	s	namespace:std	file:
add_cv	std-headers/type_traits	/^template<class T> struct add_cv {$/;"	s	namespace:std	file:
add_lvalue_reference	std-headers/type_traits	/^template<class T> struct add_lvalue_reference {$/;"	s	namespace:std	file:
add_pointer	std-headers/type_traits	/^template<class T> struct add_pointer {$/;"	s	namespace:std	file:
add_rvalue_reference	std-headers/type_traits	/^template<class T> struct add_rvalue_reference {$/;"	s	namespace:std	file:
add_volatile	std-headers/type_traits	/^template<class T> struct add_volatile {$/;"	s	namespace:std	file:
address	std-headers/memory	/^    const_pointer address(const_reference x) const;$/;"	p	struct:std::allocator	typeref:typename:const_pointer	file:
address	std-headers/memory	/^    pointer address(reference x) const;$/;"	p	struct:std::allocator	typeref:typename:pointer	file:
address_family_not_supported	std-headers/system_error	/^    address_family_not_supported,       \/\/  EAFNOSUPPORT$/;"	e	enum:std::errc	file:
address_in_use	std-headers/system_error	/^    address_in_use,                     \/\/  EADDRINUSE$/;"	e	enum:std::errc	file:
address_not_available	std-headers/system_error	/^    address_not_available,              \/\/  EADDRNOTAVAIL$/;"	e	enum:std::errc	file:
addressof	std-headers/memory	/^T* addressof(T& arg);$/;"	p	namespace:std	typeref:typename:T *	file:
adjacent_difference	std-headers/numeric	/^OutputIt adjacent_difference(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
adjacent_find	std-headers/algorithm	/^ForwardIt adjacent_find(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
adjacent_find	std-headers/algorithm	/^ForwardIt adjacent_find(ForwardIt first, ForwardIt last, BinaryPredicate p);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
adjustfield	std-headers/ios	/^    static constexpr fmtflags adjustfield;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
adopt_lock	std-headers/mutex	/^constexpr std::adopt_lock_t adopt_lock;$/;"	v	namespace:std	typeref:typename:std::adopt_lock_t
adopt_lock_t	std-headers/mutex	/^struct adopt_lock_t { };$/;"	s	namespace:std	file:
advance	std-headers/iterator	/^void advance(InputIt& it, Distance n);$/;"	p	namespace:std	typeref:typename:void	file:
align	std-headers/memory	/^void* align(std::size_t alignment,$/;"	p	namespace:std	typeref:typename:void *	file:
aligned_storage	std-headers/type_traits	/^template<size_t Len, size_t Align = 0> struct aligned_storage {$/;"	s	namespace:std	file:
aligned_union	std-headers/type_traits	/^template<size_t Len, class... Types> struct aligned_union {$/;"	s	namespace:std	file:
alignment_of	std-headers/type_traits	/^template<class T> struct alignment_of : integral_constant<size_t, 0> {};$/;"	s	namespace:std	file:
all	std-headers/bitset	/^    bool all() const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
all	std-headers/locale	/^    static const category all;$/;"	m	class:std::locale	typeref:typename:const category	file:
all_of	std-headers/algorithm	/^bool all_of(InputIt first, InputIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:bool	file:
allocate	std-headers/memory	/^    pointer allocate(size_type n, std::allocator<void>::const_pointer hint = 0);$/;"	p	struct:std::allocator	typeref:typename:pointer	file:
allocate	std-headers/memory	/^    static pointer allocate(Alloc& a, size_type n);$/;"	p	struct:std::allocator_traits	typeref:typename:pointer	file:
allocate	std-headers/memory	/^    static pointer allocate(Alloc& a, size_type n, const_void_pointer hint);$/;"	p	struct:std::allocator_traits	typeref:typename:pointer	file:
allocate	std-headers/scoped_allocator	/^    pointer allocate(size_type n);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:pointer	file:
allocate	std-headers/scoped_allocator	/^    pointer allocate(size_type n, const_void_pointer hint);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:pointer	file:
allocate_shared	std-headers/memory	/^shared_ptr<T> allocate_shared(const Alloc& alloc, Args... args);$/;"	p	namespace:std	typeref:typename:shared_ptr<T>	file:
allocator	std-headers/memory	/^    allocator();$/;"	p	struct:std::allocator	file:
allocator	std-headers/memory	/^    allocator(const allocator& other);$/;"	p	struct:std::allocator	file:
allocator	std-headers/memory	/^    allocator(const allocator<U>& other);$/;"	p	struct:std::allocator	file:
allocator	std-headers/memory	/^struct allocator {$/;"	s	namespace:std	file:
allocator_arg	std-headers/memory	/^constexpr std::allocator_arg_t allocator_arg;$/;"	v	namespace:std	typeref:typename:std::allocator_arg_t
allocator_arg_t	std-headers/memory	/^struct allocator_arg_t {};$/;"	s	namespace:std	file:
allocator_traits	std-headers/memory	/^struct allocator_traits {$/;"	s	namespace:std	file:
allocator_type	std-headers/deque	/^    typedef Allocator allocator_type;$/;"	t	class:std::deque	typeref:typename:Allocator	file:
allocator_type	std-headers/forward_list	/^    typedef Allocator allocator_type;$/;"	t	class:std::forward_list	typeref:typename:Allocator	file:
allocator_type	std-headers/list	/^    typedef Allocator allocator_type;$/;"	t	class:std::list	typeref:typename:Allocator	file:
allocator_type	std-headers/map	/^    typedef Allocator allocator_type;$/;"	t	class:std::map	typeref:typename:Allocator	file:
allocator_type	std-headers/map	/^    typedef Allocator allocator_type;$/;"	t	class:std::multimap	typeref:typename:Allocator	file:
allocator_type	std-headers/memory	/^    typedef Alloc allocator_type;$/;"	t	struct:std::allocator_traits	typeref:typename:Alloc	file:
allocator_type	std-headers/regex	/^    typedef Allocator allocator_type;$/;"	t	class:std::match_results	typeref:typename:Allocator	file:
allocator_type	std-headers/set	/^    typedef Allocator allocator_type;$/;"	t	class:std::multiset	typeref:typename:Allocator	file:
allocator_type	std-headers/set	/^    typedef Allocator allocator_type;$/;"	t	class:std::set	typeref:typename:Allocator	file:
allocator_type	std-headers/sstream	/^    typedef Allocator allocator_type;$/;"	t	class:std::basic_istringstream	typeref:typename:Allocator	file:
allocator_type	std-headers/sstream	/^    typedef Allocator allocator_type;$/;"	t	class:std::basic_ostringstream	typeref:typename:Allocator	file:
allocator_type	std-headers/sstream	/^    typedef Allocator allocator_type;$/;"	t	class:std::basic_stringbuf	typeref:typename:Allocator	file:
allocator_type	std-headers/sstream	/^    typedef Allocator allocator_type;$/;"	t	class:std::basic_stringstream	typeref:typename:Allocator	file:
allocator_type	std-headers/string	/^    typedef Allocator allocator_type;$/;"	t	class:std::basic_string	typeref:typename:Allocator	file:
allocator_type	std-headers/unordered_map	/^    typedef Allocator allocator_type;$/;"	t	class:std::unordered_map	typeref:typename:Allocator	file:
allocator_type	std-headers/unordered_map	/^    typedef Allocator allocator_type;$/;"	t	class:std::unordered_multimap	typeref:typename:Allocator	file:
allocator_type	std-headers/unordered_set	/^    typedef Allocator allocator_type;$/;"	t	class:std::unordered_multiset	typeref:typename:Allocator	file:
allocator_type	std-headers/unordered_set	/^    typedef Allocator allocator_type;$/;"	t	class:std::unordered_set	typeref:typename:Allocator	file:
allocator_type	std-headers/vector	/^    typedef Allocator allocator_type;$/;"	t	class:std::vector	typeref:typename:Allocator	file:
alnum	std-headers/locale	/^    static const mask alnum;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
alpha	std-headers/locale	/^    static const mask alpha;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
alpha	std-headers/random	/^    result_type alpha() const;$/;"	p	class:std::gamma_distribution	typeref:typename:result_type	file:
already_connected	std-headers/system_error	/^    already_connected,                  \/\/  EISCONN$/;"	e	enum:std::errc	file:
always_noconv	std-headers/locale	/^    bool always_noconv() const;$/;"	p	class:std::codecvt	typeref:typename:bool	file:
any	std-headers/bitset	/^    bool any() const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
any_of	std-headers/algorithm	/^bool any_of(InputIt first, InputIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:bool	file:
app	std-headers/ios	/^    static constexpr openmode app;$/;"	m	class:std::ios_base	typeref:typename:openmode	file:
append	std-headers/string	/^    basic_string& append(InputIt first, InputIt last);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
append	std-headers/string	/^    basic_string& append(const CharT* s);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
append	std-headers/string	/^    basic_string& append(const CharT* s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
append	std-headers/string	/^    basic_string& append(const basic_string& str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
append	std-headers/string	/^    basic_string& append(const basic_string& str,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
append	std-headers/string	/^    basic_string& append(size_type count, CharT ch);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
append	std-headers/string	/^    basic_string& append(std::initializer_list<CharT> ilist);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
apply	std-headers/valarray	/^    valarray<T> apply(T func(T)) const;$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
apply	std-headers/valarray	/^    valarray<T> apply(T func(const T&)) const;$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
are	std-headers/README.md	/^   values are 1998, 2003, 2011, 2014, 2017 which correspond to the respective$/;"	t	file:
arg	std-headers/complex	/^T arg(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:T	file:
argument_list_too_long	std-headers/system_error	/^    argument_list_too_long,             \/\/  E2BIG$/;"	e	enum:std::errc	file:
argument_out_of_domain	std-headers/system_error	/^    argument_out_of_domain,             \/\/  EDOM$/;"	e	enum:std::errc	file:
argument_type	std-headers/functional	/^    typedef Key argument_type;$/;"	t	struct:std::hash	typeref:typename:Key	file:
argument_type	std-headers/functional	/^    typedef T argument_type;$/;"	t	struct:std::bit_not	typeref:typename:T	file:
argument_type	std-headers/functional	/^    typedef T argument_type;$/;"	t	struct:std::logical_not	typeref:typename:T	file:
argument_type	std-headers/functional	/^    typedef T argument_type;$/;"	t	struct:std::negate	typeref:typename:T	file:
argument_type	std-headers/functional	/^    typedef typename Predicate::argument_type argument_type;$/;"	t	struct:std::unary_negate	typeref:typename:Predicate::argument_type	file:
argument_type	std-headers/functional	/^    typedef void argument_type;$/;"	t	class:std::reference_wrapper	typeref:typename:void	file:
array	std-headers/array	/^class array {$/;"	c	namespace:std	file:
asctime	std-headers/ctime	/^char* asctime(const std::tm* time_ptr);$/;"	p	namespace:std	typeref:typename:char *	file:
asin	std-headers/cmath	/^double      asin(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
asin	std-headers/cmath	/^float       asin(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
asin	std-headers/cmath	/^long double asin(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
asin	std-headers/complex	/^complex<T> asin(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
asin	std-headers/valarray	/^valarray<T> asin(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
asinh	std-headers/cmath	/^double      asinh(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
asinh	std-headers/cmath	/^float       asinh(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
asinh	std-headers/cmath	/^long double asinh(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
asinh	std-headers/complex	/^complex<T> asinh(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
assert	std-headers/cassert	/^#define assert(/;"	d	file:
assign	std-headers/array	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::array	typeref:typename:void	file:
assign	std-headers/array	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::array	typeref:typename:void	file:
assign	std-headers/array	/^    void assign(std::initializer_list<T> ilist);$/;"	p	class:std::array	typeref:typename:void	file:
assign	std-headers/deque	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::deque	typeref:typename:void	file:
assign	std-headers/deque	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::deque	typeref:typename:void	file:
assign	std-headers/deque	/^    void assign(std::initializer_list<T> ilist);$/;"	p	class:std::deque	typeref:typename:void	file:
assign	std-headers/forward_list	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::forward_list	typeref:typename:void	file:
assign	std-headers/forward_list	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::forward_list	typeref:typename:void	file:
assign	std-headers/forward_list	/^    void assign(std::initializer_list<T> ilist);$/;"	p	class:std::forward_list	typeref:typename:void	file:
assign	std-headers/functional	/^    void assign(F&& f, const Alloc& alloc);$/;"	p	class:std::function	typeref:typename:void	file:
assign	std-headers/list	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::list	typeref:typename:void	file:
assign	std-headers/list	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::list	typeref:typename:void	file:
assign	std-headers/list	/^    void assign(std::initializer_list<T> ilist);$/;"	p	class:std::list	typeref:typename:void	file:
assign	std-headers/map	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::map	typeref:typename:void	file:
assign	std-headers/map	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::multimap	typeref:typename:void	file:
assign	std-headers/map	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::map	typeref:typename:void	file:
assign	std-headers/map	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::multimap	typeref:typename:void	file:
assign	std-headers/map	/^    void assign(std::initializer_list<value_type> ilist);$/;"	p	class:std::map	typeref:typename:void	file:
assign	std-headers/map	/^    void assign(std::initializer_list<value_type> ilist);$/;"	p	class:std::multimap	typeref:typename:void	file:
assign	std-headers/regex	/^    basic_regex& assign(InputIt first, InputIt last,$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/regex	/^    basic_regex& assign(basic_regex&& that);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/regex	/^    basic_regex& assign(const CharT* s,$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/regex	/^    basic_regex& assign(const basic_regex& other);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/regex	/^    basic_regex& assign(const charT* ptr, size_t count,$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/regex	/^    basic_regex& assign(const std::basic_string<CharT, ST, SA>& str,$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/regex	/^    basic_regex& assign(std::initializer_list<CharT> ilist,$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
assign	std-headers/string	/^    basic_string& assign(InputIt first, InputIt last);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(basic_string&& str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(const CharT* s);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(const CharT* s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(const basic_string& str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(const basic_string& str,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(size_type count, const CharT& ch);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    basic_string& assign(std::initializer_list<CharT> ilist);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
assign	std-headers/string	/^    static char_type* assign(char_type* p, size_t count, char_type a);$/;"	p	class:std::char_traits	typeref:typename:char_type *	file:
assign	std-headers/string	/^    static void assign(char_type& r, const char_type& a);$/;"	p	class:std::char_traits	typeref:typename:void	file:
assign	std-headers/system_error	/^    void assign(int ec, const error_category& ecat);$/;"	p	class:std::error_code	typeref:typename:void	file:
assign	std-headers/system_error	/^    void assign(int val, const error_category& cat);$/;"	p	class:std::error_condition	typeref:typename:void	file:
assign	std-headers/vector	/^    void assign(InputIt first, InputIt last);$/;"	p	class:std::vector	typeref:typename:void	file:
assign	std-headers/vector	/^    void assign(size_type count, const value_type& value);$/;"	p	class:std::vector	typeref:typename:void	file:
assign	std-headers/vector	/^    void assign(std::initializer_list<T> ilist);$/;"	p	class:std::vector	typeref:typename:void	file:
async	std-headers/future	/^    async,$/;"	e	enum:std::launch	file:
async	std-headers/future	/^async(Function&& f, Args&& ... args);$/;"	p	namespace:std	typeref:typename:std::future<typename std::result_of<Function (Args...)>::type>	file:
async	std-headers/future	/^async(std::launch policy, Function&& f, Args&& ... args);$/;"	p	namespace:std	typeref:typename:std::future<typename std::result_of<Function (Args...)>::type>	file:
at	std-headers/array	/^    const_reference at(size_type n) const;$/;"	p	class:std::array	typeref:typename:const_reference	file:
at	std-headers/array	/^    reference       at(size_type n);$/;"	p	class:std::array	typeref:typename:reference	file:
at	std-headers/deque	/^    const_reference at(size_type n) const;$/;"	p	class:std::deque	typeref:typename:const_reference	file:
at	std-headers/deque	/^    reference       at(size_type n);$/;"	p	class:std::deque	typeref:typename:reference	file:
at	std-headers/map	/^    T& at(const Key& key);$/;"	p	class:std::map	typeref:typename:T &	file:
at	std-headers/map	/^    const T& at(const Key& key) const;$/;"	p	class:std::map	typeref:typename:const T &	file:
at	std-headers/string	/^    const_reference at(size_type n) const;$/;"	p	class:std::basic_string	typeref:typename:const_reference	file:
at	std-headers/string	/^    reference       at(size_type n);$/;"	p	class:std::basic_string	typeref:typename:reference	file:
at	std-headers/unordered_map	/^    T& at(const Key& key);$/;"	p	class:std::unordered_map	typeref:typename:T &	file:
at	std-headers/unordered_map	/^    const T& at(const Key& key) const;$/;"	p	class:std::unordered_map	typeref:typename:const T &	file:
at	std-headers/vector	/^    const_reference at(size_type n) const;$/;"	p	class:std::vector	typeref:typename:const_reference	file:
at	std-headers/vector	/^    reference       at(size_type n);$/;"	p	class:std::vector	typeref:typename:reference	file:
at_quick_exit	std-headers/cstdlib	/^int at_quick_exit(void (*func)());$/;"	p	namespace:std	typeref:typename:int	file:
atan	std-headers/cmath	/^double      atan(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
atan	std-headers/cmath	/^float       atan(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
atan	std-headers/cmath	/^long double atan(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
atan	std-headers/complex	/^complex<T> atan(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
atan	std-headers/valarray	/^valarray<T> atan(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
atan2	std-headers/cmath	/^double      atan2(double y, double x);$/;"	p	namespace:std	typeref:typename:double	file:
atan2	std-headers/cmath	/^float       atan2(float y, float x);$/;"	p	namespace:std	typeref:typename:float	file:
atan2	std-headers/cmath	/^long double atan2(long double y, long double x);$/;"	p	namespace:std	typeref:typename:long double	file:
atan2	std-headers/valarray	/^valarray<T> atan2(const T& vy, const valarray<T>& x);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
atan2	std-headers/valarray	/^valarray<T> atan2(const valarray<T>& y, const T& vx);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
atan2	std-headers/valarray	/^valarray<T> atan2(const valarray<T>& y, const valarray<T>& x);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
atanh	std-headers/cmath	/^double      atanh(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
atanh	std-headers/cmath	/^float       atanh(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
atanh	std-headers/cmath	/^long double atanh(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
atanh	std-headers/complex	/^complex<T> atanh(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
ate	std-headers/ios	/^    static constexpr openmode ate;$/;"	m	class:std::ios_base	typeref:typename:openmode	file:
atexit	std-headers/cstdlib	/^int atexit(void (*func)());$/;"	p	namespace:std	typeref:typename:int	file:
atof	std-headers/cstdlib	/^double atof(const char* nptr);$/;"	p	namespace:std	typeref:typename:double	file:
atoi	std-headers/cstdlib	/^int atoi(const char* nptr);$/;"	p	namespace:std	typeref:typename:int	file:
atol	std-headers/cstdlib	/^long atol(const char* nptr);$/;"	p	namespace:std	typeref:typename:long	file:
atoll	std-headers/cstdlib	/^long long atoll(const char* nptr);$/;"	p	namespace:std	typeref:typename:long long	file:
atomic	std-headers/atomic	/^    atomic() = default;$/;"	p	struct:std::atomic	file:
atomic	std-headers/atomic	/^    atomic(const atomic&) = delete;$/;"	p	struct:std::atomic	file:
atomic	std-headers/atomic	/^    constexpr atomic(T desired);$/;"	p	struct:std::atomic	file:
atomic	std-headers/atomic	/^struct atomic {$/;"	s	namespace:std	file:
atomic_bool	std-headers/atomic	/^typedef atomic<bool>               atomic_bool;$/;"	t	namespace:std	typeref:typename:atomic<bool>	file:
atomic_char	std-headers/atomic	/^typedef atomic<char>               atomic_char;$/;"	t	namespace:std	typeref:typename:atomic<char>	file:
atomic_char16_t	std-headers/atomic	/^typedef atomic<char16_t>           atomic_char16_t;$/;"	t	namespace:std	typeref:typename:atomic<char16_t>	file:
atomic_char32_t	std-headers/atomic	/^typedef atomic<char32_t>           atomic_char32_t;$/;"	t	namespace:std	typeref:typename:atomic<char32_t>	file:
atomic_compare_exchange_strong	std-headers/atomic	/^bool atomic_compare_exchange_strong(std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_strong	std-headers/atomic	/^bool atomic_compare_exchange_strong(volatile std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_strong_explicit	std-headers/atomic	/^bool atomic_compare_exchange_strong_explicit(std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_strong_explicit	std-headers/atomic	/^bool atomic_compare_exchange_strong_explicit(volatile std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_weak	std-headers/atomic	/^bool atomic_compare_exchange_weak(std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_weak	std-headers/atomic	/^bool atomic_compare_exchange_weak(volatile std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_weak_explicit	std-headers/atomic	/^bool atomic_compare_exchange_weak_explicit(std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_compare_exchange_weak_explicit	std-headers/atomic	/^bool atomic_compare_exchange_weak_explicit(volatile std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_exchange	std-headers/atomic	/^T atomic_exchange(std::atomic<T>* obj, T desr);$/;"	p	namespace:std	typeref:typename:T	file:
atomic_exchange	std-headers/atomic	/^T atomic_exchange(volatile std::atomic<T>* obj, T desr);$/;"	p	namespace:std	typeref:typename:T	file:
atomic_exchange_explicit	std-headers/atomic	/^T atomic_exchange_explicit(std::atomic<T>* obj, T desr,$/;"	p	namespace:std	typeref:typename:T	file:
atomic_exchange_explicit	std-headers/atomic	/^T atomic_exchange_explicit(volatile std::atomic<T>* obj, T desr,$/;"	p	namespace:std	typeref:typename:T	file:
atomic_fetch_add	std-headers/atomic	/^Integral atomic_fetch_add(std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_add	std-headers/atomic	/^Integral atomic_fetch_add(volatile std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_add	std-headers/atomic	/^T* atomic_fetch_add(std::atomic<T*>* obj, std::ptrdiff_t arg);$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_add	std-headers/atomic	/^T* atomic_fetch_add(volatile std::atomic<T*>* obj, std::ptrdiff_t arg);$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_add_explicit	std-headers/atomic	/^Integral atomic_fetch_add_explicit(std::atomic<Integral>* obj, Integral arg,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_add_explicit	std-headers/atomic	/^Integral atomic_fetch_add_explicit(volatile std::atomic<Integral>* obj, Integral arg,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_add_explicit	std-headers/atomic	/^T* atomic_fetch_add_explicit(std::atomic<T*>* obj, std::ptrdiff_t arg,$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_add_explicit	std-headers/atomic	/^T* atomic_fetch_add_explicit(volatile std::atomic<T*>* obj, std::ptrdiff_t arg,$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_and	std-headers/atomic	/^Integral atomic_fetch_and(std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_and	std-headers/atomic	/^Integral atomic_fetch_and(volatile std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_and_explicit	std-headers/atomic	/^Integral atomic_fetch_and_explicit(std::atomic<Integral>* obj,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_and_explicit	std-headers/atomic	/^Integral atomic_fetch_and_explicit(volatile std::atomic<Integral>* obj,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_or	std-headers/atomic	/^Integral atomic_fetch_or(std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_or	std-headers/atomic	/^Integral atomic_fetch_or(volatile std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_or_explicit	std-headers/atomic	/^Integral atomic_fetch_or_explicit(std::atomic<Integral>* obj,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_or_explicit	std-headers/atomic	/^Integral atomic_fetch_or_explicit(volatile std::atomic<Integral>* obj,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_sub	std-headers/atomic	/^Integral atomic_fetch_sub(std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_sub	std-headers/atomic	/^Integral atomic_fetch_sub(volatile std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_sub	std-headers/atomic	/^T* atomic_fetch_sub(std::atomic<T*>* obj, std::ptrdiff_t arg);$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_sub	std-headers/atomic	/^T* atomic_fetch_sub(volatile std::atomic<T*>* obj, std::ptrdiff_t arg);$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_sub_explicit	std-headers/atomic	/^Integral atomic_fetch_sub_explicit(std::atomic<Integral>* obj, Integral arg,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_sub_explicit	std-headers/atomic	/^Integral atomic_fetch_sub_explicit(volatile std::atomic<Integral>* obj, Integral arg,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_sub_explicit	std-headers/atomic	/^T* atomic_fetch_sub_explicit(std::atomic<T*>* obj, std::ptrdiff_t arg,$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_sub_explicit	std-headers/atomic	/^T* atomic_fetch_sub_explicit(volatile std::atomic<T*>* obj, std::ptrdiff_t arg,$/;"	p	namespace:std	typeref:typename:T *	file:
atomic_fetch_xor	std-headers/atomic	/^Integral atomic_fetch_xor(std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_xor	std-headers/atomic	/^Integral atomic_fetch_xor(volatile std::atomic<Integral>* obj, Integral arg);$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_xor_explicit	std-headers/atomic	/^Integral atomic_fetch_xor_explicit(std::atomic<Integral>* obj,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_fetch_xor_explicit	std-headers/atomic	/^Integral atomic_fetch_xor_explicit(volatile std::atomic<Integral>* obj,$/;"	p	namespace:std	typeref:typename:Integral	file:
atomic_flag	std-headers/atomic	/^    atomic_flag();$/;"	p	class:std::atomic_flag	file:
atomic_flag	std-headers/atomic	/^    atomic_flag(const atomic_flag&) = delete;$/;"	p	class:std::atomic_flag	file:
atomic_flag	std-headers/atomic	/^class atomic_flag {$/;"	c	namespace:std	file:
atomic_flag_clear	std-headers/atomic	/^void atomic_flag_clear(std::atomic_flag* p);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_flag_clear	std-headers/atomic	/^void atomic_flag_clear(volatile std::atomic_flag* p);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_flag_clear_explicit	std-headers/atomic	/^void atomic_flag_clear_explicit(std::atomic_flag* p,$/;"	p	namespace:std	typeref:typename:void	file:
atomic_flag_clear_explicit	std-headers/atomic	/^void atomic_flag_clear_explicit(volatile std::atomic_flag* p,$/;"	p	namespace:std	typeref:typename:void	file:
atomic_flag_test_and_set	std-headers/atomic	/^bool atomic_flag_test_and_set(std::atomic_flag* p);$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_flag_test_and_set	std-headers/atomic	/^bool atomic_flag_test_and_set(volatile std::atomic_flag* p);$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_flag_test_and_set_explicit	std-headers/atomic	/^bool atomic_flag_test_and_set_explicit(std::atomic_flag* p,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_flag_test_and_set_explicit	std-headers/atomic	/^bool atomic_flag_test_and_set_explicit(volatile std::atomic_flag* p,$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_init	std-headers/atomic	/^void atomic_init(std::atomic<T>* obj, T desired);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_init	std-headers/atomic	/^void atomic_init(volatile std::atomic<T>* obj, T desired);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_int	std-headers/atomic	/^typedef atomic<int>                atomic_int;$/;"	t	namespace:std	typeref:typename:atomic<int>	file:
atomic_int_fast16_t	std-headers/atomic	/^typedef atomic<int_fast16_t>  atomic_int_fast16_t;$/;"	t	namespace:std	typeref:typename:atomic<int_fast16_t>	file:
atomic_int_fast32_t	std-headers/atomic	/^typedef atomic<int_fast32_t>  atomic_int_fast32_t;$/;"	t	namespace:std	typeref:typename:atomic<int_fast32_t>	file:
atomic_int_fast64_t	std-headers/atomic	/^typedef atomic<int_fast64_t>  atomic_int_fast64_t;$/;"	t	namespace:std	typeref:typename:atomic<int_fast64_t>	file:
atomic_int_fast8_t	std-headers/atomic	/^typedef atomic<int_fast8_t>   atomic_int_fast8_t;$/;"	t	namespace:std	typeref:typename:atomic<int_fast8_t>	file:
atomic_int_least16_t	std-headers/atomic	/^typedef atomic<int_least16_t>  atomic_int_least16_t;$/;"	t	namespace:std	typeref:typename:atomic<int_least16_t>	file:
atomic_int_least32_t	std-headers/atomic	/^typedef atomic<int_least32_t>  atomic_int_least32_t;$/;"	t	namespace:std	typeref:typename:atomic<int_least32_t>	file:
atomic_int_least64_t	std-headers/atomic	/^typedef atomic<int_least64_t>  atomic_int_least64_t;$/;"	t	namespace:std	typeref:typename:atomic<int_least64_t>	file:
atomic_int_least8_t	std-headers/atomic	/^typedef atomic<int_least8_t>   atomic_int_least8_t;$/;"	t	namespace:std	typeref:typename:atomic<int_least8_t>	file:
atomic_intmax_t	std-headers/atomic	/^typedef atomic<intmax_t>  atomic_intmax_t;$/;"	t	namespace:std	typeref:typename:atomic<intmax_t>	file:
atomic_intptr_t	std-headers/atomic	/^typedef atomic<intptr_t>  atomic_intptr_t;$/;"	t	namespace:std	typeref:typename:atomic<intptr_t>	file:
atomic_is_lock_free	std-headers/atomic	/^bool atomic_is_lock_free(const std::atomic<T>* obj);$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_is_lock_free	std-headers/atomic	/^bool atomic_is_lock_free(const volatile std::atomic<T>* obj);$/;"	p	namespace:std	typeref:typename:bool	file:
atomic_llong	std-headers/atomic	/^typedef atomic<long long>          atomic_llong;$/;"	t	namespace:std	typeref:typename:atomic<long long>	file:
atomic_load	std-headers/atomic	/^T atomic_load(const std::atomic<T>* obj);$/;"	p	namespace:std	typeref:typename:T	file:
atomic_load	std-headers/atomic	/^T atomic_load(const volatile std::atomic<T>* obj);$/;"	p	namespace:std	typeref:typename:T	file:
atomic_load_explicit	std-headers/atomic	/^T atomic_load_explicit(const std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:T	file:
atomic_load_explicit	std-headers/atomic	/^T atomic_load_explicit(const volatile std::atomic<T>* obj,$/;"	p	namespace:std	typeref:typename:T	file:
atomic_long	std-headers/atomic	/^typedef atomic<long>               atomic_long;$/;"	t	namespace:std	typeref:typename:atomic<long>	file:
atomic_ptrdiff_t	std-headers/atomic	/^typedef atomic<ptrdiff_t> atomic_ptrdiff_t;$/;"	t	namespace:std	typeref:typename:atomic<ptrdiff_t>	file:
atomic_schar	std-headers/atomic	/^typedef atomic<signed char>        atomic_schar;$/;"	t	namespace:std	typeref:typename:atomic<signed char>	file:
atomic_short	std-headers/atomic	/^typedef atomic<short>              atomic_short;$/;"	t	namespace:std	typeref:typename:atomic<short>	file:
atomic_signal_fence	std-headers/atomic	/^void atomic_signal_fence(std::memory_order order);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_size_t	std-headers/atomic	/^typedef atomic<size_t>    atomic_size_t;$/;"	t	namespace:std	typeref:typename:atomic<size_t>	file:
atomic_store	std-headers/atomic	/^void atomic_store(std::atomic<T>* obj, T desr);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_store	std-headers/atomic	/^void atomic_store(volatile std::atomic<T>* obj, T desr);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_store_explicit	std-headers/atomic	/^void atomic_store_explicit(std::atomic<T>* obj, T desr,$/;"	p	namespace:std	typeref:typename:void	file:
atomic_store_explicit	std-headers/atomic	/^void atomic_store_explicit(volatile std::atomic<T>* obj, T desr,$/;"	p	namespace:std	typeref:typename:void	file:
atomic_thread_fence	std-headers/atomic	/^void atomic_thread_fence(std::memory_order order);$/;"	p	namespace:std	typeref:typename:void	file:
atomic_uchar	std-headers/atomic	/^typedef atomic<unsigned char>      atomic_uchar;$/;"	t	namespace:std	typeref:typename:atomic<unsigned char>	file:
atomic_uint	std-headers/atomic	/^typedef atomic<unsigned int>       atomic_uint;$/;"	t	namespace:std	typeref:typename:atomic<unsigned int>	file:
atomic_uint_fast16_t	std-headers/atomic	/^typedef atomic<uint_fast16_t> atomic_uint_fast16_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_fast16_t>	file:
atomic_uint_fast32_t	std-headers/atomic	/^typedef atomic<uint_fast32_t> atomic_uint_fast32_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_fast32_t>	file:
atomic_uint_fast64_t	std-headers/atomic	/^typedef atomic<uint_fast64_t> atomic_uint_fast64_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_fast64_t>	file:
atomic_uint_fast8_t	std-headers/atomic	/^typedef atomic<uint_fast8_t>  atomic_uint_fast8_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_fast8_t>	file:
atomic_uint_least16_t	std-headers/atomic	/^typedef atomic<uint_least16_t> atomic_uint_least16_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_least16_t>	file:
atomic_uint_least32_t	std-headers/atomic	/^typedef atomic<uint_least32_t> atomic_uint_least32_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_least32_t>	file:
atomic_uint_least64_t	std-headers/atomic	/^typedef atomic<uint_least64_t> atomic_uint_least64_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_least64_t>	file:
atomic_uint_least8_t	std-headers/atomic	/^typedef atomic<uint_least8_t>  atomic_uint_least8_t;$/;"	t	namespace:std	typeref:typename:atomic<uint_least8_t>	file:
atomic_uintmax_t	std-headers/atomic	/^typedef atomic<uintmax_t> atomic_uintmax_t;$/;"	t	namespace:std	typeref:typename:atomic<uintmax_t>	file:
atomic_uintptr_t	std-headers/atomic	/^typedef atomic<uintptr_t> atomic_uintptr_t;$/;"	t	namespace:std	typeref:typename:atomic<uintptr_t>	file:
atomic_ullong	std-headers/atomic	/^typedef atomic<unsigned long long> atomic_ullong;$/;"	t	namespace:std	typeref:typename:atomic<unsigned long long>	file:
atomic_ulong	std-headers/atomic	/^typedef atomic<unsigned long>      atomic_ulong;$/;"	t	namespace:std	typeref:typename:atomic<unsigned long>	file:
atomic_ushort	std-headers/atomic	/^typedef atomic<unsigned short>     atomic_ushort;$/;"	t	namespace:std	typeref:typename:atomic<unsigned short>	file:
atomic_wchar_t	std-headers/atomic	/^typedef atomic<wchar_t>            atomic_wchar_t;$/;"	t	namespace:std	typeref:typename:atomic<wchar_t>	file:
atto	std-headers/ratio	/^typedef ratio<1,       1000000000000000000> atto;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000000000000000>	file:
auto_ptr	std-headers/memory	/^    auto_ptr(auto_ptr& r);$/;"	p	class:std::auto_ptr	file:
auto_ptr	std-headers/memory	/^    auto_ptr(auto_ptr<Y>& r);$/;"	p	class:std::auto_ptr	file:
auto_ptr	std-headers/memory	/^    auto_ptr(auto_ptr_ref<Y> m);$/;"	p	class:std::auto_ptr	file:
auto_ptr	std-headers/memory	/^    explicit auto_ptr(X* p = 0);$/;"	p	class:std::auto_ptr	file:
auto_ptr	std-headers/memory	/^class auto_ptr {$/;"	c	namespace:std	file:
awk	std-headers/regex	/^constexpr syntax_option_type awk;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
b	std-headers/random	/^    result_type b() const;$/;"	p	class:std::cauchy_distribution	typeref:typename:result_type	file:
b	std-headers/random	/^    result_type b() const;$/;"	p	class:std::extreme_value_distribution	typeref:typename:result_type	file:
b	std-headers/random	/^    result_type b() const;$/;"	p	class:std::uniform_int_distribution	typeref:typename:result_type	file:
b	std-headers/random	/^    result_type b() const;$/;"	p	class:std::uniform_real_distribution	typeref:typename:result_type	file:
b	std-headers/random	/^    result_type b() const;$/;"	p	class:std::weibull_distribution	typeref:typename:result_type	file:
back	std-headers/array	/^    const_reference back() const;$/;"	p	class:std::array	typeref:typename:const_reference	file:
back	std-headers/array	/^    reference       back();$/;"	p	class:std::array	typeref:typename:reference	file:
back	std-headers/deque	/^    const_reference back() const;$/;"	p	class:std::deque	typeref:typename:const_reference	file:
back	std-headers/deque	/^    reference       back();$/;"	p	class:std::deque	typeref:typename:reference	file:
back	std-headers/list	/^    const_reference back() const;$/;"	p	class:std::list	typeref:typename:const_reference	file:
back	std-headers/list	/^    reference       back();$/;"	p	class:std::list	typeref:typename:reference	file:
back	std-headers/queue	/^    const_reference back() const;$/;"	p	class:std::queue	typeref:typename:const_reference	file:
back	std-headers/queue	/^    reference back();$/;"	p	class:std::queue	typeref:typename:reference	file:
back	std-headers/string	/^    CharT& back();$/;"	p	class:std::basic_string	typeref:typename:CharT &	file:
back	std-headers/string	/^    const CharT& back() const;$/;"	p	class:std::basic_string	typeref:typename:const CharT &	file:
back	std-headers/vector	/^    const_reference back() const;$/;"	p	class:std::vector	typeref:typename:const_reference	file:
back	std-headers/vector	/^    reference       back();$/;"	p	class:std::vector	typeref:typename:reference	file:
back_insert_iterator	std-headers/iterator	/^    explicit back_insert_iterator(Container& c);$/;"	p	class:std::back_insert_iterator	file:
back_insert_iterator	std-headers/iterator	/^class back_insert_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
back_inserter	std-headers/iterator	/^std::back_insert_iterator<Container> back_inserter(Container& c);$/;"	p	namespace:std	typeref:typename:std::back_insert_iterator<Container>	file:
bad	std-headers/ios	/^    bool bad() const;$/;"	p	class:std::basic_ios	typeref:typename:bool	file:
bad_address	std-headers/system_error	/^    bad_address,                        \/\/  EFAULT$/;"	e	enum:std::errc	file:
bad_alloc	std-headers/new	/^    bad_alloc();$/;"	p	class:std::bad_alloc	file:
bad_alloc	std-headers/new	/^class bad_alloc : public std::exception {$/;"	c	namespace:std	file:
bad_array_new_length	std-headers/new	/^    bad_array_new_length();$/;"	p	class:std::bad_array_new_length	file:
bad_array_new_length	std-headers/new	/^class bad_array_new_length : public bad_alloc {$/;"	c	namespace:std	file:
bad_cast	std-headers/typeinfo	/^    bad_cast();$/;"	p	class:std::bad_cast	file:
bad_cast	std-headers/typeinfo	/^class bad_cast : public exception {$/;"	c	namespace:std	file:
bad_exception	std-headers/exception	/^    bad_exception();$/;"	p	class:std::bad_exception	file:
bad_exception	std-headers/exception	/^    bad_exception(const bad_exception& other);$/;"	p	class:std::bad_exception	file:
bad_exception	std-headers/exception	/^class bad_exception : public exception {$/;"	c	namespace:std	file:
bad_file_descriptor	std-headers/system_error	/^    bad_file_descriptor,                \/\/  EBADF$/;"	e	enum:std::errc	file:
bad_function_call	std-headers/functional	/^    bad_function_call();$/;"	p	class:std::bad_function_call	file:
bad_function_call	std-headers/functional	/^class bad_function_call : public std::exception {$/;"	c	namespace:std	file:
bad_message	std-headers/system_error	/^    bad_message,                        \/\/  EBADMSG$/;"	e	enum:std::errc	file:
bad_typeid	std-headers/typeinfo	/^    bad_typeid();$/;"	p	class:std::bad_typeid	file:
bad_typeid	std-headers/typeinfo	/^class bad_typeid : public exception {$/;"	c	namespace:std	file:
bad_weak_ptr	std-headers/memory	/^    bad_weak_ptr();$/;"	p	class:std::bad_weak_ptr	file:
bad_weak_ptr	std-headers/memory	/^class bad_weak_ptr : public exception {$/;"	c	namespace:std	file:
badbit	std-headers/ios	/^    static constexpr iostate badbit;$/;"	m	class:std::ios_base	typeref:typename:iostate	file:
base	std-headers/iterator	/^    Iterator base() const;$/;"	p	class:std::move_iterator	typeref:typename:Iterator	file:
base	std-headers/iterator	/^    Iterator base() const;$/;"	p	class:std::reverse_iterator	typeref:typename:Iterator	file:
base	std-headers/memory	/^    OutputIt base() const;$/;"	p	class:std::raw_storage_iterator	typeref:typename:OutputIt	file:
base	std-headers/random	/^    const Engine& base() const;$/;"	p	class:std::discard_block_engine	typeref:typename:const Engine &	file:
base	std-headers/random	/^    const Engine& base() const;$/;"	p	class:std::independent_bits_engine	typeref:typename:const Engine &	file:
base	std-headers/random	/^    const Engine& base() const;$/;"	p	class:std::shuffle_order_engine	typeref:typename:const Engine &	file:
basefield	std-headers/ios	/^    static constexpr fmtflags basefield;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
basic	std-headers/regex	/^constexpr syntax_option_type basic;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
basic_filebuf	std-headers/fstream	/^    > class basic_filebuf : public std::basic_streambuf<CharT, Traits> {$/;"	c	namespace:std	file:
basic_filebuf	std-headers/fstream	/^    basic_filebuf();$/;"	p	class:std::basic_filebuf	file:
basic_filebuf	std-headers/fstream	/^    basic_filebuf(const std::basic_filebuf& rhs) = delete;$/;"	p	class:std::basic_filebuf	file:
basic_filebuf	std-headers/fstream	/^    basic_filebuf(std::basic_filebuf&& rhs);$/;"	p	class:std::basic_filebuf	file:
basic_fstream	std-headers/fstream	/^    > class basic_fstream : public std::basic_iostream<CharT, Traits> {$/;"	c	namespace:std	file:
basic_fstream	std-headers/fstream	/^    basic_fstream();$/;"	p	class:std::basic_fstream	file:
basic_fstream	std-headers/fstream	/^    basic_fstream(basic_fstream&& other);$/;"	p	class:std::basic_fstream	file:
basic_fstream	std-headers/fstream	/^    basic_fstream(const basic_fstream& rhs) = delete;$/;"	p	class:std::basic_fstream	file:
basic_fstream	std-headers/fstream	/^    explicit basic_fstream(const char* filename,$/;"	p	class:std::basic_fstream	file:
basic_fstream	std-headers/fstream	/^    explicit basic_fstream(const string& filename,$/;"	p	class:std::basic_fstream	file:
basic_ifstream	std-headers/fstream	/^    > class basic_ifstream : public std::basic_istream<CharT, Traits> {$/;"	c	namespace:std	file:
basic_ifstream	std-headers/fstream	/^    basic_ifstream();$/;"	p	class:std::basic_ifstream	file:
basic_ifstream	std-headers/fstream	/^    basic_ifstream(basic_ifstream&& other);$/;"	p	class:std::basic_ifstream	file:
basic_ifstream	std-headers/fstream	/^    basic_ifstream(const basic_ifstream& rhs) = delete;$/;"	p	class:std::basic_ifstream	file:
basic_ifstream	std-headers/fstream	/^    explicit basic_ifstream(const char* filename,$/;"	p	class:std::basic_ifstream	file:
basic_ifstream	std-headers/fstream	/^    explicit basic_ifstream(const string& filename,$/;"	p	class:std::basic_ifstream	file:
basic_ios	std-headers/ios	/^    basic_ios();$/;"	p	class:std::basic_ios	file:
basic_ios	std-headers/ios	/^    basic_ios(const basic_ios& other);$/;"	p	class:std::basic_ios	file:
basic_ios	std-headers/ios	/^    explicit basic_ios(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_ios	file:
basic_ios	std-headers/ios	/^class basic_ios : public ios_base {$/;"	c	namespace:std	file:
basic_iostream	std-headers/istream	/^    > class basic_iostream : public std::basic_istream<CharT, Traits>,$/;"	c	namespace:std	file:
basic_iostream	std-headers/istream	/^    basic_iostream(basic_iostream&& other);$/;"	p	class:std::basic_iostream	file:
basic_iostream	std-headers/istream	/^    basic_iostream(const basic_iostream& other) = delete;$/;"	p	class:std::basic_iostream	file:
basic_iostream	std-headers/istream	/^    explicit basic_iostream(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_iostream	file:
basic_istream	std-headers/istream	/^    > class basic_istream : virtual public std::basic_ios<CharT, Traits> {$/;"	c	namespace:std	file:
basic_istream	std-headers/istream	/^    basic_istream(basic_istream&& rhs);$/;"	p	class:std::basic_istream	file:
basic_istream	std-headers/istream	/^    basic_istream(const basic_istream& rhs) = delete;$/;"	p	class:std::basic_istream	file:
basic_istream	std-headers/istream	/^    explicit basic_istream(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_istream	file:
basic_istringstream	std-headers/sstream	/^    > class basic_istringstream : public std::basic_ostream<CharT, Traits> {$/;"	c	namespace:std	file:
basic_istringstream	std-headers/sstream	/^    basic_istringstream(basic_istringstream&& other);$/;"	p	class:std::basic_istringstream	file:
basic_istringstream	std-headers/sstream	/^    explicit basic_istringstream(const std::basic_string<CharT, Traits, Allocator>& str,$/;"	p	class:std::basic_istringstream	file:
basic_istringstream	std-headers/sstream	/^    explicit basic_istringstream(ios_base::openmode mode = ios_base::in);$/;"	p	class:std::basic_istringstream	file:
basic_ofstream	std-headers/fstream	/^    > class basic_ofstream : public std::basic_ostream<CharT, Traits> {$/;"	c	namespace:std	file:
basic_ofstream	std-headers/fstream	/^    basic_ofstream();$/;"	p	class:std::basic_ofstream	file:
basic_ofstream	std-headers/fstream	/^    basic_ofstream(basic_ofstream&& other);$/;"	p	class:std::basic_ofstream	file:
basic_ofstream	std-headers/fstream	/^    basic_ofstream(const basic_ofstream& rhs) = delete;$/;"	p	class:std::basic_ofstream	file:
basic_ofstream	std-headers/fstream	/^    explicit basic_ofstream(const char* filename,$/;"	p	class:std::basic_ofstream	file:
basic_ofstream	std-headers/fstream	/^    explicit basic_ofstream(const string& filename,$/;"	p	class:std::basic_ofstream	file:
basic_ostream	std-headers/ostream	/^    > class basic_ostream : virtual public std::basic_ios<CharT, Traits> {$/;"	c	namespace:std	file:
basic_ostream	std-headers/ostream	/^    basic_ostream(basic_ostream&& rhs);$/;"	p	class:std::basic_ostream	file:
basic_ostream	std-headers/ostream	/^    basic_ostream(const basic_ostream& rhs) = delete;$/;"	p	class:std::basic_ostream	file:
basic_ostream	std-headers/ostream	/^    explicit basic_ostream(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_ostream	file:
basic_ostringstream	std-headers/sstream	/^    > class basic_ostringstream : public std::basic_ostream<CharT, Traits> {$/;"	c	namespace:std	file:
basic_ostringstream	std-headers/sstream	/^    basic_ostringstream(basic_ostringstream&& other);$/;"	p	class:std::basic_ostringstream	file:
basic_ostringstream	std-headers/sstream	/^    explicit basic_ostringstream(const std::basic_string<CharT, Traits, Allocator>& str,$/;"	p	class:std::basic_ostringstream	file:
basic_ostringstream	std-headers/sstream	/^    explicit basic_ostringstream(ios_base::openmode mode = ios_base::out);$/;"	p	class:std::basic_ostringstream	file:
basic_regex	std-headers/regex	/^    > class basic_regex {$/;"	c	namespace:std	file:
basic_regex	std-headers/regex	/^    basic_regex();$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    basic_regex(ForwardIt first, ForwardIt last,$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    basic_regex(basic_regex&& other);$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    basic_regex(const CharT* s, std::size_t count,$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    basic_regex(const basic_regex& other);$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    basic_regex(std::initializer_list<CharT> init,$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    explicit basic_regex(const CharT* s,$/;"	p	class:std::basic_regex	file:
basic_regex	std-headers/regex	/^    explicit basic_regex(const std::basic_string<CharT, ST, SA>& str,$/;"	p	class:std::basic_regex	file:
basic_streambuf	std-headers/streambuf	/^    basic_streambuf();$/;"	p	class:std::basic_streambuf	file:
basic_streambuf	std-headers/streambuf	/^    basic_streambuf(const basic_streambuf& rhs);$/;"	p	class:std::basic_streambuf	file:
basic_streambuf	std-headers/streambuf	/^class basic_streambuf {$/;"	c	namespace:std	file:
basic_string	std-headers/string	/^    > class basic_string {$/;"	c	namespace:std	file:
basic_string	std-headers/string	/^    basic_string();$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(InputIt first, InputIt last,$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(basic_string&& other);$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(basic_string&& other, const Allocator& alloc);$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(const CharT* s,$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(const basic_string& other);$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(const basic_string& other, const Allocator& alloc);$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(const basic_string& other,$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(size_type count,$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    basic_string(std::initializer_list<CharT> init,$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    explicit basic_string(const Allocator& alloc = Allocator());$/;"	p	class:std::basic_string	file:
basic_string	std-headers/string	/^    explicit basic_string(const Allocator& alloc);$/;"	p	class:std::basic_string	file:
basic_stringbuf	std-headers/sstream	/^    > class basic_stringbuf : public std::basic_streambuf<CharT, Traits> {$/;"	c	namespace:std	file:
basic_stringbuf	std-headers/sstream	/^    basic_stringbuf(basic_stringbuf&& rhs);$/;"	p	class:std::basic_stringbuf	file:
basic_stringbuf	std-headers/sstream	/^    basic_stringbuf(const basic_stringbuf& rhs) = delete;$/;"	p	class:std::basic_stringbuf	file:
basic_stringbuf	std-headers/sstream	/^    explicit basic_stringbuf(const std::basic_string<CharT, traits, Allocator>& new_str,$/;"	p	class:std::basic_stringbuf	file:
basic_stringbuf	std-headers/sstream	/^    explicit basic_stringbuf(std::ios_base::openmode which = std::ios_base::in$/;"	p	class:std::basic_stringbuf	file:
basic_stringstream	std-headers/sstream	/^    > class basic_stringstream : public std::basic_iostream<CharT, Traits> {$/;"	c	namespace:std	file:
basic_stringstream	std-headers/sstream	/^    basic_stringstream(basic_stringstream&& other);$/;"	p	class:std::basic_stringstream	file:
basic_stringstream	std-headers/sstream	/^    explicit basic_stringstream(const std::basic_string<CharT, Traits, Allocator>& str,$/;"	p	class:std::basic_stringstream	file:
basic_stringstream	std-headers/sstream	/^    explicit basic_stringstream(ios_base::openmode mode = ios_base::in | ios_base::out);$/;"	p	class:std::basic_stringstream	file:
before	std-headers/typeinfo	/^    bool before(const type_info& rhs) const;$/;"	p	class:std::type_info	typeref:typename:bool	file:
before_begin	std-headers/forward_list	/^    const_iterator before_begin() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
before_begin	std-headers/forward_list	/^    iterator before_begin();$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
beg	std-headers/ios	/^    static constexpr seekdir beg;$/;"	m	class:std::ios_base	typeref:typename:seekdir	file:
begin	std-headers/array	/^    const_iterator begin() const;$/;"	p	class:std::array	typeref:typename:const_iterator	file:
begin	std-headers/array	/^    iterator begin();$/;"	p	class:std::array	typeref:typename:iterator	file:
begin	std-headers/deque	/^    const_iterator begin() const;$/;"	p	class:std::deque	typeref:typename:const_iterator	file:
begin	std-headers/deque	/^    iterator begin();$/;"	p	class:std::deque	typeref:typename:iterator	file:
begin	std-headers/forward_list	/^    const_iterator begin() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
begin	std-headers/forward_list	/^    iterator begin();$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
begin	std-headers/initializer_list	/^    const T* begin() const;$/;"	p	class:std::initializer_list	typeref:typename:const T *	file:
begin	std-headers/initializer_list	/^template<class T> const T* begin(initializer_list<T> il);$/;"	p	namespace:std	typeref:typename:const T *	file:
begin	std-headers/iterator	/^T* begin(T(&array)[N]);$/;"	p	namespace:std	typeref:typename:T *	file:
begin	std-headers/iterator	/^auto begin(C& c) -> decltype(c.begin());$/;"	p	namespace:std	typeref:typename:decltype (c.begin ())	file:
begin	std-headers/iterator	/^auto begin(const C& c) -> decltype(c.begin());$/;"	p	namespace:std	typeref:typename:decltype (c.begin ())	file:
begin	std-headers/list	/^    const_iterator begin() const;$/;"	p	class:std::list	typeref:typename:const_iterator	file:
begin	std-headers/list	/^    iterator begin();$/;"	p	class:std::list	typeref:typename:iterator	file:
begin	std-headers/map	/^    const_iterator begin() const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
begin	std-headers/map	/^    const_iterator begin() const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
begin	std-headers/map	/^    iterator begin();$/;"	p	class:std::map	typeref:typename:iterator	file:
begin	std-headers/map	/^    iterator begin();$/;"	p	class:std::multimap	typeref:typename:iterator	file:
begin	std-headers/regex	/^    const_iterator begin() const;$/;"	p	class:std::match_results	typeref:typename:const_iterator	file:
begin	std-headers/regex	/^    iterator begin();$/;"	p	class:std::match_results	typeref:typename:iterator	file:
begin	std-headers/set	/^    const_iterator begin() const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
begin	std-headers/set	/^    const_iterator begin() const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
begin	std-headers/set	/^    iterator begin();$/;"	p	class:std::multiset	typeref:typename:iterator	file:
begin	std-headers/set	/^    iterator begin();$/;"	p	class:std::set	typeref:typename:iterator	file:
begin	std-headers/string	/^    const_iterator begin() const;$/;"	p	class:std::basic_string	typeref:typename:const_iterator	file:
begin	std-headers/string	/^    iterator begin();$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
begin	std-headers/unordered_map	/^    const_iterator begin() const;$/;"	p	class:std::unordered_map	typeref:typename:const_iterator	file:
begin	std-headers/unordered_map	/^    const_iterator begin() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_iterator	file:
begin	std-headers/unordered_map	/^    const_local_iterator begin(size_type n) const;$/;"	p	class:std::unordered_map	typeref:typename:const_local_iterator	file:
begin	std-headers/unordered_map	/^    const_local_iterator begin(size_type n) const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_local_iterator	file:
begin	std-headers/unordered_map	/^    iterator begin();$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
begin	std-headers/unordered_map	/^    iterator begin();$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
begin	std-headers/unordered_map	/^    local_iterator begin(size_type n);$/;"	p	class:std::unordered_map	typeref:typename:local_iterator	file:
begin	std-headers/unordered_map	/^    local_iterator begin(size_type n);$/;"	p	class:std::unordered_multimap	typeref:typename:local_iterator	file:
begin	std-headers/unordered_set	/^    const_iterator begin() const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_iterator	file:
begin	std-headers/unordered_set	/^    const_iterator begin() const;$/;"	p	class:std::unordered_set	typeref:typename:const_iterator	file:
begin	std-headers/unordered_set	/^    const_local_iterator begin(size_type n) const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_local_iterator	file:
begin	std-headers/unordered_set	/^    const_local_iterator begin(size_type n) const;$/;"	p	class:std::unordered_set	typeref:typename:const_local_iterator	file:
begin	std-headers/unordered_set	/^    iterator begin();$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
begin	std-headers/unordered_set	/^    iterator begin();$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
begin	std-headers/unordered_set	/^    local_iterator begin(size_type n);$/;"	p	class:std::unordered_multiset	typeref:typename:local_iterator	file:
begin	std-headers/unordered_set	/^    local_iterator begin(size_type n);$/;"	p	class:std::unordered_set	typeref:typename:local_iterator	file:
begin	std-headers/valarray	/^__unspecified begin(const valarray<T>& v);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
begin	std-headers/valarray	/^__unspecified begin(valarray<T>& v);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
begin	std-headers/vector	/^    const_iterator begin() const;$/;"	p	class:std::vector	typeref:typename:const_iterator	file:
begin	std-headers/vector	/^    iterator begin();$/;"	p	class:std::vector	typeref:typename:iterator	file:
bernoulli_distribution	std-headers/random	/^    explicit bernoulli_distribution(const param_type& params);$/;"	p	class:std::bernoulli_distribution	file:
bernoulli_distribution	std-headers/random	/^    explicit bernoulli_distribution(double p = 0.5);$/;"	p	class:std::bernoulli_distribution	file:
bernoulli_distribution	std-headers/random	/^class bernoulli_distribution {$/;"	c	namespace:std	file:
beta	std-headers/random	/^    result_type beta() const;$/;"	p	class:std::gamma_distribution	typeref:typename:result_type	file:
bidirectional_iterator_tag	std-headers/iterator	/^struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	file:
binary	std-headers/ios	/^    static constexpr openmode binary;$/;"	m	class:std::ios_base	typeref:typename:openmode	file:
binary_negate	std-headers/functional	/^    explicit binary_negate(const Predicate& pred);$/;"	p	struct:std::binary_negate	file:
binary_negate	std-headers/functional	/^struct binary_negate {$/;"	s	namespace:std	file:
binary_search	std-headers/algorithm	/^bool binary_search(ForwardIt first, ForwardIt last, const T& value);$/;"	p	namespace:std	typeref:typename:bool	file:
binary_search	std-headers/algorithm	/^bool binary_search(ForwardIt first, ForwardIt last, const T& value, Compare comp);$/;"	p	namespace:std	typeref:typename:bool	file:
bind	std-headers/functional	/^std::function<R> bind(F&& f, Args&& ... args);$/;"	p	namespace:std	typeref:typename:std::function<R>	file:
binomial_distribution	std-headers/random	/^    explicit binomial_distribution(IntType t = 1, double p = 0.5);$/;"	p	class:std::binomial_distribution	file:
binomial_distribution	std-headers/random	/^    explicit binomial_distribution(const param_type& params);$/;"	p	class:std::binomial_distribution	file:
binomial_distribution	std-headers/random	/^class binomial_distribution {$/;"	c	namespace:std	file:
bit_and	std-headers/functional	/^struct bit_and {$/;"	s	namespace:std	file:
bit_not	std-headers/functional	/^struct bit_not {$/;"	s	namespace:std	file:
bit_or	std-headers/functional	/^struct bit_or {$/;"	s	namespace:std	file:
bit_xor	std-headers/functional	/^struct bit_xor {$/;"	s	namespace:std	file:
bitset	std-headers/bitset	/^    bitset();$/;"	p	class:std::bitset	file:
bitset	std-headers/bitset	/^    bitset(unsigned long val);$/;"	p	class:std::bitset	file:
bitset	std-headers/bitset	/^    constexpr bitset();$/;"	p	class:std::bitset	file:
bitset	std-headers/bitset	/^    constexpr bitset(unsigned long long val);$/;"	p	class:std::bitset	file:
bitset	std-headers/bitset	/^    explicit bitset(const CharT* str,$/;"	p	class:std::bitset	file:
bitset	std-headers/bitset	/^class bitset {$/;"	c	namespace:std	file:
blank	std-headers/locale	/^    static const mask blank;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
block_size	std-headers/random	/^    static constexpr size_t block_size;$/;"	m	class:std::discard_block_engine	typeref:typename:size_t	file:
boolalpha	std-headers/ios	/^    static constexpr fmtflags boolalpha;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
boolalpha	std-headers/ios	/^ios_base& boolalpha(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
broken_pipe	std-headers/system_error	/^    broken_pipe,                        \/\/  EPIPE$/;"	e	enum:std::errc	file:
broken_promise	std-headers/future	/^    broken_promise,$/;"	e	enum:std::future_errc	file:
bsearch	std-headers/cstdlib	/^void* bsearch(const void* key, const void* ptr, std::size_t count,$/;"	p	namespace:std	typeref:typename:void *	file:
btowc	std-headers/cwchar	/^std::wint_t btowc(int c);$/;"	p	namespace:std	typeref:typename:std::wint_t	file:
bucket	std-headers/unordered_map	/^    size_type bucket(const Key& key) const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
bucket	std-headers/unordered_map	/^    size_type bucket(const Key& key) const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
bucket	std-headers/unordered_set	/^    size_type bucket(const Key& key) const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
bucket	std-headers/unordered_set	/^    size_type bucket(const Key& key) const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
bucket_count	std-headers/unordered_map	/^    size_type bucket_count() const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
bucket_count	std-headers/unordered_map	/^    size_type bucket_count() const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
bucket_count	std-headers/unordered_set	/^    size_type bucket_count() const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
bucket_count	std-headers/unordered_set	/^    size_type bucket_count() const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
bucket_size	std-headers/unordered_map	/^    size_type bucket_size(size_type n) const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
bucket_size	std-headers/unordered_map	/^    size_type bucket_size(size_type n) const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
bucket_size	std-headers/unordered_set	/^    size_type bucket_size(size_type n) const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
bucket_size	std-headers/unordered_set	/^    size_type bucket_size(size_type n) const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
c	std-headers/queue	/^    Container c;$/;"	m	class:std::priority_queue	typeref:typename:Container	file:
c	std-headers/queue	/^    Container c;$/;"	m	class:std::queue	typeref:typename:Container	file:
c	std-headers/stack	/^    Container c;$/;"	m	class:std::stack	typeref:typename:Container	file:
c16rtomb	std-headers/cuchar	/^std::size_t c16rtomb(char* s, char16_t c16, std::mbstate_t* ps);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
c32rtomb	std-headers/cuchar	/^std::size_t c32rtomb(char* s, char32_t c32, std::mbstate_t* ps);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
c_str	std-headers/string	/^    const CharT* c_str() const;$/;"	p	class:std::basic_string	typeref:typename:const CharT *	file:
call_once	std-headers/mutex	/^void call_once(std::once_flag& flag, Callable&& f, Args&& ... args);$/;"	p	namespace:std	typeref:typename:void	file:
calloc	std-headers/cstdlib	/^void* calloc(std::size_t num, std::size_t size);$/;"	p	namespace:std	typeref:typename:void *	file:
capacity	std-headers/deque	/^    size_type capacity() const;$/;"	p	class:std::deque	typeref:typename:size_type	file:
capacity	std-headers/string	/^    size_type capacity() const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
capacity	std-headers/vector	/^    size_type capacity() const;$/;"	p	class:std::vector	typeref:typename:size_type	file:
catalog	std-headers/locale	/^    typedef int catalog; \/\/ actually unspecified$/;"	t	class:std::messages_base	typeref:typename:int	file:
category	std-headers/locale	/^    typedef int category;$/;"	t	class:std::locale	typeref:typename:int	file:
category	std-headers/system_error	/^    const error_category& category() const;$/;"	p	class:std::error_condition	typeref:typename:const error_category &	file:
category	std-headers/system_error	/^    const std::error_category& category() const;$/;"	p	class:std::error_code	typeref:typename:const std::error_category &	file:
cauchy_distribution	std-headers/random	/^    explicit cauchy_distribution(RealType a = 0.0, RealType b = 1.0);$/;"	p	class:std::cauchy_distribution	file:
cauchy_distribution	std-headers/random	/^    explicit cauchy_distribution(const param_type& params);$/;"	p	class:std::cauchy_distribution	file:
cauchy_distribution	std-headers/random	/^class cauchy_distribution {$/;"	c	namespace:std	file:
cbefore_begin	std-headers/forward_list	/^    const_iterator         cbefore_begin() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
cbefore_end	std-headers/forward_list	/^    const_iterator         cbefore_end() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
cbegin	std-headers/array	/^    const_iterator         cbegin() const;$/;"	p	class:std::array	typeref:typename:const_iterator	file:
cbegin	std-headers/deque	/^    const_iterator         cbegin() const;$/;"	p	class:std::deque	typeref:typename:const_iterator	file:
cbegin	std-headers/forward_list	/^    const_iterator         cbegin() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
cbegin	std-headers/iterator	/^constexpr auto cbegin(const C& c) -> decltype(std::begin(c));$/;"	p	namespace:std	typeref:typename:decltype (std::begin (c))	file:
cbegin	std-headers/list	/^    const_iterator         cbegin() const;$/;"	p	class:std::list	typeref:typename:const_iterator	file:
cbegin	std-headers/map	/^    const_iterator         cbegin() const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
cbegin	std-headers/map	/^    const_iterator         cbegin() const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
cbegin	std-headers/regex	/^    const_iterator cbegin() const;$/;"	p	class:std::match_results	typeref:typename:const_iterator	file:
cbegin	std-headers/set	/^    const_iterator         cbegin() const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
cbegin	std-headers/set	/^    const_iterator         cbegin() const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
cbegin	std-headers/string	/^    const_iterator         cbegin() const;$/;"	p	class:std::basic_string	typeref:typename:const_iterator	file:
cbegin	std-headers/unordered_map	/^    const_iterator         cbegin() const;$/;"	p	class:std::unordered_map	typeref:typename:const_iterator	file:
cbegin	std-headers/unordered_map	/^    const_iterator         cbegin() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_iterator	file:
cbegin	std-headers/unordered_map	/^    const_local_iterator cbegin(size_type n) const;$/;"	p	class:std::unordered_map	typeref:typename:const_local_iterator	file:
cbegin	std-headers/unordered_map	/^    const_local_iterator cbegin(size_type n) const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_local_iterator	file:
cbegin	std-headers/unordered_set	/^    const_iterator cbegin() const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_iterator	file:
cbegin	std-headers/unordered_set	/^    const_iterator cbegin() const;$/;"	p	class:std::unordered_set	typeref:typename:const_iterator	file:
cbegin	std-headers/unordered_set	/^    const_local_iterator cbegin(size_type n) const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_local_iterator	file:
cbegin	std-headers/unordered_set	/^    const_local_iterator cbegin(size_type n) const;$/;"	p	class:std::unordered_set	typeref:typename:const_local_iterator	file:
cbegin	std-headers/vector	/^    const_iterator         cbegin() const;$/;"	p	class:std::vector	typeref:typename:const_iterator	file:
cbrt	std-headers/cmath	/^double      cbrt(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
cbrt	std-headers/cmath	/^float       cbrt(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
cbrt	std-headers/cmath	/^long double cbrt(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
ceil	std-headers/cmath	/^double      ceil(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
ceil	std-headers/cmath	/^float       ceil(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
ceil	std-headers/cmath	/^long double ceil(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
cend	std-headers/array	/^    const_iterator         cend() const;$/;"	p	class:std::array	typeref:typename:const_iterator	file:
cend	std-headers/deque	/^    const_iterator         cend() const;$/;"	p	class:std::deque	typeref:typename:const_iterator	file:
cend	std-headers/forward_list	/^    const_iterator         cend() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
cend	std-headers/iterator	/^constexpr auto cend(const C& c) -> decltype(std::end(c));$/;"	p	namespace:std	typeref:typename:decltype (std::end (c))	file:
cend	std-headers/list	/^    const_iterator         cend() const;$/;"	p	class:std::list	typeref:typename:const_iterator	file:
cend	std-headers/map	/^    const_iterator         cend() const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
cend	std-headers/map	/^    const_iterator         cend() const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
cend	std-headers/regex	/^    const_iterator cend() const;$/;"	p	class:std::match_results	typeref:typename:const_iterator	file:
cend	std-headers/set	/^    const_iterator         cend() const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
cend	std-headers/set	/^    const_iterator         cend() const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
cend	std-headers/string	/^    const_iterator         cend() const;$/;"	p	class:std::basic_string	typeref:typename:const_iterator	file:
cend	std-headers/unordered_map	/^    const_iterator         cend() const;$/;"	p	class:std::unordered_map	typeref:typename:const_iterator	file:
cend	std-headers/unordered_map	/^    const_iterator         cend() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_iterator	file:
cend	std-headers/unordered_map	/^    const_local_iterator cend(size_type n) const;$/;"	p	class:std::unordered_map	typeref:typename:const_local_iterator	file:
cend	std-headers/unordered_map	/^    const_local_iterator cend(size_type n) const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_local_iterator	file:
cend	std-headers/unordered_set	/^    const_iterator cend() const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_iterator	file:
cend	std-headers/unordered_set	/^    const_iterator cend() const;$/;"	p	class:std::unordered_set	typeref:typename:const_iterator	file:
cend	std-headers/unordered_set	/^    const_local_iterator cend(size_type n) const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_local_iterator	file:
cend	std-headers/unordered_set	/^    const_local_iterator cend(size_type n) const;$/;"	p	class:std::unordered_set	typeref:typename:const_local_iterator	file:
cend	std-headers/vector	/^    const_iterator         cend() const;$/;"	p	class:std::vector	typeref:typename:const_iterator	file:
centi	std-headers/ratio	/^typedef ratio<1,                       100> centi;$/;"	t	namespace:std	typeref:typename:ratio<1,100>	file:
cerr	std-headers/iostream	/^extern ostream cerr;$/;"	x	namespace:std	typeref:typename:ostream
cerr	std-headers/ostream	/^extern ostream cerr;$/;"	x	namespace:std	typeref:typename:ostream
char_class_type	std-headers/regex	/^    typedef int char_class_type; \/\/ unspecified bitmask type$/;"	t	class:std::regex_traits	typeref:typename:int	file:
char_traits	std-headers/string	/^class char_traits {$/;"	c	namespace:std	file:
char_type	std-headers/ios	/^    typedef CharT char_type;$/;"	t	class:std::basic_ios	typeref:typename:CharT	file:
char_type	std-headers/iterator	/^    typedef CharT char_type;$/;"	t	class:std::istream_iterator	typeref:typename:CharT	file:
char_type	std-headers/iterator	/^    typedef CharT char_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:CharT	file:
char_type	std-headers/iterator	/^    typedef CharT char_type;$/;"	t	class:std::ostream_iterator	typeref:typename:CharT	file:
char_type	std-headers/iterator	/^    typedef CharT char_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::collate	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::ctype	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::messages	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::money_get	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::money_put	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::moneypunct	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::num_get	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::num_put	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::numpunct	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::time_get	typeref:typename:CharT	file:
char_type	std-headers/locale	/^    typedef CharT char_type;$/;"	t	class:std::time_put	typeref:typename:CharT	file:
char_type	std-headers/regex	/^    typedef CharT char_type;$/;"	t	class:std::regex_traits	typeref:typename:CharT	file:
char_type	std-headers/regex	/^    typedef typename std::iterator_traits<BidirIt>::value_type char_type;$/;"	t	class:std::match_results	typeref:typename:std::iterator_traits<BidirIt>::value_type	file:
char_type	std-headers/streambuf	/^    typedef CharT char_type;$/;"	t	class:std::basic_streambuf	typeref:typename:CharT	file:
char_type	std-headers/string	/^    typedef CharT     char_type;$/;"	t	class:std::char_traits	typeref:typename:CharT	file:
chi_squared_distribution	std-headers/random	/^    explicit chi_squared_distribution(RealType n = 1.0);$/;"	p	class:std::chi_squared_distribution	file:
chi_squared_distribution	std-headers/random	/^    explicit chi_squared_distribution(const param_type& params);$/;"	p	class:std::chi_squared_distribution	file:
chi_squared_distribution	std-headers/random	/^class chi_squared_distribution {$/;"	c	namespace:std	file:
chrono	std-headers/chrono	/^namespace chrono {$/;"	n	namespace:std	file:
cin	std-headers/iostream	/^extern istream cin;$/;"	x	namespace:std	typeref:typename:istream
cin	std-headers/istream	/^extern istream cin;$/;"	x	namespace:std	typeref:typename:istream
classic	std-headers/locale	/^    static const locale& classic();$/;"	p	class:std::locale	typeref:typename:const locale &	file:
classic_table	std-headers/locale	/^    static const mask* classic_table(); \/\/ only in char specialization$/;"	p	class:std::ctype	typeref:typename:const mask *	file:
clear	std-headers/atomic	/^    void clear(std::memory_order order = std::memory_order_seq_cst) volatile;$/;"	p	class:std::atomic_flag	typeref:typename:void	file:
clear	std-headers/atomic	/^    void clear(std::memory_order order = std::memory_order_seq_cst);$/;"	p	class:std::atomic_flag	typeref:typename:void	file:
clear	std-headers/deque	/^    void clear();$/;"	p	class:std::deque	typeref:typename:void	file:
clear	std-headers/forward_list	/^    void clear();$/;"	p	class:std::forward_list	typeref:typename:void	file:
clear	std-headers/ios	/^    void clear(iostate state = goodbit);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
clear	std-headers/list	/^    void clear();$/;"	p	class:std::list	typeref:typename:void	file:
clear	std-headers/map	/^    void clear();$/;"	p	class:std::map	typeref:typename:void	file:
clear	std-headers/map	/^    void clear();$/;"	p	class:std::multimap	typeref:typename:void	file:
clear	std-headers/set	/^    void clear();$/;"	p	class:std::multiset	typeref:typename:void	file:
clear	std-headers/set	/^    void clear();$/;"	p	class:std::set	typeref:typename:void	file:
clear	std-headers/string	/^    void clear();$/;"	p	class:std::basic_string	typeref:typename:void	file:
clear	std-headers/system_error	/^    void clear();$/;"	p	class:std::error_code	typeref:typename:void	file:
clear	std-headers/system_error	/^    void clear();$/;"	p	class:std::error_condition	typeref:typename:void	file:
clear	std-headers/unordered_map	/^    void clear();$/;"	p	class:std::unordered_map	typeref:typename:void	file:
clear	std-headers/unordered_map	/^    void clear();$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
clear	std-headers/unordered_set	/^    void clear();$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
clear	std-headers/unordered_set	/^    void clear();$/;"	p	class:std::unordered_set	typeref:typename:void	file:
clear	std-headers/vector	/^    void clear();$/;"	p	class:std::vector	typeref:typename:void	file:
clearerr	std-headers/cstdio	/^void clearerr(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:void	file:
clock	std-headers/chrono	/^    typedef system_clock clock;$/;"	t	class:std::chrono::time_point	typeref:typename:system_clock	file:
clock	std-headers/ctime	/^std::clock_t clock();$/;"	p	namespace:std	typeref:typename:std::clock_t	file:
clock_t	std-headers/ctime	/^typedef int clock_t; \/\/ actually unspecified$/;"	t	namespace:std	typeref:typename:int	file:
clog	std-headers/iostream	/^extern ostream clog;$/;"	x	namespace:std	typeref:typename:ostream
clog	std-headers/ostream	/^extern ostream clog;$/;"	x	namespace:std	typeref:typename:ostream
close	std-headers/fstream	/^    basic_filebuf* close();$/;"	p	class:std::basic_filebuf	typeref:typename:basic_filebuf *	file:
close	std-headers/fstream	/^    void close();$/;"	p	class:std::basic_fstream	typeref:typename:void	file:
close	std-headers/fstream	/^    void close();$/;"	p	class:std::basic_ifstream	typeref:typename:void	file:
close	std-headers/fstream	/^    void close();$/;"	p	class:std::basic_ofstream	typeref:typename:void	file:
close	std-headers/locale	/^    void close(catalog c) const;$/;"	p	class:std::messages	typeref:typename:void	file:
cmatch	std-headers/regex	/^typedef match_results<const char*> cmatch;$/;"	t	namespace:std	typeref:typename:match_results<const char * >	file:
cntrl	std-headers/locale	/^    static const mask cntrl;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
code	std-headers/future	/^    const std::error_code& code() const;$/;"	p	class:std::future_error	typeref:typename:const std::error_code &	file:
code	std-headers/regex	/^    std::regex_constants::error_type code() const;$/;"	p	class:std::regex_error	typeref:typename:std::regex_constants::error_type	file:
code	std-headers/system_error	/^    const std::error_code& code() const;$/;"	p	class:std::system_error	typeref:typename:const std::error_code &	file:
codecvt	std-headers/locale	/^    explicit codecvt(std::size_t refs = 0);$/;"	p	class:std::codecvt	file:
codecvt	std-headers/locale	/^class codecvt : public codecvt_base, public locale::facet {$/;"	c	namespace:std	file:
codecvt_base	std-headers/locale	/^class codecvt_base {$/;"	c	namespace:std	file:
codecvt_byname	std-headers/locale	/^    explicit codecvt_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::codecvt_byname	file:
codecvt_byname	std-headers/locale	/^    explicit codecvt_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::codecvt_byname	file:
codecvt_byname	std-headers/locale	/^class codecvt_byname : public codecvt<InternT, ExternT, State> {$/;"	c	namespace:std	file:
codecvt_mode	std-headers/codecvt	/^enum codecvt_mode {$/;"	g	namespace:std	file:
codecvt_utf16	std-headers/codecvt	/^    explicit codecvt_utf16(std::size_t refs = 0);$/;"	p	class:std::codecvt_utf16	file:
codecvt_utf16	std-headers/codecvt	/^class codecvt_utf16 : public std::codecvt<Elem, char, std::mbstate_t> {$/;"	c	namespace:std	file:
codecvt_utf8	std-headers/codecvt	/^    > class codecvt_utf8 : public std::codecvt<Elem, char, std::mbstate_t> {$/;"	c	namespace:std	file:
codecvt_utf8	std-headers/codecvt	/^    explicit codecvt_utf8(std::size_t refs = 0);$/;"	p	class:std::codecvt_utf8	file:
codecvt_utf8_utf16	std-headers/codecvt	/^    explicit codecvt_utf8_utf16(std::size_t refs = 0);$/;"	p	class:std::codecvt_utf8_utf16	file:
codecvt_utf8_utf16	std-headers/codecvt	/^class codecvt_utf8_utf16 : public std::codecvt<Elem, char, std::mbstate_t> {$/;"	c	namespace:std	file:
collate	std-headers/locale	/^    explicit collate(std::size_t refs = 0);$/;"	p	class:std::collate	file:
collate	std-headers/locale	/^    static const category collate;$/;"	m	class:std::locale	typeref:typename:const category	file:
collate	std-headers/locale	/^class collate : public locale::facet {$/;"	c	namespace:std	file:
collate	std-headers/regex	/^constexpr syntax_option_type collate;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
collate_byname	std-headers/locale	/^    explicit collate_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::collate_byname	file:
collate_byname	std-headers/locale	/^    explicit collate_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::collate_byname	file:
collate_byname	std-headers/locale	/^class collate_byname : public collate<CharT> {$/;"	c	namespace:std	file:
combine	std-headers/locale	/^    locale combine(const locale& other) const;$/;"	p	class:std::locale	typeref:typename:locale	file:
common_type	std-headers/type_traits	/^template<class... T> struct common_type {$/;"	s	namespace:std	file:
comp	std-headers/map	/^        Compare comp;$/;"	m	class:std::map::value_compare	typeref:typename:Compare	file:
comp	std-headers/map	/^        Compare comp;$/;"	m	class:std::multimap::value_compare	typeref:typename:Compare	file:
comp	std-headers/queue	/^    Compare comp;$/;"	m	class:std::priority_queue	typeref:typename:Compare	file:
compare	std-headers/locale	/^    int compare(const CharT* low1, const CharT* high1,$/;"	p	class:std::collate	typeref:typename:int	file:
compare	std-headers/regex	/^    int compare(const string_type& s) const;$/;"	p	class:std::sub_match	typeref:typename:int	file:
compare	std-headers/regex	/^    int compare(const sub_match& m) const;$/;"	p	class:std::sub_match	typeref:typename:int	file:
compare	std-headers/regex	/^    int compare(const value_type* c) const;$/;"	p	class:std::sub_match	typeref:typename:int	file:
compare	std-headers/string	/^    int compare(const CharT* s) const;$/;"	p	class:std::basic_string	typeref:typename:int	file:
compare	std-headers/string	/^    int compare(const basic_string& str) const;$/;"	p	class:std::basic_string	typeref:typename:int	file:
compare	std-headers/string	/^    int compare(size_type pos1, size_type count1,$/;"	p	class:std::basic_string	typeref:typename:int	file:
compare	std-headers/string	/^    static int compare(const char_type* s1, const char_type* s2, size_t count);$/;"	p	class:std::char_traits	typeref:typename:int	file:
compare_exchange_strong	std-headers/atomic	/^    bool compare_exchange_strong(T& expected, T desired,$/;"	p	struct:std::atomic	typeref:typename:bool	file:
compare_exchange_weak	std-headers/atomic	/^    bool compare_exchange_weak(T& expected, T desired,$/;"	p	struct:std::atomic	typeref:typename:bool	file:
complex	std-headers/complex	/^    complex(const T& re = T(), const T& im = T());$/;"	p	class:std::complex	file:
complex	std-headers/complex	/^    complex(const complex& other);$/;"	p	class:std::complex	file:
complex	std-headers/complex	/^    complex(const complex<X>& other);$/;"	p	class:std::complex	file:
complex	std-headers/complex	/^class complex {$/;"	c	namespace:std	file:
condition_variable	std-headers/condition_variable	/^    condition_variable();$/;"	p	class:std::condition_variable	file:
condition_variable	std-headers/condition_variable	/^    condition_variable(const condition_variable&) = delete;$/;"	p	class:std::condition_variable	file:
condition_variable	std-headers/condition_variable	/^class condition_variable {$/;"	c	namespace:std	file:
condition_variable_any	std-headers/condition_variable	/^    condition_variable_any();$/;"	p	class:std::condition_variable_any	file:
condition_variable_any	std-headers/condition_variable	/^    condition_variable_any(const condition_variable_any&) = delete;$/;"	p	class:std::condition_variable_any	file:
condition_variable_any	std-headers/condition_variable	/^class condition_variable_any {$/;"	c	namespace:std	file:
conditional	std-headers/type_traits	/^template<bool, class T, class F> struct conditional {$/;"	s	namespace:std	file:
conj	std-headers/complex	/^complex<T> conj(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
connection_aborted	std-headers/system_error	/^    connection_aborted,                 \/\/  ECONNABORTED$/;"	e	enum:std::errc	file:
connection_already_in_progress	std-headers/system_error	/^    connection_already_in_progress,     \/\/  EALREADY$/;"	e	enum:std::errc	file:
connection_refused	std-headers/system_error	/^    connection_refused,                 \/\/  ECONNREFUSED$/;"	e	enum:std::errc	file:
connection_reset	std-headers/system_error	/^    connection_reset,                   \/\/  ECONNRESET$/;"	e	enum:std::errc	file:
const_iterator	std-headers/array	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::array	typeref:typename:const T *	file:
const_iterator	std-headers/deque	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::deque	typeref:typename:const T *	file:
const_iterator	std-headers/forward_list	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::forward_list	typeref:typename:const T *	file:
const_iterator	std-headers/initializer_list	/^    typedef const T* const_iterator;$/;"	t	class:std::initializer_list	typeref:typename:const T *	file:
const_iterator	std-headers/list	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::list	typeref:typename:const T *	file:
const_iterator	std-headers/map	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::multimap	typeref:typename:const T *	file:
const_iterator	std-headers/map	/^    typedef const value_type* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::map	typeref:typename:const value_type *	file:
const_iterator	std-headers/regex	/^    typedef value_type* const_iterator; \/\/ actually impl-defined$/;"	t	class:std::match_results	typeref:typename:value_type *	file:
const_iterator	std-headers/set	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::multiset	typeref:typename:const T *	file:
const_iterator	std-headers/set	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::set	typeref:typename:const T *	file:
const_iterator	std-headers/string	/^    typedef const CharT* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::basic_string	typeref:typename:const CharT *	file:
const_iterator	std-headers/unordered_map	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multimap	typeref:typename:const T *	file:
const_iterator	std-headers/unordered_map	/^    typedef const value_type* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_map	typeref:typename:const value_type *	file:
const_iterator	std-headers/unordered_set	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multiset	typeref:typename:const T *	file:
const_iterator	std-headers/unordered_set	/^    typedef const value_type* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_set	typeref:typename:const value_type *	file:
const_iterator	std-headers/vector	/^    typedef const T* const_iterator; \/\/ actual type is unspecified$/;"	t	class:std::vector	typeref:typename:const T *	file:
const_local_iterator	std-headers/unordered_map	/^    typedef const T* const_local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multimap	typeref:typename:const T *	file:
const_local_iterator	std-headers/unordered_map	/^    typedef const value_type* const_local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_map	typeref:typename:const value_type *	file:
const_local_iterator	std-headers/unordered_set	/^    typedef const T* const_local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multiset	typeref:typename:const T *	file:
const_local_iterator	std-headers/unordered_set	/^    typedef const value_type* const_local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_set	typeref:typename:const value_type *	file:
const_pointer	std-headers/array	/^    typedef const T* const_pointer;$/;"	t	class:std::array	typeref:typename:const T *	file:
const_pointer	std-headers/array	/^    typedef const value_type* const_pointer;$/;"	t	class:std::array	typeref:typename:const value_type *	file:
const_pointer	std-headers/deque	/^    typedef const T* const_pointer;$/;"	t	class:std::deque	typeref:typename:const T *	file:
const_pointer	std-headers/deque	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::deque	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/deque	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::deque	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/forward_list	/^    typedef const T* const_pointer;$/;"	t	class:std::forward_list	typeref:typename:const T *	file:
const_pointer	std-headers/forward_list	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::forward_list	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/list	/^    typedef const T* const_pointer;$/;"	t	class:std::list	typeref:typename:const T *	file:
const_pointer	std-headers/list	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::list	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/list	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::list	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/map	/^    typedef const value_type* const_pointer;$/;"	t	class:std::map	typeref:typename:const value_type *	file:
const_pointer	std-headers/map	/^    typedef const value_type* const_pointer;$/;"	t	class:std::multimap	typeref:typename:const value_type *	file:
const_pointer	std-headers/map	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::map	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/map	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::multimap	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/map	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::map	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/map	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::multimap	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/memory	/^    typedef const T* const_pointer;$/;"	t	struct:std::allocator	typeref:typename:const T *	file:
const_pointer	std-headers/memory	/^    typedef const value_type* const_pointer;$/;"	t	struct:std::allocator_traits	typeref:typename:const value_type *	file:
const_pointer	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::const_pointer const_pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::const_pointer	file:
const_pointer	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::const_pointer const_pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::const_pointer	file:
const_pointer	std-headers/set	/^    typedef const value_type* const_pointer;$/;"	t	class:std::multiset	typeref:typename:const value_type *	file:
const_pointer	std-headers/set	/^    typedef const value_type* const_pointer;$/;"	t	class:std::set	typeref:typename:const value_type *	file:
const_pointer	std-headers/set	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::multiset	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/set	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::set	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/set	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::multiset	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/set	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::set	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/string	/^    typedef const CharT* const_pointer;$/;"	t	class:std::basic_string	typeref:typename:const CharT *	file:
const_pointer	std-headers/string	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::basic_string	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/string	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::basic_string	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/unordered_map	/^    typedef const value_type* const_pointer;$/;"	t	class:std::unordered_map	typeref:typename:const value_type *	file:
const_pointer	std-headers/unordered_map	/^    typedef const value_type* const_pointer;$/;"	t	class:std::unordered_multimap	typeref:typename:const value_type *	file:
const_pointer	std-headers/unordered_map	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::unordered_map	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/unordered_map	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::unordered_multimap	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/unordered_set	/^    typedef const value_type* const_pointer;$/;"	t	class:std::unordered_multiset	typeref:typename:const value_type *	file:
const_pointer	std-headers/unordered_set	/^    typedef const value_type* const_pointer;$/;"	t	class:std::unordered_set	typeref:typename:const value_type *	file:
const_pointer	std-headers/unordered_set	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::unordered_multiset	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/unordered_set	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::unordered_set	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer	std-headers/vector	/^    typedef const T* const_pointer;$/;"	t	class:std::vector	typeref:typename:const T *	file:
const_pointer	std-headers/vector	/^    typedef typename Allocator::const_pointer const_pointer;$/;"	t	class:std::vector	typeref:typename:Allocator::const_pointer	file:
const_pointer	std-headers/vector	/^    typedef typename std::allocator_traits<Allocator>::const_pointer const_pointer;$/;"	t	class:std::vector	typeref:typename:std::allocator_traits<Allocator>::const_pointer	file:
const_pointer_cast	std-headers/memory	/^std::shared_ptr<T> const_pointer_cast(const std::shared_ptr<U>& r);$/;"	p	namespace:std	typeref:typename:std::shared_ptr<T>	file:
const_reference	std-headers/array	/^    typedef const T& const_reference;$/;"	t	class:std::array	typeref:typename:const T &	file:
const_reference	std-headers/array	/^    typedef const value_type& const_reference;$/;"	t	class:std::array	typeref:typename:const value_type &	file:
const_reference	std-headers/deque	/^    typedef const T& const_reference;$/;"	t	class:std::deque	typeref:typename:const T &	file:
const_reference	std-headers/deque	/^    typedef const value_type& const_reference;$/;"	t	class:std::deque	typeref:typename:const value_type &	file:
const_reference	std-headers/deque	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::deque	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/forward_list	/^    typedef const T& const_reference;$/;"	t	class:std::forward_list	typeref:typename:const T &	file:
const_reference	std-headers/forward_list	/^    typedef const value_type& const_reference;$/;"	t	class:std::forward_list	typeref:typename:const value_type &	file:
const_reference	std-headers/initializer_list	/^    typedef const T& const_reference;$/;"	t	class:std::initializer_list	typeref:typename:const T &	file:
const_reference	std-headers/list	/^    typedef const T& const_reference;$/;"	t	class:std::list	typeref:typename:const T &	file:
const_reference	std-headers/list	/^    typedef const value_type& const_reference;$/;"	t	class:std::list	typeref:typename:const value_type &	file:
const_reference	std-headers/list	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::list	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/map	/^    typedef const value_type& const_reference;$/;"	t	class:std::map	typeref:typename:const value_type &	file:
const_reference	std-headers/map	/^    typedef const value_type& const_reference;$/;"	t	class:std::multimap	typeref:typename:const value_type &	file:
const_reference	std-headers/map	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::map	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/map	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::multimap	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/memory	/^    typedef const T& const_reference;$/;"	t	struct:std::allocator	typeref:typename:const T &	file:
const_reference	std-headers/queue	/^    typedef typename Container::const_reference const_reference;$/;"	t	class:std::priority_queue	typeref:typename:Container::const_reference	file:
const_reference	std-headers/queue	/^    typedef typename Container::const_reference const_reference;$/;"	t	class:std::queue	typeref:typename:Container::const_reference	file:
const_reference	std-headers/regex	/^    typedef const value_type& const_reference;$/;"	t	class:std::match_results	typeref:typename:const value_type &	file:
const_reference	std-headers/set	/^    typedef const value_type& const_reference;$/;"	t	class:std::multiset	typeref:typename:const value_type &	file:
const_reference	std-headers/set	/^    typedef const value_type& const_reference;$/;"	t	class:std::set	typeref:typename:const value_type &	file:
const_reference	std-headers/set	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::multiset	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/set	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::set	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/stack	/^    typedef typename Container::const_reference const_reference;$/;"	t	class:std::stack	typeref:typename:Container::const_reference	file:
const_reference	std-headers/string	/^    typedef const CharT& const_reference;$/;"	t	class:std::basic_string	typeref:typename:const CharT &	file:
const_reference	std-headers/string	/^    typedef const value_type& const_reference;$/;"	t	class:std::basic_string	typeref:typename:const value_type &	file:
const_reference	std-headers/string	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::basic_string	typeref:typename:Allocator::const_reference	file:
const_reference	std-headers/unordered_map	/^    typedef const value_type& const_reference;$/;"	t	class:std::unordered_map	typeref:typename:const value_type &	file:
const_reference	std-headers/unordered_map	/^    typedef const value_type& const_reference;$/;"	t	class:std::unordered_multimap	typeref:typename:const value_type &	file:
const_reference	std-headers/unordered_set	/^    typedef const value_type& const_reference;$/;"	t	class:std::unordered_multiset	typeref:typename:const value_type &	file:
const_reference	std-headers/unordered_set	/^    typedef const value_type& const_reference;$/;"	t	class:std::unordered_set	typeref:typename:const value_type &	file:
const_reference	std-headers/vector	/^    typedef const T& const_reference;$/;"	t	class:std::vector	typeref:typename:const T &	file:
const_reference	std-headers/vector	/^    typedef const value_type& const_reference;$/;"	t	class:std::vector	typeref:typename:const value_type &	file:
const_reference	std-headers/vector	/^    typedef typename Allocator::const_reference const_reference;$/;"	t	class:std::vector	typeref:typename:Allocator::const_reference	file:
const_reverse_iterator	std-headers/array	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::array	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/deque	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::deque	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/list	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::list	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/map	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::map	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/map	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::multimap	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/set	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::multiset	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/set	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::set	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/string	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_reverse_iterator	std-headers/vector	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::vector	typeref:typename:std::reverse_iterator<const_iterator>	file:
const_void_pointer	std-headers/memory	/^    typedef const nullptr_t const_void_pointer;$/;"	t	struct:std::allocator_traits	typeref:typename:const nullptr_t	file:
const_void_pointer	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::const_void_pointer const_void_pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::const_void_pointer	file:
const_void_pointer	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::const_void_pointer const_void_pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::const_void_pointer	file:
construct	std-headers/memory	/^    static void construct(Alloc& a, T* p, Args&& ... args);$/;"	p	struct:std::allocator_traits	typeref:typename:void	file:
construct	std-headers/memory	/^    void construct(U* p, Args&& ... args);$/;"	p	struct:std::allocator	typeref:typename:void	file:
construct	std-headers/memory	/^    void construct(pointer p, const_reference val);$/;"	p	struct:std::allocator	typeref:typename:void	file:
construct	std-headers/scoped_allocator	/^    void construct(T* p, Args&& ... args);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
construct	std-headers/scoped_allocator	/^    void construct(std::pair<T1, T2>* p);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
construct	std-headers/scoped_allocator	/^    void construct(std::pair<T1, T2>* p, U&& x, V&& y);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
construct	std-headers/scoped_allocator	/^    void construct(std::pair<T1, T2>* p, const std::pair<U, V>& xy);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
construct	std-headers/scoped_allocator	/^    void construct(std::pair<T1, T2>* p, std::pair<U, V>&& xy);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
construct	std-headers/scoped_allocator	/^    void construct(std::pair<T1, T2>* p,$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
consume_header	std-headers/codecvt	/^    consume_header = 4,$/;"	e	enum:std::codecvt_mode	file:
container	std-headers/iterator	/^    Container* container;$/;"	m	class:std::back_insert_iterator	typeref:typename:Container *	file:
container	std-headers/iterator	/^    Container* container;$/;"	m	class:std::front_insert_iterator	typeref:typename:Container *	file:
container	std-headers/iterator	/^    Container* container;$/;"	m	class:std::insert_iterator	typeref:typename:Container *	file:
container_type	std-headers/iterator	/^    typedef Container container_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:Container	file:
container_type	std-headers/iterator	/^    typedef Container container_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:Container	file:
container_type	std-headers/iterator	/^    typedef Container container_type;$/;"	t	class:std::insert_iterator	typeref:typename:Container	file:
container_type	std-headers/queue	/^    typedef Container container_type;$/;"	t	class:std::priority_queue	typeref:typename:Container	file:
container_type	std-headers/queue	/^    typedef Container container_type;$/;"	t	class:std::queue	typeref:typename:Container	file:
container_type	std-headers/stack	/^    typedef Container container_type;$/;"	t	class:std::stack	typeref:typename:Container	file:
converted	std-headers/locale	/^    std::size_t converted() const;$/;"	p	class:std::wstring_convert	typeref:typename:std::size_t	file:
copy	std-headers/algorithm	/^OutputIt copy(InputIt first, InputIt last, OutputIt d_first);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
copy	std-headers/string	/^    size_type copy(CharT* dest,$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
copy	std-headers/string	/^    static char_type* copy(char_type* desc, const char_type* src, size_t count);$/;"	p	class:std::char_traits	typeref:typename:char_type *	file:
copy_backward	std-headers/algorithm	/^BidirIt2 copy_backward(BidirIt1 first, BidirIt1 last, BidirIt2 d_last);$/;"	p	namespace:std	typeref:typename:BidirIt2	file:
copy_if	std-headers/algorithm	/^OutputIt copy_if(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
copy_n	std-headers/algorithm	/^OutputIt copy_n(InputIt first, Size count, OutputIt result);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
copyfmt	std-headers/ios	/^    basic_ios& copyfmt(const basic_ios& other);$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	file:
copyfmt_event	std-headers/ios	/^        copyfmt_event$/;"	e	enum:std::ios_base::event	file:
copysign	std-headers/cmath	/^double      copysign(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
copysign	std-headers/cmath	/^float       copysign(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
copysign	std-headers/cmath	/^long double copysign(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
cos	std-headers/cmath	/^double      cos(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
cos	std-headers/cmath	/^float       cos(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
cos	std-headers/cmath	/^long double cos(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
cos	std-headers/complex	/^complex<T> cos(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
cos	std-headers/valarray	/^valarray<T> cos(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
cosh	std-headers/cmath	/^double      cosh(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
cosh	std-headers/cmath	/^float       cosh(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
cosh	std-headers/cmath	/^long double cosh(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
cosh	std-headers/complex	/^complex<T> cosh(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
count	std-headers/algorithm	/^count(InputIt first, InputIt last, const T& value);$/;"	p	namespace:std	typeref:typename:iterator_traits<InputIt>::difference_type	file:
count	std-headers/bitset	/^    size_t count() const;$/;"	p	class:std::bitset	typeref:typename:size_t	file:
count	std-headers/chrono	/^    constexpr rep count() const;$/;"	p	class:std::chrono::duration	typeref:typename:rep	file:
count	std-headers/map	/^    size_type count(const K& x) const;$/;"	p	class:std::map	typeref:typename:size_type	file:
count	std-headers/map	/^    size_type count(const K& x) const;$/;"	p	class:std::multimap	typeref:typename:size_type	file:
count	std-headers/map	/^    size_type count(const Key& key) const;$/;"	p	class:std::map	typeref:typename:size_type	file:
count	std-headers/map	/^    size_type count(const Key& key) const;$/;"	p	class:std::multimap	typeref:typename:size_type	file:
count	std-headers/set	/^    size_type count(const K& x) const;$/;"	p	class:std::multiset	typeref:typename:size_type	file:
count	std-headers/set	/^    size_type count(const K& x) const;$/;"	p	class:std::set	typeref:typename:size_type	file:
count	std-headers/set	/^    size_type count(const Key& key) const;$/;"	p	class:std::multiset	typeref:typename:size_type	file:
count	std-headers/set	/^    size_type count(const Key& key) const;$/;"	p	class:std::set	typeref:typename:size_type	file:
count	std-headers/unordered_map	/^    size_type count(const Key& key) const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
count	std-headers/unordered_map	/^    size_type count(const Key& key) const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
count	std-headers/unordered_set	/^    size_type count(const Key& key) const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
count	std-headers/unordered_set	/^    size_type count(const Key& key) const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
count_if	std-headers/algorithm	/^count_if(InputIt first, InputIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:iterator_traits<InputIt>::difference_type	file:
cout	std-headers/iostream	/^extern ostream cout;$/;"	x	namespace:std	typeref:typename:ostream
cout	std-headers/ostream	/^extern ostream cout;$/;"	x	namespace:std	typeref:typename:ostream
crbegin	std-headers/array	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::array	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/deque	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::deque	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/iterator	/^auto crbegin(const C& c) -> decltype(std::rbegin(c));$/;"	p	namespace:std	typeref:typename:decltype (std::rbegin (c))	file:
crbegin	std-headers/list	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::list	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/map	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::map	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/map	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::multimap	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/set	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::multiset	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/set	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::set	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/string	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::basic_string	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/unordered_map	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::unordered_map	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/unordered_map	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_reverse_iterator	file:
crbegin	std-headers/vector	/^    const_reverse_iterator crbegin() const;$/;"	p	class:std::vector	typeref:typename:const_reverse_iterator	file:
cref	std-headers/functional	/^std::reference_wrapper<const T> cref(const T& t);$/;"	p	namespace:std	typeref:typename:std::reference_wrapper<const T>	file:
cref	std-headers/functional	/^std::reference_wrapper<const T> cref(std::reference_wrapper<T> t);$/;"	p	namespace:std	typeref:typename:std::reference_wrapper<const T>	file:
cref	std-headers/functional	/^void cref(const T&&) = delete;$/;"	p	namespace:std	typeref:typename:void	file:
cregex_iterator	std-headers/regex	/^typedef regex_iterator<const char*> cregex_iterator;$/;"	t	namespace:std	typeref:typename:regex_iterator<const char * >	file:
cregex_token_iterator	std-headers/regex	/^typedef regex_token_iterator<const char*> cregex_token_iterator;$/;"	t	namespace:std	typeref:typename:regex_token_iterator<const char * >	file:
crend	std-headers/array	/^    const_reverse_iterator crend() const;$/;"	p	class:std::array	typeref:typename:const_reverse_iterator	file:
crend	std-headers/deque	/^    const_reverse_iterator crend() const;$/;"	p	class:std::deque	typeref:typename:const_reverse_iterator	file:
crend	std-headers/iterator	/^auto crend(const C& c) -> decltype(std::rend(c));$/;"	p	namespace:std	typeref:typename:decltype (std::rend (c))	file:
crend	std-headers/list	/^    const_reverse_iterator crend() const;$/;"	p	class:std::list	typeref:typename:const_reverse_iterator	file:
crend	std-headers/map	/^    const_reverse_iterator crend() const;$/;"	p	class:std::map	typeref:typename:const_reverse_iterator	file:
crend	std-headers/map	/^    const_reverse_iterator crend() const;$/;"	p	class:std::multimap	typeref:typename:const_reverse_iterator	file:
crend	std-headers/set	/^    const_reverse_iterator crend() const;$/;"	p	class:std::multiset	typeref:typename:const_reverse_iterator	file:
crend	std-headers/set	/^    const_reverse_iterator crend() const;$/;"	p	class:std::set	typeref:typename:const_reverse_iterator	file:
crend	std-headers/string	/^    const_reverse_iterator crend() const;$/;"	p	class:std::basic_string	typeref:typename:const_reverse_iterator	file:
crend	std-headers/unordered_map	/^    const_reverse_iterator crend() const;$/;"	p	class:std::unordered_map	typeref:typename:const_reverse_iterator	file:
crend	std-headers/unordered_map	/^    const_reverse_iterator crend() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_reverse_iterator	file:
crend	std-headers/vector	/^    const_reverse_iterator crend() const;$/;"	p	class:std::vector	typeref:typename:const_reverse_iterator	file:
cross_device_link	std-headers/system_error	/^    cross_device_link,                  \/\/  EXDEV$/;"	e	enum:std::errc	file:
cshift	std-headers/valarray	/^    valarray cshift(int count) const;$/;"	p	class:std::valarray	typeref:typename:valarray	file:
csub_match	std-headers/regex	/^typedef sub_match<const char*> csub_match;$/;"	t	namespace:std	typeref:typename:sub_match<const char * >	file:
ctime	std-headers/ctime	/^char* ctime(const std::time_t* time);$/;"	p	namespace:std	typeref:typename:char *	file:
ctype	std-headers/locale	/^    explicit ctype(std::size_t refs = 0);$/;"	p	class:std::ctype	file:
ctype	std-headers/locale	/^    static const category ctype;$/;"	m	class:std::locale	typeref:typename:const category	file:
ctype	std-headers/locale	/^class ctype : public ctype_base, public locale::facet {$/;"	c	namespace:std	file:
ctype_base	std-headers/locale	/^class ctype_base {$/;"	c	namespace:std	file:
ctype_byname	std-headers/locale	/^    explicit ctype_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::ctype_byname	file:
ctype_byname	std-headers/locale	/^    explicit ctype_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::ctype_byname	file:
ctype_byname	std-headers/locale	/^class ctype_byname : public ctype<CharT> {$/;"	c	namespace:std	file:
cur	std-headers/ios	/^    static constexpr seekdir cur;$/;"	m	class:std::ios_base	typeref:typename:seekdir	file:
curr_symbol	std-headers/locale	/^    string_type curr_symbol() const;$/;"	p	class:std::moneypunct	typeref:typename:string_type	file:
currency_symbol	std-headers/clocale	/^    char* currency_symbol;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
current	std-headers/iterator	/^    Iterator current;$/;"	m	class:std::reverse_iterator	typeref:typename:Iterator	file:
current_exception	std-headers/exception	/^std::exception_ptr current_exception();$/;"	p	namespace:std	typeref:typename:std::exception_ptr	file:
cv_status	std-headers/condition_variable	/^enum class cv_status {$/;"	g	namespace:std	file:
data	std-headers/array	/^    T* data();$/;"	p	class:std::array	typeref:typename:T *	file:
data	std-headers/array	/^    const T* data() const;$/;"	p	class:std::array	typeref:typename:const T *	file:
data	std-headers/string	/^    const CharT* data() const;$/;"	p	class:std::basic_string	typeref:typename:const CharT *	file:
data	std-headers/vector	/^    const value_type* data() const;$/;"	p	class:std::vector	typeref:typename:const value_type *	file:
data	std-headers/vector	/^    value_type*       data();$/;"	p	class:std::vector	typeref:typename:value_type *	file:
date_order	std-headers/locale	/^    dateorder date_order() const;$/;"	p	class:std::time_get	typeref:typename:dateorder	file:
dateorder	std-headers/locale	/^    enum dateorder {$/;"	g	class:std::time_base	file:
deallocate	std-headers/memory	/^    static void deallocate(Alloc& a, pointer p, size_type n);$/;"	p	struct:std::allocator_traits	typeref:typename:void	file:
deallocate	std-headers/memory	/^    void deallocate(pointer p, size_type n);$/;"	p	struct:std::allocator	typeref:typename:void	file:
deallocate	std-headers/scoped_allocator	/^    void deallocate(pointer p, size_type n);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
dec	std-headers/ios	/^    static constexpr fmtflags dec;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
dec	std-headers/ios	/^ios_base& dec(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
deca	std-headers/ratio	/^typedef ratio<                       10, 1> deca;$/;"	t	namespace:std	typeref:typename:ratio<10,1>	file:
decay	std-headers/type_traits	/^template<class T> struct decay {$/;"	s	namespace:std	file:
deci	std-headers/ratio	/^typedef ratio<1,                        10> deci;$/;"	t	namespace:std	typeref:typename:ratio<1,10>	file:
decimal_point	std-headers/clocale	/^    char* decimal_point;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
decimal_point	std-headers/locale	/^    CharT decimal_point() const;$/;"	p	class:std::moneypunct	typeref:typename:CharT	file:
decimal_point	std-headers/locale	/^    char_type decimal_point() const;$/;"	p	class:std::numpunct	typeref:typename:char_type	file:
declare_no_pointers	std-headers/memory	/^void declare_no_pointers(char* p, std::size_t n);$/;"	p	namespace:std	typeref:typename:void	file:
declare_reachable	std-headers/memory	/^void declare_reachable(void* p);$/;"	p	namespace:std	typeref:typename:void	file:
declval	std-headers/utility	/^T declval(); \/\/ SIMPLIFIED: return type$/;"	p	namespace:std	typeref:typename:T	file:
default_delete	std-headers/memory	/^    constexpr default_delete() = default;$/;"	p	struct:std::default_delete	file:
default_delete	std-headers/memory	/^    default_delete(const default_delete<U>& d);$/;"	p	struct:std::default_delete	file:
default_delete	std-headers/memory	/^    default_delete(const default_delete<U[]>& d);$/;"	p	struct:std::default_delete	file:
default_delete	std-headers/memory	/^struct default_delete {$/;"	s	namespace:std	file:
default_error_condition	std-headers/system_error	/^    std::error_condition default_error_condition() const;$/;"	p	class:std::error_code	typeref:typename:std::error_condition	file:
default_error_condition	std-headers/system_error	/^    virtual std::error_condition default_error_condition(int code) const;$/;"	p	class:std::error_category	typeref:typename:std::error_condition	file:
default_seed	std-headers/random	/^    static constexpr UIntType default_seed;$/;"	m	class:std::linear_congruential_engine	typeref:typename:UIntType	file:
default_seed	std-headers/random	/^    static constexpr UIntType default_seed;$/;"	m	class:std::subtract_with_carry_engine	typeref:typename:UIntType	file:
defaultfloat	std-headers/ios	/^ios_base& defaultfloat(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
defer_lock	std-headers/mutex	/^constexpr std::defer_lock_t defer_lock;$/;"	v	namespace:std	typeref:typename:std::defer_lock_t
defer_lock_t	std-headers/mutex	/^struct defer_lock_t { };$/;"	s	namespace:std	file:
deferred	std-headers/future	/^    deferred$/;"	e	enum:std::future_status	file:
deferred	std-headers/future	/^    deferred$/;"	e	enum:std::launch	file:
deleter_type	std-headers/memory	/^    typedef Deleter deleter_type;$/;"	t	class:std::unique_ptr	typeref:typename:Deleter	file:
den	std-headers/ratio	/^    static constexpr intmax_t den;$/;"	m	struct:std::ratio	typeref:typename:intmax_t	file:
denorm_absent	std-headers/limits	/^    denorm_absent        = 0,$/;"	e	enum:std::float_denorm_style	file:
denorm_indeterminate	std-headers/limits	/^    denorm_indeterminate = -1,$/;"	e	enum:std::float_denorm_style	file:
denorm_min	std-headers/limits	/^    static T denorm_min();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
denorm_present	std-headers/limits	/^    denorm_present       = 1$/;"	e	enum:std::float_denorm_style	file:
densities	std-headers/random	/^    std::vector<RealType> densities() const;$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:std::vector<RealType>	file:
densities	std-headers/random	/^    std::vector<RealType> densities() const;$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:std::vector<RealType>	file:
deque	std-headers/deque	/^    deque();$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(InputIt first, InputIt last,$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(const deque& other);$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(const deque& other, const Allocator& alloc);$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(deque&& other);$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(deque&& other, const Allocator& alloc);$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(size_type count,$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    deque(std::initializer_list<T> init,$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    explicit deque(const Allocator& alloc = Allocator());$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    explicit deque(const Allocator& alloc);$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    explicit deque(size_type count,$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    explicit deque(size_type n);$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^    explicit deque(size_type n, const Allocator& alloc = Allocator());$/;"	p	class:std::deque	file:
deque	std-headers/deque	/^class deque {$/;"	c	namespace:std	file:
destination_address_required	std-headers/system_error	/^    destination_address_required,       \/\/  EDESTADDRREQ$/;"	e	enum:std::errc	file:
destroy	std-headers/memory	/^    static void destroy(Alloc& a, T* p);$/;"	p	struct:std::allocator_traits	typeref:typename:void	file:
destroy	std-headers/memory	/^    void destroy(U* p);$/;"	p	struct:std::allocator	typeref:typename:void	file:
destroy	std-headers/memory	/^    void destroy(pointer p);$/;"	p	struct:std::allocator	typeref:typename:void	file:
destroy	std-headers/scoped_allocator	/^    void destroy(T* p);$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:void	file:
detach	std-headers/thread	/^    void detach();$/;"	p	class:std::thread	typeref:typename:void	file:
device_or_resource_busy	std-headers/system_error	/^    device_or_resource_busy,            \/\/  EBUSY$/;"	e	enum:std::errc	file:
difference_type	std-headers/array	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::array	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/deque	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::deque	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/forward_list	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::forward_list	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/iterator	/^    typedef Distance difference_type;$/;"	t	class:std::istream_iterator	typeref:typename:Distance	file:
difference_type	std-headers/iterator	/^    typedef Distance difference_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:Distance	file:
difference_type	std-headers/iterator	/^    typedef Distance difference_type;$/;"	t	struct:std::iterator	typeref:typename:Distance	file:
difference_type	std-headers/iterator	/^    typedef ptrdiff_t difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::difference_type difference_type;$/;"	t	class:std::move_iterator	typeref:typename:iterator_traits<Iterator>::difference_type	file:
difference_type	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::difference_type difference_type;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<Iterator>::difference_type	file:
difference_type	std-headers/iterator	/^    typedef typename ptrdiff_t difference_type;$/;"	t	class:std::move_iterator	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/iterator	/^    typedef typename ptrdiff_t difference_type;$/;"	t	class:std::reverse_iterator	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/iterator	/^    typedef void difference_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:void	file:
difference_type	std-headers/iterator	/^    typedef void difference_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:void	file:
difference_type	std-headers/iterator	/^    typedef void difference_type;$/;"	t	class:std::insert_iterator	typeref:typename:void	file:
difference_type	std-headers/iterator	/^    typedef void difference_type;$/;"	t	class:std::ostream_iterator	typeref:typename:void	file:
difference_type	std-headers/iterator	/^    typedef void difference_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:void	file:
difference_type	std-headers/list	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::list	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/map	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::map	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/map	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::multimap	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/memory	/^    typedef ptrdiff_t difference_type;$/;"	t	struct:std::allocator	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/memory	/^    typedef ptrdiff_t difference_type;$/;"	t	struct:std::allocator_traits	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/memory	/^    typedef ptrdiff_t difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/memory	/^    typedef void difference_type;$/;"	t	class:std::raw_storage_iterator	typeref:typename:void	file:
difference_type	std-headers/regex	/^    typedef ptrdiff_t difference_type;$/;"	t	class:std::regex_iterator	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/regex	/^    typedef ptrdiff_t difference_type;$/;"	t	class:std::regex_token_iterator	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/regex	/^    typedef ptrdiff_t difference_type;$/;"	t	class:std::sub_match	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/regex	/^    typedef typename std::iterator_traits<BidirIt>::difference_type difference_type;$/;"	t	class:std::match_results	typeref:typename:std::iterator_traits<BidirIt>::difference_type	file:
difference_type	std-headers/regex	/^    typedef typename std::iterator_traits<BidirIt>::difference_type difference_type;$/;"	t	class:std::sub_match	typeref:typename:std::iterator_traits<BidirIt>::difference_type	file:
difference_type	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::difference_type difference_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::difference_type	file:
difference_type	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::difference_type difference_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::difference_type	file:
difference_type	std-headers/set	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::multiset	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/set	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::set	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/string	/^    typedef ptrdiff_t difference_type;$/;"	t	class:std::basic_string	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/string	/^    typedef typename Allocator::difference_type difference_type;$/;"	t	class:std::basic_string	typeref:typename:Allocator::difference_type	file:
difference_type	std-headers/string	/^    typedef typename std::allocator_traits<Allocator>::difference_type difference_type;$/;"	t	class:std::basic_string	typeref:typename:std::allocator_traits<Allocator>::difference_type	file:
difference_type	std-headers/unordered_map	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::unordered_map	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/unordered_map	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::unordered_multimap	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/unordered_set	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::unordered_multiset	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/unordered_set	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::unordered_set	typeref:typename:ptrdiff_t	file:
difference_type	std-headers/vector	/^    typedef ptrdiff_t difference_type; \/\/ actual type not specified$/;"	t	class:std::vector	typeref:typename:ptrdiff_t	file:
difftime	std-headers/ctime	/^double difftime(std::time_t time_end, std::time_t time_beg);$/;"	p	namespace:std	typeref:typename:double	file:
digit	std-headers/locale	/^    static const mask digit;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
digits	std-headers/limits	/^    static const int  digits;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
digits10	std-headers/limits	/^    static const int  digits10;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
directory_not_empty	std-headers/system_error	/^    directory_not_empty,                \/\/  ENOTEMPTY$/;"	e	enum:std::errc	file:
discard	std-headers/random	/^    void discard(unsigned long long z);$/;"	p	class:std::discard_block_engine	typeref:typename:void	file:
discard	std-headers/random	/^    void discard(unsigned long long z);$/;"	p	class:std::independent_bits_engine	typeref:typename:void	file:
discard	std-headers/random	/^    void discard(unsigned long long z);$/;"	p	class:std::linear_congruential_engine	typeref:typename:void	file:
discard	std-headers/random	/^    void discard(unsigned long long z);$/;"	p	class:std::mersenne_twister_engine	typeref:typename:void	file:
discard	std-headers/random	/^    void discard(unsigned long long z);$/;"	p	class:std::shuffle_order_engine	typeref:typename:void	file:
discard	std-headers/random	/^    void discard(unsigned long long z);$/;"	p	class:std::subtract_with_carry_engine	typeref:typename:void	file:
discard_block_engine	std-headers/random	/^    > class discard_block_engine {$/;"	c	namespace:std	file:
discard_block_engine	std-headers/random	/^    discard_block_engine();$/;"	p	class:std::discard_block_engine	file:
discard_block_engine	std-headers/random	/^    explicit discard_block_engine(Engine&& e);$/;"	p	class:std::discard_block_engine	file:
discard_block_engine	std-headers/random	/^    explicit discard_block_engine(Sseq& seq);$/;"	p	class:std::discard_block_engine	file:
discard_block_engine	std-headers/random	/^    explicit discard_block_engine(const Engine& e);$/;"	p	class:std::discard_block_engine	file:
discard_block_engine	std-headers/random	/^    explicit discard_block_engine(result_type s);$/;"	p	class:std::discard_block_engine	file:
discrete_distribution	std-headers/random	/^    discrete_distribution();$/;"	p	class:std::discrete_distribution	file:
discrete_distribution	std-headers/random	/^    discrete_distribution(InputIt first, InputIt last);$/;"	p	class:std::discrete_distribution	file:
discrete_distribution	std-headers/random	/^    discrete_distribution(std::initializer_list<double> weights);$/;"	p	class:std::discrete_distribution	file:
discrete_distribution	std-headers/random	/^    discrete_distribution(std::size_t count, double xmin, double xmax,$/;"	p	class:std::discrete_distribution	file:
discrete_distribution	std-headers/random	/^    explicit discrete_distribution(const param_type& params);$/;"	p	class:std::discrete_distribution	file:
discrete_distribution	std-headers/random	/^class discrete_distribution {$/;"	c	namespace:std	file:
distance	std-headers/iterator	/^distance(InputIt first, InputIt last);$/;"	p	namespace:std	typeref:typename:std::iterator_traits<InputIt>::difference_type	file:
div	std-headers/cinttypes	/^std::imaxdiv_t div(std::intmax_t x, std::intmax_t y);$/;"	p	namespace:std	typeref:typename:std::imaxdiv_t	file:
div	std-headers/cstdlib	/^std::div_t     div(int x, int y);$/;"	p	namespace:std	typeref:typename:std::div_t	file:
div	std-headers/cstdlib	/^std::ldiv_t    div(long x, long y);$/;"	p	namespace:std	typeref:typename:std::ldiv_t	file:
div	std-headers/cstdlib	/^std::lldiv_t   div(long long x, long long y);$/;"	p	namespace:std	typeref:typename:std::lldiv_t	file:
div_t	std-headers/cstdlib	/^struct div_t {$/;"	s	namespace:std	file:
divides	std-headers/functional	/^struct divides {$/;"	s	namespace:std	file:
dmy	std-headers/locale	/^        no_order, dmy, mdy, ymd, ydm$/;"	e	enum:std::time_base::dateorder	file:
do_always_noconv	std-headers/locale	/^    virtual bool do_always_noconv() const;$/;"	p	class:std::codecvt	typeref:typename:bool	file:
do_close	std-headers/locale	/^    virtual void do_close(catalog c) const;$/;"	p	class:std::messages	typeref:typename:void	file:
do_compare	std-headers/locale	/^    virtual int do_compare(const CharT* low1, const CharT* high1,$/;"	p	class:std::collate	typeref:typename:int	file:
do_curr_symbol	std-headers/locale	/^    virtual string_type do_curr_symbol() const;$/;"	p	class:std::moneypunct	typeref:typename:string_type	file:
do_date_order	std-headers/locale	/^    virtual dateorder do_date_order() const;$/;"	p	class:std::time_get	typeref:typename:dateorder	file:
do_decimal_point	std-headers/locale	/^    virtual CharT do_decimal_point() const;$/;"	p	class:std::moneypunct	typeref:typename:CharT	file:
do_decimal_point	std-headers/locale	/^    virtual char_type do_decimal_point() const;$/;"	p	class:std::numpunct	typeref:typename:char_type	file:
do_encoding	std-headers/locale	/^    virtual int do_encoding() const;$/;"	p	class:std::codecvt	typeref:typename:int	file:
do_falsename	std-headers/locale	/^    virtual string_type do_falsename() const;$/;"	p	class:std::numpunct	typeref:typename:string_type	file:
do_frac_digits	std-headers/locale	/^    virtual int do_frac_digits() const;$/;"	p	class:std::moneypunct	typeref:typename:int	file:
do_get	std-headers/locale	/^    virtual iter_type do_get(iter_type beg, iter_type end, bool intl, std::ios_base& str,$/;"	p	class:std::money_get	typeref:typename:iter_type	file:
do_get	std-headers/locale	/^    virtual iter_type do_get(iter_type in, iter_type end, std::ios_base& str,$/;"	p	class:std::num_get	typeref:typename:iter_type	file:
do_get	std-headers/locale	/^    virtual iter_type do_get(iter_type neg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
do_get	std-headers/locale	/^    virtual string_type do_get(catalog cat, int set, int msgid, const string_type& dfault) const/;"	p	class:std::messages	typeref:typename:string_type	file:
do_get_date	std-headers/locale	/^    virtual iter_type do_get_date(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
do_get_monthname	std-headers/locale	/^    virtual iter_type do_get_monthname(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
do_get_weekday	std-headers/locale	/^    virtual iter_type do_get_weekday(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
do_get_year	std-headers/locale	/^    iter_type do_get_year(iter_type s, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
do_get_year	std-headers/locale	/^    virtual iter_type do_get_year(iter_type s, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
do_grouping	std-headers/locale	/^    virtual std::string do_grouping() const;$/;"	p	class:std::moneypunct	typeref:typename:std::string	file:
do_grouping	std-headers/locale	/^    virtual std::string do_grouping() const;$/;"	p	class:std::numpunct	typeref:typename:std::string	file:
do_hash	std-headers/locale	/^    virtual long do_hash(const CharT* beg, const CharT* end) const;$/;"	p	class:std::collate	typeref:typename:long	file:
do_in	std-headers/locale	/^    virtual result do_in(stateT& state,$/;"	p	class:std::codecvt	typeref:typename:result	file:
do_is	std-headers/locale	/^    virtual bool do_is(mask m, CharT c) const;$/;"	p	class:std::ctype	typeref:typename:bool	file:
do_is	std-headers/locale	/^    virtual const CharT* do_is(const CharT* low, const CharT* high, mask* vec) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
do_length	std-headers/locale	/^    virtual int do_length(StateT& state,$/;"	p	class:std::codecvt	typeref:typename:int	file:
do_max_length	std-headers/locale	/^    virtual int do_max_length() const;$/;"	p	class:std::codecvt	typeref:typename:int	file:
do_narrow	std-headers/locale	/^    virtual char do_narrow(CharT c, char dflt) const;$/;"	p	class:std::ctype	typeref:typename:char	file:
do_narrow	std-headers/locale	/^    virtual const CharT* do_narrow(const CharT* beg, const CharT* end,$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
do_neg_format	std-headers/locale	/^    virtual pattern do_neg_format() const;$/;"	p	class:std::moneypunct	typeref:typename:pattern	file:
do_negative_sign	std-headers/locale	/^    virtual string_type do_negative_sign() const;$/;"	p	class:std::moneypunct	typeref:typename:string_type	file:
do_open	std-headers/locale	/^    virtual catalog do_open(const std::basic_string<char>& name, const std::locale& loc) const;$/;"	p	class:std::messages	typeref:typename:catalog	file:
do_out	std-headers/locale	/^    virtual result do_out(StateT& state,$/;"	p	class:std::codecvt	typeref:typename:result	file:
do_pos_format	std-headers/locale	/^    virtual pattern do_pos_format() const;$/;"	p	class:std::moneypunct	typeref:typename:pattern	file:
do_positive_sign	std-headers/locale	/^    virtual string_type do_positive_sign() const;$/;"	p	class:std::moneypunct	typeref:typename:string_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, bool intl, std::ios_base& str,$/;"	p	class:std::money_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, bool v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, const void* v) c/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, double v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, long double v) c/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, long long v) con/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, long v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, unsigned long lo/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str, char_type fill, unsigned long) c/;"	p	class:std::num_put	typeref:typename:iter_type	file:
do_put	std-headers/locale	/^    virtual iter_type do_put(iter_type out, std::ios_base& str,$/;"	p	class:std::time_put	typeref:typename:iter_type	file:
do_scan_is	std-headers/locale	/^    virtual const CharT* do_scan_is(mask m, const CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
do_scan_not	std-headers/locale	/^    virtual const CharT* do_scan_not(mask m, const CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
do_thousands_sep	std-headers/locale	/^    virtual char_type do_thousands_sep() const;$/;"	p	class:std::moneypunct	typeref:typename:char_type	file:
do_thousands_sep	std-headers/locale	/^    virtual char_type do_thousands_sep() const;$/;"	p	class:std::numpunct	typeref:typename:char_type	file:
do_tolower	std-headers/locale	/^    virtual CharT do_tolower(CharT c) const;$/;"	p	class:std::ctype	typeref:typename:CharT	file:
do_tolower	std-headers/locale	/^    virtual const CharT* do_tolower(CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
do_toupper	std-headers/locale	/^    virtual CharT do_toupper(CharT c) const;$/;"	p	class:std::ctype	typeref:typename:CharT	file:
do_toupper	std-headers/locale	/^    virtual const CharT* do_toupper(CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
do_transform	std-headers/locale	/^    virtual string_type do_transform(const CharT* low, const CharT* high) const;$/;"	p	class:std::collate	typeref:typename:string_type	file:
do_truename	std-headers/locale	/^    virtual string_type do_truename() const;$/;"	p	class:std::numpunct	typeref:typename:string_type	file:
do_unshift	std-headers/locale	/^    virtual result do_unshift(StateT& state,$/;"	p	class:std::codecvt	typeref:typename:result	file:
do_widen	std-headers/locale	/^    virtual CharT do_widen(char c) const;$/;"	p	class:std::ctype	typeref:typename:CharT	file:
do_widen	std-headers/locale	/^    virtual const char* do_widen(const char* beg, const char* end, CharT* dst) const;$/;"	p	class:std::ctype	typeref:typename:const char *	file:
domain_error	std-headers/stdexcept	/^    explicit domain_error(const char* what_arg);$/;"	p	class:std::domain_error	file:
domain_error	std-headers/stdexcept	/^    explicit domain_error(const string& what_arg);$/;"	p	class:std::domain_error	file:
domain_error	std-headers/stdexcept	/^class domain_error : public logic_error {$/;"	c	namespace:std	file:
double_t	std-headers/cmath	/^typedef double double_t;$/;"	t	namespace:std	typeref:typename:double	file:
duration	std-headers/chrono	/^    constexpr duration() = default;$/;"	p	class:std::chrono::duration	file:
duration	std-headers/chrono	/^    constexpr duration(const duration<Rep2, Period2>& d);$/;"	p	class:std::chrono::duration	file:
duration	std-headers/chrono	/^    constexpr explicit duration(const Rep2& r);$/;"	p	class:std::chrono::duration	file:
duration	std-headers/chrono	/^    duration(const duration&) = default;$/;"	p	class:std::chrono::duration	file:
duration	std-headers/chrono	/^    typedef duration<int> duration;$/;"	t	class:std::chrono::time_point	typeref:typename:duration<int>	file:
duration	std-headers/chrono	/^    typedef duration<rep, period> duration;$/;"	t	class:std::chrono::high_resolution_clock	typeref:typename:duration<rep,period>	file:
duration	std-headers/chrono	/^    typedef duration<rep, period> duration;$/;"	t	class:std::chrono::steady_clock	typeref:typename:duration<rep,period>	file:
duration	std-headers/chrono	/^    typedef duration<rep, period> duration;$/;"	t	class:std::chrono::system_clock	typeref:typename:duration<rep,period>	file:
duration	std-headers/chrono	/^class duration {$/;"	c	namespace:std::chrono	file:
duration_cast	std-headers/chrono	/^constexpr ToDuration duration_cast(const duration<Rep, Period>& d);$/;"	p	namespace:std::chrono	typeref:typename:ToDuration	file:
duration_values	std-headers/chrono	/^struct duration_values {$/;"	s	namespace:std::chrono	file:
dynamic_pointer_cast	std-headers/memory	/^std::shared_ptr<T> dynamic_pointer_cast(const std::shared_ptr<U>& r);$/;"	p	namespace:std	typeref:typename:std::shared_ptr<T>	file:
eback	std-headers/streambuf	/^    char_type* eback() const;$/;"	p	class:std::basic_streambuf	typeref:typename:char_type *	file:
egptr	std-headers/streambuf	/^    char_type* egptr() const;$/;"	p	class:std::basic_streambuf	typeref:typename:char_type *	file:
egrep	std-headers/regex	/^constexpr syntax_option_type egrep;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
element_type	std-headers/memory	/^    typedef T element_type;$/;"	t	class:std::auto_ptr	typeref:typename:T	file:
element_type	std-headers/memory	/^    typedef T element_type;$/;"	t	class:std::shared_ptr	typeref:typename:T	file:
element_type	std-headers/memory	/^    typedef T element_type;$/;"	t	class:std::unique_ptr	typeref:typename:T	file:
element_type	std-headers/memory	/^    typedef T element_type;$/;"	t	class:std::weak_ptr	typeref:typename:T	file:
element_type	std-headers/memory	/^    typedef void element_type; \/\/ SIMPLIFIED$/;"	t	struct:std::pointer_traits	typeref:typename:void	file:
emplace	std-headers/deque	/^    iterator emplace(const_iterator pos, Args&& ... args);$/;"	p	class:std::deque	typeref:typename:iterator	file:
emplace	std-headers/list	/^    iterator emplace(const_iterator pos, Args&& ... args);$/;"	p	class:std::list	typeref:typename:iterator	file:
emplace	std-headers/map	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::map	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/map	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::multimap	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/queue	/^    void emplace(Args&& ... args);$/;"	p	class:std::priority_queue	typeref:typename:void	file:
emplace	std-headers/queue	/^    void emplace(Args&& ... args);$/;"	p	class:std::queue	typeref:typename:void	file:
emplace	std-headers/set	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::multiset	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/set	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::set	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/stack	/^    void emplace(Args&& ... args);$/;"	p	class:std::stack	typeref:typename:void	file:
emplace	std-headers/unordered_map	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::unordered_map	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/unordered_map	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::unordered_multimap	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/unordered_set	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::unordered_multiset	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/unordered_set	/^    std::pair<iterator, bool> emplace(Args&& ... args);$/;"	p	class:std::unordered_set	typeref:typename:std::pair<iterator,bool>	file:
emplace	std-headers/vector	/^    iterator emplace(const_iterator pos, Args&& ... args);$/;"	p	class:std::vector	typeref:typename:iterator	file:
emplace_after	std-headers/forward_list	/^    iterator emplace_after(const_iterator pos, Args&& ... args);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
emplace_back	std-headers/deque	/^    void emplace_back(Args&& ... args);$/;"	p	class:std::deque	typeref:typename:void	file:
emplace_back	std-headers/list	/^    void emplace_back(Args&& ... args);$/;"	p	class:std::list	typeref:typename:void	file:
emplace_back	std-headers/vector	/^    void emplace_back(Args&& ... args);$/;"	p	class:std::vector	typeref:typename:void	file:
emplace_front	std-headers/deque	/^    void emplace_front(Args&& ... args);$/;"	p	class:std::deque	typeref:typename:void	file:
emplace_front	std-headers/forward_list	/^    void emplace_front(Args&& ... args);$/;"	p	class:std::forward_list	typeref:typename:void	file:
emplace_front	std-headers/list	/^    void emplace_front(Args&& ... args);$/;"	p	class:std::list	typeref:typename:void	file:
emplace_hint	std-headers/map	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::map	typeref:typename:iterator	file:
emplace_hint	std-headers/map	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
emplace_hint	std-headers/set	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
emplace_hint	std-headers/set	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::set	typeref:typename:iterator	file:
emplace_hint	std-headers/unordered_map	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
emplace_hint	std-headers/unordered_map	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
emplace_hint	std-headers/unordered_set	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
emplace_hint	std-headers/unordered_set	/^    iterator emplace_hint(const_iterator hint, Args&& ... args);$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
empty	std-headers/array	/^    bool empty() const;$/;"	p	class:std::array	typeref:typename:bool	file:
empty	std-headers/deque	/^    bool empty() const;$/;"	p	class:std::deque	typeref:typename:bool	file:
empty	std-headers/forward_list	/^    bool empty() const;$/;"	p	class:std::forward_list	typeref:typename:bool	file:
empty	std-headers/list	/^    bool empty() const;$/;"	p	class:std::list	typeref:typename:bool	file:
empty	std-headers/map	/^    bool empty() const;$/;"	p	class:std::map	typeref:typename:bool	file:
empty	std-headers/map	/^    bool empty() const;$/;"	p	class:std::multimap	typeref:typename:bool	file:
empty	std-headers/queue	/^    bool empty() const;$/;"	p	class:std::priority_queue	typeref:typename:bool	file:
empty	std-headers/queue	/^    bool empty() const;$/;"	p	class:std::queue	typeref:typename:bool	file:
empty	std-headers/regex	/^    bool empty() const;$/;"	p	class:std::match_results	typeref:typename:bool	file:
empty	std-headers/set	/^    bool empty() const;$/;"	p	class:std::multiset	typeref:typename:bool	file:
empty	std-headers/set	/^    bool empty() const;$/;"	p	class:std::set	typeref:typename:bool	file:
empty	std-headers/stack	/^    bool empty() const;$/;"	p	class:std::stack	typeref:typename:bool	file:
empty	std-headers/string	/^    bool empty() const;$/;"	p	class:std::basic_string	typeref:typename:bool	file:
empty	std-headers/unordered_map	/^    bool empty() const;$/;"	p	class:std::unordered_map	typeref:typename:bool	file:
empty	std-headers/unordered_map	/^    bool empty() const;$/;"	p	class:std::unordered_multimap	typeref:typename:bool	file:
empty	std-headers/unordered_set	/^    bool empty() const;$/;"	p	class:std::unordered_multiset	typeref:typename:bool	file:
empty	std-headers/unordered_set	/^    bool empty() const;$/;"	p	class:std::unordered_set	typeref:typename:bool	file:
empty	std-headers/vector	/^    bool empty() const;$/;"	p	class:std::vector	typeref:typename:bool	file:
enable_if	std-headers/type_traits	/^template<bool, class T = void> struct enable_if {$/;"	s	namespace:std	file:
enable_shared_from_this	std-headers/memory	/^    constexpr enable_shared_from_this();$/;"	p	class:std::enable_shared_from_this	file:
enable_shared_from_this	std-headers/memory	/^    enable_shared_from_this(const enable_shared_from_this<T>& obj);$/;"	p	class:std::enable_shared_from_this	file:
enable_shared_from_this	std-headers/memory	/^class enable_shared_from_this {$/;"	c	namespace:std	file:
encoding	std-headers/locale	/^    int encoding() const;$/;"	p	class:std::codecvt	typeref:typename:int	file:
end	std-headers/array	/^    const_iterator end() const;$/;"	p	class:std::array	typeref:typename:const_iterator	file:
end	std-headers/array	/^    iterator end();$/;"	p	class:std::array	typeref:typename:iterator	file:
end	std-headers/deque	/^    const_iterator end() const;$/;"	p	class:std::deque	typeref:typename:const_iterator	file:
end	std-headers/deque	/^    iterator end();$/;"	p	class:std::deque	typeref:typename:iterator	file:
end	std-headers/forward_list	/^    const_iterator end() const;$/;"	p	class:std::forward_list	typeref:typename:const_iterator	file:
end	std-headers/forward_list	/^    iterator end();$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
end	std-headers/initializer_list	/^    const T* end() const;$/;"	p	class:std::initializer_list	typeref:typename:const T *	file:
end	std-headers/initializer_list	/^template<class T> const T* end(initializer_list<T> il);$/;"	p	namespace:std	typeref:typename:const T *	file:
end	std-headers/ios	/^    static constexpr seekdir end;$/;"	m	class:std::ios_base	typeref:typename:seekdir	file:
end	std-headers/iterator	/^T* end(T(&array)[N]);$/;"	p	namespace:std	typeref:typename:T *	file:
end	std-headers/iterator	/^auto end(C& c) -> decltype(c.end());$/;"	p	namespace:std	typeref:typename:decltype (c.end ())	file:
end	std-headers/iterator	/^auto end(const C& c) -> decltype(c.end());$/;"	p	namespace:std	typeref:typename:decltype (c.end ())	file:
end	std-headers/list	/^    const_iterator end() const;$/;"	p	class:std::list	typeref:typename:const_iterator	file:
end	std-headers/list	/^    iterator end();$/;"	p	class:std::list	typeref:typename:iterator	file:
end	std-headers/map	/^    const_iterator end() const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
end	std-headers/map	/^    const_iterator end() const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
end	std-headers/map	/^    iterator end();$/;"	p	class:std::map	typeref:typename:iterator	file:
end	std-headers/map	/^    iterator end();$/;"	p	class:std::multimap	typeref:typename:iterator	file:
end	std-headers/regex	/^    const_iterator end() const;$/;"	p	class:std::match_results	typeref:typename:const_iterator	file:
end	std-headers/regex	/^    iterator end();$/;"	p	class:std::match_results	typeref:typename:iterator	file:
end	std-headers/set	/^    const_iterator end() const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
end	std-headers/set	/^    const_iterator end() const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
end	std-headers/set	/^    iterator end();$/;"	p	class:std::multiset	typeref:typename:iterator	file:
end	std-headers/set	/^    iterator end();$/;"	p	class:std::set	typeref:typename:iterator	file:
end	std-headers/string	/^    const_iterator end() const;$/;"	p	class:std::basic_string	typeref:typename:const_iterator	file:
end	std-headers/string	/^    iterator end();$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
end	std-headers/unordered_map	/^    const_iterator end() const;$/;"	p	class:std::unordered_map	typeref:typename:const_iterator	file:
end	std-headers/unordered_map	/^    const_iterator end() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_iterator	file:
end	std-headers/unordered_map	/^    const_local_iterator end(size_type n) const;$/;"	p	class:std::unordered_map	typeref:typename:const_local_iterator	file:
end	std-headers/unordered_map	/^    const_local_iterator end(size_type n) const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_local_iterator	file:
end	std-headers/unordered_map	/^    iterator end();$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
end	std-headers/unordered_map	/^    iterator end();$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
end	std-headers/unordered_map	/^    local_iterator end(size_type n);$/;"	p	class:std::unordered_map	typeref:typename:local_iterator	file:
end	std-headers/unordered_map	/^    local_iterator end(size_type n);$/;"	p	class:std::unordered_multimap	typeref:typename:local_iterator	file:
end	std-headers/unordered_set	/^    const_iterator end() const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_iterator	file:
end	std-headers/unordered_set	/^    const_iterator end() const;$/;"	p	class:std::unordered_set	typeref:typename:const_iterator	file:
end	std-headers/unordered_set	/^    const_local_iterator end(size_type n) const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_local_iterator	file:
end	std-headers/unordered_set	/^    const_local_iterator end(size_type n) const;$/;"	p	class:std::unordered_set	typeref:typename:const_local_iterator	file:
end	std-headers/unordered_set	/^    iterator end();$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
end	std-headers/unordered_set	/^    iterator end();$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
end	std-headers/unordered_set	/^    local_iterator end(size_type n);$/;"	p	class:std::unordered_multiset	typeref:typename:local_iterator	file:
end	std-headers/unordered_set	/^    local_iterator end(size_type n);$/;"	p	class:std::unordered_set	typeref:typename:local_iterator	file:
end	std-headers/valarray	/^__unspecified end(const valarray<T>& v);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
end	std-headers/valarray	/^__unspecified end(valarray<T>& v);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
end	std-headers/vector	/^    const_iterator end() const;$/;"	p	class:std::vector	typeref:typename:const_iterator	file:
end	std-headers/vector	/^    iterator end();$/;"	p	class:std::vector	typeref:typename:iterator	file:
endl	std-headers/ostream	/^std::basic_ostream<CharT, Traits>& endl(std::basic_ostream<CharT, Traits>& os);$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
ends	std-headers/ostream	/^std::basic_ostream<CharT, Traits>& ends(std::basic_ostream<CharT, Traits>& os);$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
entropy	std-headers/random	/^    double entropy() const;$/;"	p	class:std::random_device	typeref:typename:double	file:
eof	std-headers/ios	/^    bool eof() const;$/;"	p	class:std::basic_ios	typeref:typename:bool	file:
eof	std-headers/string	/^    static int_type eof();$/;"	p	class:std::char_traits	typeref:typename:int_type	file:
eofbit	std-headers/ios	/^    static constexpr iostate eofbit;$/;"	m	class:std::ios_base	typeref:typename:iostate	file:
epptr	std-headers/streambuf	/^    char_type* epptr() const;$/;"	p	class:std::basic_streambuf	typeref:typename:char_type *	file:
epsilon	std-headers/limits	/^    static T epsilon();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
eq	std-headers/string	/^    static bool eq(char_type a, char_type b);$/;"	p	class:std::char_traits	typeref:typename:bool	file:
eq_int_type	std-headers/string	/^    static bool eq_int_type(int_type c1, int_type c2);$/;"	p	class:std::char_traits	typeref:typename:bool	file:
equal	std-headers/algorithm	/^bool equal(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:bool	file:
equal	std-headers/iterator	/^    bool equal(const istreambuf_iterator& it) const;$/;"	p	class:std::istreambuf_iterator	typeref:typename:bool	file:
equal_range	std-headers/algorithm	/^equal_range(ForwardIt first, ForwardIt last,$/;"	p	namespace:std	typeref:typename:std::pair<ForwardIt,ForwardIt>	file:
equal_range	std-headers/map	/^    std::pair<const_iterator, const_iterator> equal_range(const K& x) const;$/;"	p	class:std::map	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/map	/^    std::pair<const_iterator, const_iterator> equal_range(const K& x) const;$/;"	p	class:std::multimap	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/map	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::map	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/map	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::multimap	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/map	/^    std::pair<iterator, iterator> equal_range(const K& x);$/;"	p	class:std::map	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/map	/^    std::pair<iterator, iterator> equal_range(const K& x);$/;"	p	class:std::multimap	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/map	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::map	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/map	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::multimap	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/set	/^    std::pair<const_iterator, const_iterator> equal_range(const K& x) const;$/;"	p	class:std::multiset	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/set	/^    std::pair<const_iterator, const_iterator> equal_range(const K& x) const;$/;"	p	class:std::set	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/set	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::multiset	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/set	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::set	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/set	/^    std::pair<iterator, iterator> equal_range(const K& x);$/;"	p	class:std::multiset	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/set	/^    std::pair<iterator, iterator> equal_range(const K& x);$/;"	p	class:std::set	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/set	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::multiset	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/set	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::set	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/unordered_map	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::unordered_map	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/unordered_map	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::unordered_multimap	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/unordered_map	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::unordered_map	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/unordered_map	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::unordered_multimap	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/unordered_set	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::unordered_multiset	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/unordered_set	/^    std::pair<const_iterator, const_iterator> equal_range(const Key& key) const;$/;"	p	class:std::unordered_set	typeref:typename:std::pair<const_iterator,const_iterator>	file:
equal_range	std-headers/unordered_set	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::unordered_multiset	typeref:typename:std::pair<iterator,iterator>	file:
equal_range	std-headers/unordered_set	/^    std::pair<iterator, iterator> equal_range(const Key& key);$/;"	p	class:std::unordered_set	typeref:typename:std::pair<iterator,iterator>	file:
equal_to	std-headers/functional	/^struct equal_to {$/;"	s	namespace:std	file:
equivalent	std-headers/system_error	/^    virtual bool equivalent(const std::error_code& code,$/;"	p	class:std::error_category	typeref:typename:bool	file:
equivalent	std-headers/system_error	/^    virtual bool equivalent(int code,$/;"	p	class:std::error_category	typeref:typename:bool	file:
erase	std-headers/deque	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::deque	typeref:typename:iterator	file:
erase	std-headers/deque	/^    iterator erase(const_iterator pos);$/;"	p	class:std::deque	typeref:typename:iterator	file:
erase	std-headers/deque	/^    iterator erase(iterator first, iterator last);$/;"	p	class:std::deque	typeref:typename:iterator	file:
erase	std-headers/deque	/^    iterator erase(iterator pos);$/;"	p	class:std::deque	typeref:typename:iterator	file:
erase	std-headers/list	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::list	typeref:typename:iterator	file:
erase	std-headers/list	/^    iterator erase(const_iterator pos);$/;"	p	class:std::list	typeref:typename:iterator	file:
erase	std-headers/list	/^    iterator erase(iterator first, iterator last);$/;"	p	class:std::list	typeref:typename:iterator	file:
erase	std-headers/list	/^    iterator erase(iterator pos);$/;"	p	class:std::list	typeref:typename:iterator	file:
erase	std-headers/map	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::map	typeref:typename:iterator	file:
erase	std-headers/map	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
erase	std-headers/map	/^    iterator erase(const_iterator pos);$/;"	p	class:std::map	typeref:typename:iterator	file:
erase	std-headers/map	/^    iterator erase(const_iterator pos);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
erase	std-headers/map	/^    size_type erase(const key_type& key);$/;"	p	class:std::map	typeref:typename:size_type	file:
erase	std-headers/map	/^    size_type erase(const key_type& key);$/;"	p	class:std::multimap	typeref:typename:size_type	file:
erase	std-headers/map	/^    void erase(iterator first, iterator last);$/;"	p	class:std::map	typeref:typename:void	file:
erase	std-headers/map	/^    void erase(iterator first, iterator last);$/;"	p	class:std::multimap	typeref:typename:void	file:
erase	std-headers/map	/^    void erase(iterator pos);$/;"	p	class:std::map	typeref:typename:void	file:
erase	std-headers/map	/^    void erase(iterator pos);$/;"	p	class:std::multimap	typeref:typename:void	file:
erase	std-headers/set	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
erase	std-headers/set	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::set	typeref:typename:iterator	file:
erase	std-headers/set	/^    iterator erase(const_iterator pos);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
erase	std-headers/set	/^    iterator erase(const_iterator pos);$/;"	p	class:std::set	typeref:typename:iterator	file:
erase	std-headers/set	/^    size_type erase(const key_type& key);$/;"	p	class:std::multiset	typeref:typename:size_type	file:
erase	std-headers/set	/^    size_type erase(const key_type& key);$/;"	p	class:std::set	typeref:typename:size_type	file:
erase	std-headers/set	/^    void erase(iterator first, iterator last);$/;"	p	class:std::multiset	typeref:typename:void	file:
erase	std-headers/set	/^    void erase(iterator first, iterator last);$/;"	p	class:std::set	typeref:typename:void	file:
erase	std-headers/set	/^    void erase(iterator pos);$/;"	p	class:std::multiset	typeref:typename:void	file:
erase	std-headers/set	/^    void erase(iterator pos);$/;"	p	class:std::set	typeref:typename:void	file:
erase	std-headers/string	/^    basic_string& erase(size_type index = 0, size_type count = npos);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
erase	std-headers/string	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
erase	std-headers/string	/^    iterator erase(const_iterator pos);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
erase	std-headers/string	/^    iterator erase(iterator first, iterator last);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
erase	std-headers/string	/^    iterator erase(iterator pos);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
erase	std-headers/unordered_map	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
erase	std-headers/unordered_map	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
erase	std-headers/unordered_map	/^    iterator erase(const_iterator pos);$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
erase	std-headers/unordered_map	/^    iterator erase(const_iterator pos);$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
erase	std-headers/unordered_map	/^    size_type erase(const key_type& key);$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
erase	std-headers/unordered_map	/^    size_type erase(const key_type& key);$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
erase	std-headers/unordered_set	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
erase	std-headers/unordered_set	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
erase	std-headers/unordered_set	/^    iterator erase(const_iterator pos);$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
erase	std-headers/unordered_set	/^    iterator erase(const_iterator pos);$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
erase	std-headers/unordered_set	/^    size_type erase(const key_type& key);$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
erase	std-headers/unordered_set	/^    size_type erase(const key_type& key);$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
erase	std-headers/vector	/^    iterator erase(const_iterator first, const_iterator last);$/;"	p	class:std::vector	typeref:typename:iterator	file:
erase	std-headers/vector	/^    iterator erase(const_iterator pos);$/;"	p	class:std::vector	typeref:typename:iterator	file:
erase	std-headers/vector	/^    iterator erase(iterator first, iterator last);$/;"	p	class:std::vector	typeref:typename:iterator	file:
erase	std-headers/vector	/^    iterator erase(iterator pos);$/;"	p	class:std::vector	typeref:typename:iterator	file:
erase_after	std-headers/forward_list	/^    iterator erase_after(const_iterator first, const_iterator last);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
erase_after	std-headers/forward_list	/^    iterator erase_after(const_iterator pos);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
erase_event	std-headers/ios	/^        erase_event,$/;"	e	enum:std::ios_base::event	file:
erf	std-headers/cmath	/^double      erf(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
erf	std-headers/cmath	/^float       erf(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
erf	std-headers/cmath	/^long double erf(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
erfc	std-headers/cmath	/^double      erfc(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
erfc	std-headers/cmath	/^float       erfc(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
erfc	std-headers/cmath	/^long double erfc(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
errc	std-headers/system_error	/^enum class errc {$/;"	g	namespace:std	file:
error	std-headers/locale	/^        error,$/;"	e	enum:std::codecvt_base::result	file:
error_backref	std-headers/regex	/^constexpr error_type error_backref;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_badbrace	std-headers/regex	/^constexpr error_type error_badbrace;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_badrepeat	std-headers/regex	/^constexpr error_type error_badrepeat;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_brace	std-headers/regex	/^constexpr error_type error_brace;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_brack	std-headers/regex	/^constexpr error_type error_brack;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_category	std-headers/system_error	/^    constexpr error_category();$/;"	p	class:std::error_category	file:
error_category	std-headers/system_error	/^    error_category(const error_category& other) = delete;$/;"	p	class:std::error_category	file:
error_category	std-headers/system_error	/^class error_category {$/;"	c	namespace:std	file:
error_code	std-headers/system_error	/^    error_code();$/;"	p	class:std::error_code	file:
error_code	std-headers/system_error	/^    error_code(ErrorCodeEnum e);$/;"	p	class:std::error_code	file:
error_code	std-headers/system_error	/^    error_code(int ec, const error_category& ecat);$/;"	p	class:std::error_code	file:
error_code	std-headers/system_error	/^class error_code {$/;"	c	namespace:std	file:
error_collate	std-headers/regex	/^constexpr error_type error_collate;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_complexity	std-headers/regex	/^constexpr error_type error_complexity;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_condition	std-headers/system_error	/^    error_condition();$/;"	p	class:std::error_condition	file:
error_condition	std-headers/system_error	/^    error_condition(ErrorConditionEnum e);$/;"	p	class:std::error_condition	file:
error_condition	std-headers/system_error	/^    error_condition(const error_condition& other);$/;"	p	class:std::error_condition	file:
error_condition	std-headers/system_error	/^    error_condition(int val, const error_category& cat);$/;"	p	class:std::error_condition	file:
error_condition	std-headers/system_error	/^class error_condition {$/;"	c	namespace:std	file:
error_ctype	std-headers/regex	/^constexpr error_type error_ctype;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_escape	std-headers/regex	/^constexpr error_type error_escape;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_paren	std-headers/regex	/^constexpr error_type error_paren;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_range	std-headers/regex	/^constexpr error_type error_range;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_space	std-headers/regex	/^constexpr error_type error_space;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_stack	std-headers/regex	/^constexpr error_type error_stack;$/;"	v	namespace:std::regex_constants	typeref:typename:error_type
error_type	std-headers/regex	/^typedef int error_type; \/\/ actually unspecified$/;"	t	namespace:std::regex_constants	typeref:typename:int	file:
event	std-headers/ios	/^    enum event {$/;"	g	class:std::ios_base	file:
event_callback	std-headers/ios	/^    typedef void (*event_callback)(event type, ios_base& ios, int index);$/;"	t	class:std::ios_base	typeref:typename:void (*)(event type,ios_base & ios,int index)	file:
exa	std-headers/ratio	/^typedef ratio<      1000000000000000000, 1> exa;$/;"	t	namespace:std	typeref:typename:ratio<1000000000000000000,1>	file:
exception	std-headers/exception	/^    exception();$/;"	p	class:std::exception	file:
exception	std-headers/exception	/^    exception(const exception& other);$/;"	p	class:std::exception	file:
exception	std-headers/exception	/^class exception {$/;"	c	namespace:std	file:
exception_ptr	std-headers/exception	/^typedef void* exception_ptr; \/\/ actually unspecified$/;"	t	namespace:std	typeref:typename:void *	file:
exceptions	std-headers/ios	/^    iostate exceptions() const;$/;"	p	class:std::basic_ios	typeref:typename:iostate	file:
exceptions	std-headers/ios	/^    void exceptions(iostate except);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
exchange	std-headers/atomic	/^    T exchange(T desired, std::memory_order order = std::memory_order_seq_cst) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
exchange	std-headers/atomic	/^    T exchange(T desired, std::memory_order order = std::memory_order_seq_cst);$/;"	p	struct:std::atomic	typeref:typename:T	file:
exchange	std-headers/utility	/^T exchange(T& obj, U && new_value);$/;"	p	namespace:std	typeref:typename:T	file:
executable_format_error	std-headers/system_error	/^    executable_format_error,            \/\/  ENOEXEC$/;"	e	enum:std::errc	file:
exit	std-headers/cstdlib	/^void exit(int exit_code);$/;"	p	namespace:std	typeref:typename:void	file:
exp	std-headers/cmath	/^double      exp(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
exp	std-headers/cmath	/^float       exp(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
exp	std-headers/cmath	/^long double exp(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
exp	std-headers/complex	/^complex<T> exp(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
exp	std-headers/valarray	/^valarray<T> exp(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
exp2	std-headers/cmath	/^double      exp2(double n);$/;"	p	namespace:std	typeref:typename:double	file:
exp2	std-headers/cmath	/^float       exp2(float n);$/;"	p	namespace:std	typeref:typename:float	file:
exp2	std-headers/cmath	/^long double exp2(long double n);$/;"	p	namespace:std	typeref:typename:long double	file:
expired	std-headers/memory	/^    bool expired() const;$/;"	p	class:std::weak_ptr	typeref:typename:bool	file:
expm1	std-headers/cmath	/^double      expm1(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
expm1	std-headers/cmath	/^float       expm1(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
expm1	std-headers/cmath	/^long double expm1(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
exponential_distribution	std-headers/random	/^    explicit exponential_distribution(RealType lambda = 1.0);$/;"	p	class:std::exponential_distribution	file:
exponential_distribution	std-headers/random	/^    explicit exponential_distribution(const param_type& params);$/;"	p	class:std::exponential_distribution	file:
exponential_distribution	std-headers/random	/^class exponential_distribution {$/;"	c	namespace:std	file:
extended	std-headers/regex	/^constexpr syntax_option_type extended;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
extent	std-headers/type_traits	/^template<class T, unsigned I = 0> struct extent : integral_constant<size_t, 0> {};$/;"	s	namespace:std	file:
extern_type	std-headers/locale	/^    typedef ExternT extern_type;$/;"	t	class:std::codecvt	typeref:typename:ExternT	file:
extreme_value_distribution	std-headers/random	/^    explicit extreme_value_distribution(RealType a = 0.0, RealType b = 1.0);$/;"	p	class:std::extreme_value_distribution	file:
extreme_value_distribution	std-headers/random	/^    explicit extreme_value_distribution(const param_type& params);$/;"	p	class:std::extreme_value_distribution	file:
extreme_value_distribution	std-headers/random	/^class extreme_value_distribution {$/;"	c	namespace:std	file:
fabs	std-headers/cmath	/^double      fabs(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
fabs	std-headers/cmath	/^float       fabs(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
fabs	std-headers/cmath	/^long double fabs(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
facet	std-headers/locale	/^        explicit facet(std::size_t refs = 0);$/;"	p	class:std::locale::facet	file:
facet	std-headers/locale	/^    class facet {$/;"	c	class:std::locale	file:
fail	std-headers/ios	/^    bool fail() const;$/;"	p	class:std::basic_ios	typeref:typename:bool	file:
failbit	std-headers/ios	/^    static constexpr iostate failbit;$/;"	m	class:std::ios_base	typeref:typename:iostate	file:
failed	std-headers/iterator	/^    bool failed() const;$/;"	p	class:std::ostreambuf_iterator	typeref:typename:bool	file:
failure	std-headers/ios	/^        explicit failure(const char* message,$/;"	p	class:std::ios_base::failure	file:
failure	std-headers/ios	/^        explicit failure(const std::string& message);$/;"	p	class:std::ios_base::failure	file:
failure	std-headers/ios	/^        explicit failure(const std::string& message,$/;"	p	class:std::ios_base::failure	file:
failure	std-headers/ios	/^    class failure : public exception {$/;"	c	class:std::ios_base	file:
failure	std-headers/ios	/^    class failure : public system_error {$/;"	c	class:std::ios_base	file:
false_type	std-headers/type_traits	/^typedef integral_constant<bool, false> false_type;$/;"	t	namespace:std	typeref:typename:integral_constant<bool,false>	file:
falsename	std-headers/locale	/^    string_type falsename() const;$/;"	p	class:std::numpunct	typeref:typename:string_type	file:
fclose	std-headers/cstdio	/^int fclose(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
fdim	std-headers/cmath	/^double      fdim(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
fdim	std-headers/cmath	/^float       fdim(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
fdim	std-headers/cmath	/^long double fdim(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
feclearexcept	std-headers/cfenv	/^int feclearexcept(int excepts);$/;"	p	namespace:std	typeref:typename:int	file:
fegetenv	std-headers/cfenv	/^int fegetenv(fenv_t* envp);$/;"	p	namespace:std	typeref:typename:int	file:
fegetexceptflag	std-headers/cfenv	/^int fegetexceptflag(fexcept_t* flagp, int excepts);$/;"	p	namespace:std	typeref:typename:int	file:
fegetround	std-headers/cfenv	/^int fegetround();$/;"	p	namespace:std	typeref:typename:int	file:
feholdexcept	std-headers/cfenv	/^int feholdexcept(fenv_t* envp);$/;"	p	namespace:std	typeref:typename:int	file:
femto	std-headers/ratio	/^typedef ratio<1,          1000000000000000> femto;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000000000000>	file:
feof	std-headers/cstdio	/^int feof(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
feraiseexcept	std-headers/cfenv	/^int feraiseexcept(int excepts);$/;"	p	namespace:std	typeref:typename:int	file:
ferror	std-headers/cstdio	/^int ferror(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
fesetenv	std-headers/cfenv	/^int fesetenv(const fenv_t* envp);$/;"	p	namespace:std	typeref:typename:int	file:
fesetexceptflag	std-headers/cfenv	/^int fesetexceptflag(const fexcept_t* flagp, int excepts);$/;"	p	namespace:std	typeref:typename:int	file:
fesetround	std-headers/cfenv	/^int fesetround(int round);$/;"	p	namespace:std	typeref:typename:int	file:
fetch_add	std-headers/atomic	/^    T fetch_add(T arg,$/;"	p	struct:std::atomic	typeref:typename:T	file:
fetch_add	std-headers/atomic	/^    T* fetch_add(std::ptrdiff_t arg,$/;"	p	struct:std::atomic	typeref:typename:T *	file:
fetch_and	std-headers/atomic	/^    T fetch_and(T arg,$/;"	p	struct:std::atomic	typeref:typename:T	file:
fetch_or	std-headers/atomic	/^    T fetch_or(T arg,$/;"	p	struct:std::atomic	typeref:typename:T	file:
fetch_sub	std-headers/atomic	/^    T fetch_sub(T arg,$/;"	p	struct:std::atomic	typeref:typename:T	file:
fetch_sub	std-headers/atomic	/^    T* fetch_sub(std::ptrdiff_t arg,$/;"	p	struct:std::atomic	typeref:typename:T *	file:
fetch_xor	std-headers/atomic	/^    T fetch_xor(T arg,$/;"	p	struct:std::atomic	typeref:typename:T	file:
fetestexcept	std-headers/cfenv	/^int fetestexcept(int excepts);$/;"	p	namespace:std	typeref:typename:int	file:
feupdateenv	std-headers/cfenv	/^int feupdateenv(const fenv_t* envp);$/;"	p	namespace:std	typeref:typename:int	file:
fflush	std-headers/cstdio	/^int fflush(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
fgetc	std-headers/cstdio	/^int fgetc(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
fgetpos	std-headers/cstdio	/^int fgetpos(std::FILE* stream, std::fpos_t* pos);$/;"	p	namespace:std	typeref:typename:int	file:
fgets	std-headers/cstdio	/^char* fgets(char* str, int count, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:char *	file:
fgetwc	std-headers/cwchar	/^wint_t fgetwc(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:wint_t	file:
fgetws	std-headers/cwchar	/^wchar_t* fgetws(wchar_t* str, int count, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
field	std-headers/locale	/^        char field[4];$/;"	m	struct:std::money_base::pattern	typeref:typename:char[4]	file:
file_exists	std-headers/system_error	/^    file_exists,                        \/\/  EEXIST$/;"	e	enum:std::errc	file:
file_too_large	std-headers/system_error	/^    file_too_large,                     \/\/  EFBIG$/;"	e	enum:std::errc	file:
filebuf	std-headers/fstream	/^typedef basic_filebuf<char> filebuf;$/;"	t	namespace:std	typeref:typename:basic_filebuf<char>	file:
filebuf	std-headers/iosfwd	/^typedef basic_filebuf<char> filebuf;$/;"	t	namespace:std	typeref:typename:basic_filebuf<char>	file:
filename_too_long	std-headers/system_error	/^    filename_too_long,                  \/\/  ENAMETOOLONG$/;"	e	enum:std::errc	file:
fill	std-headers/algorithm	/^void fill(ForwardIt first, ForwardIt last, const T& value);$/;"	p	namespace:std	typeref:typename:void	file:
fill	std-headers/array	/^    void fill(const T& value);$/;"	p	class:std::array	typeref:typename:void	file:
fill	std-headers/ios	/^    CharT fill() const;$/;"	p	class:std::basic_ios	typeref:typename:CharT	file:
fill	std-headers/ios	/^    CharT fill(CharT ch);$/;"	p	class:std::basic_ios	typeref:typename:CharT	file:
fill_n	std-headers/algorithm	/^OutputIt fill_n(OutputIt first, Size count, const T& value);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
fill_n	std-headers/algorithm	/^void fill_n(OutputIt first, Size count, const T& value);$/;"	p	namespace:std	typeref:typename:void	file:
find	std-headers/algorithm	/^InputIt find(InputIt first, InputIt last, const T& value);$/;"	p	namespace:std	typeref:typename:InputIt	file:
find	std-headers/map	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
find	std-headers/map	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
find	std-headers/map	/^    iterator find(const Key& key);$/;"	p	class:std::map	typeref:typename:iterator	file:
find	std-headers/map	/^    iterator find(const Key& key);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
find	std-headers/map	/^    template<class K> const_iterator find(const K& x) const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
find	std-headers/map	/^    template<class K> const_iterator find(const K& x) const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
find	std-headers/map	/^    template<class K> iterator find(const K& x);$/;"	p	class:std::map	typeref:typename:iterator	file:
find	std-headers/map	/^    template<class K> iterator find(const K& x);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
find	std-headers/set	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
find	std-headers/set	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
find	std-headers/set	/^    iterator find(const Key& key);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
find	std-headers/set	/^    iterator find(const Key& key);$/;"	p	class:std::set	typeref:typename:iterator	file:
find	std-headers/set	/^    template<class K> const_iterator find(const K& x) const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
find	std-headers/set	/^    template<class K> const_iterator find(const K& x) const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
find	std-headers/set	/^    template<class K> iterator find(const K& x);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
find	std-headers/set	/^    template<class K> iterator find(const K& x);$/;"	p	class:std::set	typeref:typename:iterator	file:
find	std-headers/string	/^    size_type find(CharT ch, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find	std-headers/string	/^    size_type find(const CharT* s, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find	std-headers/string	/^    size_type find(const CharT* s, size_type pos, size_type count) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find	std-headers/string	/^    size_type find(const basic_string& str, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find	std-headers/string	/^    static const char_type* find(const char_type* p, size_t count, const char_type& ch);$/;"	p	class:std::char_traits	typeref:typename:const char_type *	file:
find	std-headers/unordered_map	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::unordered_map	typeref:typename:const_iterator	file:
find	std-headers/unordered_map	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_iterator	file:
find	std-headers/unordered_map	/^    iterator find(const Key& key);$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
find	std-headers/unordered_map	/^    iterator find(const Key& key);$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
find	std-headers/unordered_set	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::unordered_multiset	typeref:typename:const_iterator	file:
find	std-headers/unordered_set	/^    const_iterator find(const Key& key) const;$/;"	p	class:std::unordered_set	typeref:typename:const_iterator	file:
find	std-headers/unordered_set	/^    iterator find(const Key& key);$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
find	std-headers/unordered_set	/^    iterator find(const Key& key);$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
find_end	std-headers/algorithm	/^ForwardIt1 find_end(ForwardIt1 first, ForwardIt1 last,$/;"	p	namespace:std	typeref:typename:ForwardIt1	file:
find_first_not_of	std-headers/string	/^    size_type find_first_not_of(CharT ch, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_not_of	std-headers/string	/^    size_type find_first_not_of(const CharT* s, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_not_of	std-headers/string	/^    size_type find_first_not_of(const CharT* s, size_type pos, size_type count) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_not_of	std-headers/string	/^    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_of	std-headers/algorithm	/^ForwardIt1 find_first_of(ForwardIt1 first, ForwardIt1 last,$/;"	p	namespace:std	typeref:typename:ForwardIt1	file:
find_first_of	std-headers/algorithm	/^InputIt find_first_of(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:InputIt	file:
find_first_of	std-headers/string	/^    size_type find_first_of(CharT ch, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_of	std-headers/string	/^    size_type find_first_of(const CharT* s, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_of	std-headers/string	/^    size_type find_first_of(const CharT* s, size_type pos, size_type count) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_first_of	std-headers/string	/^    size_type find_first_of(const basic_string& str, size_type pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_if	std-headers/algorithm	/^InputIt find_if(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:InputIt	file:
find_if_not	std-headers/algorithm	/^InputIt find_if_not(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:InputIt	file:
find_last_not_of	std-headers/string	/^    size_type find_last_not_of(CharT ch, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_not_of	std-headers/string	/^    size_type find_last_not_of(const CharT* s, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_not_of	std-headers/string	/^    size_type find_last_not_of(const CharT* s, size_type pos, size_type count) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_not_of	std-headers/string	/^    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_of	std-headers/string	/^    size_type find_last_of(CharT ch, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_of	std-headers/string	/^    size_type find_last_of(const CharT* s, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_of	std-headers/string	/^    size_type find_last_of(const CharT* s, size_type pos, size_type count) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
find_last_of	std-headers/string	/^    size_type find_last_of(const basic_string& str, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
first	std-headers/utility	/^    T1 first;$/;"	m	struct:std::pair	typeref:typename:T1	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::bit_and	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::bit_or	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::bit_xor	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::divides	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::equal_to	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::greater	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::greater_equal	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::less	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::less_equal	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::logical_and	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::logical_or	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::minus	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::modulus	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::multiplies	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::not_equal_to	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef T first_argument_type;$/;"	t	struct:std::plus	typeref:typename:T	file:
first_argument_type	std-headers/functional	/^    typedef typename Predicate::first_argument_type first_argument_type;$/;"	t	struct:std::binary_negate	typeref:typename:Predicate::first_argument_type	file:
first_argument_type	std-headers/functional	/^    typedef void first_argument_type;$/;"	t	class:std::reference_wrapper	typeref:typename:void	file:
first_argument_type	std-headers/memory	/^    typedef void first_argument_type; \/\/ actually ether shared_ptr<T> or weak_ptr<T>$/;"	t	struct:std::owner_less	typeref:typename:void	file:
first_type	std-headers/utility	/^    typedef T1 first_type;$/;"	t	struct:std::pair	typeref:typename:T1	file:
fisher_f_distribution	std-headers/random	/^    explicit fisher_f_distribution(RealType m = 1.0, RealType n = 1.0);$/;"	p	class:std::fisher_f_distribution	file:
fisher_f_distribution	std-headers/random	/^    explicit fisher_f_distribution(const param_type& params);$/;"	p	class:std::fisher_f_distribution	file:
fisher_f_distribution	std-headers/random	/^class fisher_f_distribution {$/;"	c	namespace:std	file:
fixed	std-headers/ios	/^    static constexpr fmtflags fixed;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
fixed	std-headers/ios	/^ios_base& fixed(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
flag_type	std-headers/regex	/^    typedef regex_constants::syntax_option_type flag_type;$/;"	t	class:std::basic_regex	typeref:typename:regex_constants::syntax_option_type	file:
flags	std-headers/ios	/^    fmtflags flags() const;$/;"	p	class:std::ios_base	typeref:typename:fmtflags	file:
flags	std-headers/ios	/^    fmtflags flags(fmtflags flags);$/;"	p	class:std::ios_base	typeref:typename:fmtflags	file:
flags	std-headers/regex	/^    flag_type flags() const;$/;"	p	class:std::basic_regex	typeref:typename:flag_type	file:
flip	std-headers/bitset	/^        reference& flip();$/;"	p	class:std::bitset::reference	typeref:typename:reference &	file:
flip	std-headers/bitset	/^    bitset<N>& flip();$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
flip	std-headers/bitset	/^    bitset<N>& flip(size_t pos);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
float_denorm_style	std-headers/limits	/^enum float_denorm_style {$/;"	g	namespace:std	file:
float_round_style	std-headers/limits	/^enum float_round_style {$/;"	g	namespace:std	file:
float_t	std-headers/cmath	/^typedef float float_t;$/;"	t	namespace:std	typeref:typename:float	file:
floatfield	std-headers/ios	/^    static constexpr fmtflags floatfield;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
floor	std-headers/cmath	/^double      floor(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
floor	std-headers/cmath	/^float       floor(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
floor	std-headers/cmath	/^long double floor(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
flush	std-headers/ostream	/^    basic_ostream& flush();$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
flush	std-headers/ostream	/^std::basic_ostream<CharT, Traits>& flush(std::basic_ostream<CharT, Traits>& os);$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
fma	std-headers/cmath	/^double      fma(double x, double y, double z);$/;"	p	namespace:std	typeref:typename:double	file:
fma	std-headers/cmath	/^float       fma(float x, float y, float z);$/;"	p	namespace:std	typeref:typename:float	file:
fma	std-headers/cmath	/^long double fma(long double x, long double y, long double z);$/;"	p	namespace:std	typeref:typename:long double	file:
fmax	std-headers/cmath	/^double      fmax(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
fmax	std-headers/cmath	/^float       fmax(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
fmax	std-headers/cmath	/^long double fmax(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
fmin	std-headers/cmath	/^double      fmin(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
fmin	std-headers/cmath	/^float       fmin(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
fmin	std-headers/cmath	/^long double fmin(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
fmod	std-headers/cmath	/^double      fmod(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
fmod	std-headers/cmath	/^float       fmod(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
fmod	std-headers/cmath	/^long double fmod(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
fmtflags	std-headers/ios	/^    typedef int fmtflags; \/\/ actually impl-defined$/;"	t	class:std::ios_base	typeref:typename:int	file:
fopen	std-headers/cstdio	/^std::FILE* fopen(const char* filename, const char* mode);$/;"	p	namespace:std	typeref:typename:std::FILE *	file:
for_each	std-headers/algorithm	/^UnaryFunction for_each(InputIt first, InputIt last, UnaryFunction f);$/;"	p	namespace:std	typeref:typename:UnaryFunction	file:
format	std-headers/regex	/^    OutputIter format(OutputIt out,$/;"	p	class:std::match_results	typeref:typename:OutputIter	file:
format	std-headers/regex	/^    format(const std::basic_string<char_type, ST, SA>& fmt,$/;"	p	class:std::match_results	typeref:typename:std::basic_string<char_type,ST,SA>	file:
format	std-headers/regex	/^    string_type format(const char_type* fmt_s,$/;"	p	class:std::match_results	typeref:typename:string_type	file:
format_default	std-headers/regex	/^constexpr match_flag_type format_default = 0;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
format_first_only	std-headers/regex	/^constexpr match_flag_type format_first_only;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
format_no_copy	std-headers/regex	/^constexpr match_flag_type format_no_copy;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
format_sed	std-headers/regex	/^constexpr match_flag_type format_sed;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
forward	std-headers/utility	/^T&& forward(typename std::remove_reference<T>::type& t);$/;"	p	namespace:std	typeref:typename:T &&	file:
forward	std-headers/utility	/^T&& forward(typename std::remove_reference<T>::type&& t);$/;"	p	namespace:std	typeref:typename:T &&	file:
forward_as_tuple	std-headers/tuple	/^tuple < Types&& ... > forward_as_tuple(Types&& ... args);$/;"	p	namespace:std	typeref:typename:tuple<Types &&...>	file:
forward_iterator_tag	std-headers/iterator	/^struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	file:
forward_list	std-headers/forward_list	/^    explicit forward_list(const Allocator& alloc = Allocator());$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    explicit forward_list(const Allocator&);$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    explicit forward_list(size_type n);$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    explicit forward_list(size_type n, const Allocator& alloc = Allocator());$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list();$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(InputIt first, InputIt last,$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(const forward_list& other);$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(const forward_list& other, const Allocator& alloc);$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(forward_list&& other);$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(forward_list&& other, const Allocator& alloc);$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(size_type count,$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^    forward_list(std::initializer_list<T> init,$/;"	p	class:std::forward_list	file:
forward_list	std-headers/forward_list	/^class forward_list {$/;"	c	namespace:std	file:
fpclassify	std-headers/cmath	/^int fpclassify(double arg);$/;"	p	namespace:std	typeref:typename:int	file:
fpclassify	std-headers/cmath	/^int fpclassify(float arg);$/;"	p	namespace:std	typeref:typename:int	file:
fpclassify	std-headers/cmath	/^int fpclassify(long double arg);$/;"	p	namespace:std	typeref:typename:int	file:
fpos	std-headers/string	/^    fpos(streamoff = streamoff());$/;"	p	class:std::fpos	file:
fpos	std-headers/string	/^class fpos {$/;"	c	namespace:std	file:
fprintf	std-headers/cstdio	/^int fprintf(std::FILE* stream, const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
fputc	std-headers/cstdio	/^int fputc(int ch, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
fputs	std-headers/cstdio	/^int fputs(const char* str, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
fputwc	std-headers/cwchar	/^wint_t fputwc(wchar_t ch, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:wint_t	file:
fputws	std-headers/cwchar	/^int fputws(const wchar_t* str, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
frac_digits	std-headers/clocale	/^    char frac_digits;$/;"	m	struct:std::lconv	typeref:typename:char	file:
frac_digits	std-headers/locale	/^    int frac_digits() const;$/;"	p	class:std::moneypunct	typeref:typename:int	file:
fread	std-headers/cstdio	/^std::size_t fread(void* buffer, std::size_t size, std::size_t count, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
free	std-headers/cstdlib	/^void free(void* ptr);$/;"	p	namespace:std	typeref:typename:void	file:
freopen	std-headers/cstdio	/^std::FILE* freopen(const char* filename, const char* mode, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:std::FILE *	file:
frexp	std-headers/cmath	/^double      frexp(double arg, int* exp);$/;"	p	namespace:std	typeref:typename:double	file:
frexp	std-headers/cmath	/^float       frexp(float arg, int* exp);$/;"	p	namespace:std	typeref:typename:float	file:
frexp	std-headers/cmath	/^long double frexp(long double arg, int* exp);$/;"	p	namespace:std	typeref:typename:long double	file:
from_bytes	std-headers/locale	/^    wide_string from_bytes(char byte);$/;"	p	class:std::wstring_convert	typeref:typename:wide_string	file:
from_bytes	std-headers/locale	/^    wide_string from_bytes(const byte_string& str);$/;"	p	class:std::wstring_convert	typeref:typename:wide_string	file:
from_bytes	std-headers/locale	/^    wide_string from_bytes(const char* first, const char* last);$/;"	p	class:std::wstring_convert	typeref:typename:wide_string	file:
from_bytes	std-headers/locale	/^    wide_string from_bytes(const char* ptr);$/;"	p	class:std::wstring_convert	typeref:typename:wide_string	file:
from_time_t	std-headers/chrono	/^    static std::chrono::system_clock::time_point from_time_t(std::time_t t);$/;"	p	class:std::chrono::system_clock	typeref:typename:std::chrono::system_clock::time_point	file:
front	std-headers/array	/^    const_reference front() const;$/;"	p	class:std::array	typeref:typename:const_reference	file:
front	std-headers/array	/^    reference       front();$/;"	p	class:std::array	typeref:typename:reference	file:
front	std-headers/deque	/^    const_reference front() const;$/;"	p	class:std::deque	typeref:typename:const_reference	file:
front	std-headers/deque	/^    reference       front();$/;"	p	class:std::deque	typeref:typename:reference	file:
front	std-headers/forward_list	/^    const_reference front() const;$/;"	p	class:std::forward_list	typeref:typename:const_reference	file:
front	std-headers/forward_list	/^    reference       front();$/;"	p	class:std::forward_list	typeref:typename:reference	file:
front	std-headers/list	/^    const_reference front() const;$/;"	p	class:std::list	typeref:typename:const_reference	file:
front	std-headers/list	/^    reference       front();$/;"	p	class:std::list	typeref:typename:reference	file:
front	std-headers/queue	/^    const_reference front() const;$/;"	p	class:std::queue	typeref:typename:const_reference	file:
front	std-headers/queue	/^    reference front();$/;"	p	class:std::queue	typeref:typename:reference	file:
front	std-headers/string	/^    CharT& front();$/;"	p	class:std::basic_string	typeref:typename:CharT &	file:
front	std-headers/string	/^    const CharT& front() const;$/;"	p	class:std::basic_string	typeref:typename:const CharT &	file:
front	std-headers/vector	/^    const_reference front() const;$/;"	p	class:std::vector	typeref:typename:const_reference	file:
front	std-headers/vector	/^    reference       front();$/;"	p	class:std::vector	typeref:typename:reference	file:
front_insert_iterator	std-headers/iterator	/^    explicit front_insert_iterator(Container& c);$/;"	p	class:std::front_insert_iterator	file:
front_insert_iterator	std-headers/iterator	/^class front_insert_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
front_inserter	std-headers/iterator	/^std::front_insert_iterator<Container> front_inserter(Container& c);$/;"	p	namespace:std	typeref:typename:std::front_insert_iterator<Container>	file:
fscanf	std-headers/cstdio	/^int fscanf(std::FILE* stream, const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
fseek	std-headers/cstdio	/^int fseek(std::FILE* stream, long offset, int origin);$/;"	p	namespace:std	typeref:typename:int	file:
fsetpos	std-headers/cstdio	/^int fsetpos(std::FILE* stream, const std::fpos_t* pos);$/;"	p	namespace:std	typeref:typename:int	file:
fstream	std-headers/fstream	/^typedef basic_fstream<char> fstream;$/;"	t	namespace:std	typeref:typename:basic_fstream<char>	file:
fstream	std-headers/iosfwd	/^typedef basic_fstream<char> fstream;$/;"	t	namespace:std	typeref:typename:basic_fstream<char>	file:
ftell	std-headers/cstdio	/^long ftell(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:long	file:
function	std-headers/functional	/^    function();$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(F f);$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(const function& other);$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(function&& other);$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(std::allocator_arg_t, const Alloc& alloc);$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(std::allocator_arg_t, const Alloc& alloc, F f);$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(std::allocator_arg_t, const Alloc& alloc,$/;"	p	class:std::function	file:
function	std-headers/functional	/^    function(std::nullptr_t);$/;"	p	class:std::function	file:
function	std-headers/functional	/^class function<R(Args...)> {$/;"	c	namespace:std	file:
function_not_supported	std-headers/system_error	/^    function_not_supported,             \/\/  ENOSYS$/;"	e	enum:std::errc	file:
future	std-headers/future	/^    future();$/;"	p	class:std::future	file:
future	std-headers/future	/^    future(const future& other) = delete;$/;"	p	class:std::future	file:
future	std-headers/future	/^    future(future&& other);$/;"	p	class:std::future	file:
future	std-headers/future	/^class future { \/\/ SIMPLIFIED: removed T& and void specializations$/;"	c	namespace:std	file:
future_already_retrieved	std-headers/future	/^    future_already_retrieved,$/;"	e	enum:std::future_errc	file:
future_category	std-headers/future	/^const std::error_category& future_category();$/;"	p	namespace:std	typeref:typename:const std::error_category &	file:
future_errc	std-headers/future	/^enum class future_errc {$/;"	g	namespace:std	file:
future_error	std-headers/future	/^    future_error(std::error_code ec);$/;"	p	class:std::future_error	file:
future_error	std-headers/future	/^class future_error : public logic_error {$/;"	c	namespace:std	file:
future_status	std-headers/future	/^enum class future_status {$/;"	g	namespace:std	file:
fwide	std-headers/cstdio	/^int fwide(std::FILE* stream, int mode);$/;"	p	namespace:std	typeref:typename:int	file:
fwprintf	std-headers/cwchar	/^int fwprintf(std::FILE* stream, const wchar_t* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
fwrite	std-headers/cstdio	/^std::size_t fwrite(const void* buffer, std::size_t size, std::size_t count, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
fwscanf	std-headers/cwchar	/^int fwscanf(std::FILE* stream, const wchar_t* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
gamma_distribution	std-headers/random	/^    explicit gamma_distribution(RealType alpha = 1.0, RealType beta = 1.0);$/;"	p	class:std::gamma_distribution	file:
gamma_distribution	std-headers/random	/^    explicit gamma_distribution(const param_type& params);$/;"	p	class:std::gamma_distribution	file:
gamma_distribution	std-headers/random	/^class gamma_distribution {$/;"	c	namespace:std	file:
gbump	std-headers/streambuf	/^    void gbump(int n);$/;"	p	class:std::basic_streambuf	typeref:typename:void	file:
gcount	std-headers/istream	/^    std::streamsize gcount() const;$/;"	p	class:std::basic_istream	typeref:typename:std::streamsize	file:
generate	std-headers/algorithm	/^void generate(ForwardIt first, ForwardIt last, Generator g);$/;"	p	namespace:std	typeref:typename:void	file:
generate	std-headers/random	/^    void generate(RandomIt begin, RandomIt end);$/;"	p	class:std::seed_seq	typeref:typename:void	file:
generate_canonical	std-headers/random	/^RealType generate_canonical(Generator& g);$/;"	p	namespace:std	typeref:typename:RealType	file:
generate_header	std-headers/codecvt	/^    generate_header = 2,$/;"	e	enum:std::codecvt_mode	file:
generate_n	std-headers/algorithm	/^OutputIt generate_n(OutputIt first, Size count, Generator g);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
generate_n	std-headers/algorithm	/^void generate_n(OutputIt first, Size count, Generator g);$/;"	p	namespace:std	typeref:typename:void	file:
generic_category	std-headers/system_error	/^const std::error_category& generic_category();$/;"	p	namespace:std	typeref:typename:const std::error_category &	file:
geometric_distribution	std-headers/random	/^    explicit geometric_distribution(const param_type& params);$/;"	p	class:std::geometric_distribution	file:
geometric_distribution	std-headers/random	/^    explicit geometric_distribution(double p = 0.5);$/;"	p	class:std::geometric_distribution	file:
geometric_distribution	std-headers/random	/^class geometric_distribution {$/;"	c	namespace:std	file:
get	std-headers/array	/^constexpr T& get(array<T, N>& a);$/;"	p	namespace:std	typeref:typename:T &	file:
get	std-headers/array	/^constexpr T&& get(array<T, N>&& a);$/;"	p	namespace:std	typeref:typename:T &&	file:
get	std-headers/array	/^constexpr const T& get(const array<T, N>& a);$/;"	p	namespace:std	typeref:typename:const T &	file:
get	std-headers/functional	/^    T& get() const;$/;"	p	class:std::reference_wrapper	typeref:typename:T &	file:
get	std-headers/future	/^    T get(); \/\/ member only of generic specialization$/;"	p	class:std::future	typeref:typename:T	file:
get	std-headers/future	/^    T get(); \/\/ member only of generic specialization$/;"	p	class:std::shared_future	typeref:typename:T	file:
get	std-headers/future	/^    T& get(); \/\/ member only of T& specialization$/;"	p	class:std::future	typeref:typename:T &	file:
get	std-headers/future	/^    T& get(); \/\/ member only of T& specialization$/;"	p	class:std::shared_future	typeref:typename:T &	file:
get	std-headers/future	/^    void get(); \/\/ member only of void specialization$/;"	p	class:std::future	typeref:typename:void	file:
get	std-headers/future	/^    void get(); \/\/ member only of void specialization$/;"	p	class:std::shared_future	typeref:typename:void	file:
get	std-headers/istream	/^    basic_istream& get(basic_streambuf& strbuf);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
get	std-headers/istream	/^    basic_istream& get(basic_streambuf& strbuf, char_type delim);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
get	std-headers/istream	/^    basic_istream& get(char_type& ch);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
get	std-headers/istream	/^    basic_istream& get(char_type* s, std::streamsize count);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
get	std-headers/istream	/^    basic_istream& get(char_type* s, std::streamsize count, char_type delim);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
get	std-headers/istream	/^    int_type get();$/;"	p	class:std::basic_istream	typeref:typename:int_type	file:
get	std-headers/locale	/^    iter_type get(iter_type beg, iter_type end, bool intl, std::ios_base& str,$/;"	p	class:std::money_get	typeref:typename:iter_type	file:
get	std-headers/locale	/^    iter_type get(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
get	std-headers/locale	/^    iter_type get(iter_type in, iter_type end, std::ios_base& str,$/;"	p	class:std::num_get	typeref:typename:iter_type	file:
get	std-headers/locale	/^    string_type get(catalog cat, int set, int msgid, const string_type& dfault) const;$/;"	p	class:std::messages	typeref:typename:string_type	file:
get	std-headers/memory	/^    T* get() const;$/;"	p	class:std::auto_ptr	typeref:typename:T *	file:
get	std-headers/memory	/^    T* get() const;$/;"	p	class:std::shared_ptr	typeref:typename:T *	file:
get	std-headers/memory	/^    pointer get() const;$/;"	p	class:std::unique_ptr	typeref:typename:pointer	file:
get	std-headers/tuple	/^get(const tuple<Types...>& t);$/;"	p	namespace:std	typeref:typename:std::tuple_element<I,tuple<Types...>>::type const &	file:
get	std-headers/tuple	/^get(tuple<Types...>& t);$/;"	p	namespace:std	typeref:typename:std::tuple_element<I,tuple<Types...>>::type &	file:
get	std-headers/tuple	/^get(tuple<Types...>&& t);$/;"	p	namespace:std	typeref:typename:std::tuple_element<I,tuple<Types...>>::type &&	file:
get	std-headers/utility	/^        get(pair<T1, T2>& p);$/;"	p	namespace:std	typeref:typename:std::tuple_element<I,std::pair<T1,T2>>::type &	file:
get_allocator	std-headers/array	/^    allocator_type get_allocator() const;$/;"	p	class:std::array	typeref:typename:allocator_type	file:
get_allocator	std-headers/deque	/^    allocator_type get_allocator() const;$/;"	p	class:std::deque	typeref:typename:allocator_type	file:
get_allocator	std-headers/forward_list	/^    allocator_type get_allocator() const;$/;"	p	class:std::forward_list	typeref:typename:allocator_type	file:
get_allocator	std-headers/list	/^    allocator_type get_allocator() const;$/;"	p	class:std::list	typeref:typename:allocator_type	file:
get_allocator	std-headers/map	/^    allocator_type get_allocator() const;$/;"	p	class:std::map	typeref:typename:allocator_type	file:
get_allocator	std-headers/map	/^    allocator_type get_allocator() const;$/;"	p	class:std::multimap	typeref:typename:allocator_type	file:
get_allocator	std-headers/regex	/^    allocator_type get_allocator() const;$/;"	p	class:std::match_results	typeref:typename:allocator_type	file:
get_allocator	std-headers/set	/^    allocator_type get_allocator() const;$/;"	p	class:std::multiset	typeref:typename:allocator_type	file:
get_allocator	std-headers/set	/^    allocator_type get_allocator() const;$/;"	p	class:std::set	typeref:typename:allocator_type	file:
get_allocator	std-headers/string	/^    allocator_type get_allocator() const;$/;"	p	class:std::basic_string	typeref:typename:allocator_type	file:
get_allocator	std-headers/unordered_map	/^    allocator_type get_allocator() const;$/;"	p	class:std::unordered_map	typeref:typename:allocator_type	file:
get_allocator	std-headers/unordered_map	/^    allocator_type get_allocator() const;$/;"	p	class:std::unordered_multimap	typeref:typename:allocator_type	file:
get_allocator	std-headers/unordered_set	/^    allocator_type get_allocator() const;$/;"	p	class:std::unordered_multiset	typeref:typename:allocator_type	file:
get_allocator	std-headers/unordered_set	/^    allocator_type get_allocator() const;$/;"	p	class:std::unordered_set	typeref:typename:allocator_type	file:
get_allocator	std-headers/vector	/^    allocator_type get_allocator() const;$/;"	p	class:std::vector	typeref:typename:allocator_type	file:
get_date	std-headers/locale	/^    iter_type get_date(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
get_deleter	std-headers/memory	/^    Deleter& get_deleter();$/;"	p	class:std::unique_ptr	typeref:typename:Deleter &	file:
get_deleter	std-headers/memory	/^    const Deleter& get_deleter() const;$/;"	p	class:std::unique_ptr	typeref:typename:const Deleter &	file:
get_deleter	std-headers/memory	/^Deleter* get_deleter(const std::shared_ptr<T>& p);$/;"	p	namespace:std	typeref:typename:Deleter *	file:
get_future	std-headers/future	/^    std::future<R> get_future();$/;"	p	class:std::packaged_task	typeref:typename:std::future<R>	file:
get_future	std-headers/future	/^    std::future<T> get_future();$/;"	p	class:std::promise	typeref:typename:std::future<T>	file:
get_id	std-headers/thread	/^    id get_id() const;$/;"	p	class:std::thread	typeref:typename:id	file:
get_id	std-headers/thread	/^std::thread::id get_id();$/;"	p	namespace:std::this_thread	typeref:typename:std::thread::id	file:
get_money	std-headers/iomanip	/^__unspecified get_money(MoneyT& mon, bool intl = false);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
get_monthname	std-headers/locale	/^    iter_type get_monthname(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
get_new_handler	std-headers/new	/^std::new_handler get_new_handler();$/;"	p	namespace:std	typeref:typename:std::new_handler	file:
get_pointer_safety	std-headers/memory	/^std::pointer_safety get_pointer_safety();$/;"	p	namespace:std	typeref:typename:std::pointer_safety	file:
get_temporary_buffer	std-headers/memory	/^std::pair<T*, std::ptrdiff_t> get_temporary_buffer(std::ptrdiff_t count);$/;"	p	namespace:std	typeref:typename:std::pair<T *,std::ptrdiff_t>	file:
get_terminate	std-headers/exception	/^std::terminate_handler get_terminate();$/;"	p	namespace:std	typeref:typename:std::terminate_handler	file:
get_time	std-headers/iomanip	/^__unspecified get_time(std::tm* tmb, const CharT* fmt);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
get_time	std-headers/locale	/^    iter_type get_time(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
get_time	std-headers/locale	/^    virtual iter_type get_time(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
get_unexpected	std-headers/exception	/^std::unexpected_handler get_unexpected();$/;"	p	namespace:std	typeref:typename:std::unexpected_handler	file:
get_weekday	std-headers/locale	/^    iter_type get_weekday(iter_type beg, iter_type end, std::ios_base& str,$/;"	p	class:std::time_get	typeref:typename:iter_type	file:
getc	std-headers/cstdio	/^int getc(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
getchar	std-headers/cstdio	/^int getchar();$/;"	p	namespace:std	typeref:typename:int	file:
getenv	std-headers/cstdlib	/^char* getenv(const char* env_var);$/;"	p	namespace:std	typeref:typename:char *	file:
getline	std-headers/istream	/^    basic_istream& getline(char_type* s, std::streamsize count);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
getline	std-headers/istream	/^    basic_istream& getline(char_type* s, std::streamsize count, char_type delim);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
getline	std-headers/string	/^std::basic_istream<CharT, Traits>& getline(std::basic_istream<CharT, Traits>& input,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
getline	std-headers/string	/^std::basic_istream<CharT, Traits>& getline(std::basic_istream<CharT, Traits>&& input,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
getloc	std-headers/ios	/^    locale getloc() const;$/;"	p	class:std::ios_base	typeref:typename:locale	file:
getloc	std-headers/regex	/^    locale_type getloc() const;$/;"	p	class:std::regex_traits	typeref:typename:locale_type	file:
getloc	std-headers/streambuf	/^    locale getloc() const;$/;"	p	class:std::basic_streambuf	typeref:typename:locale	file:
getwc	std-headers/cwchar	/^wint_t getwc(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:wint_t	file:
getwchar	std-headers/cwchar	/^wint_t getwchar();$/;"	p	namespace:std	typeref:typename:wint_t	file:
giga	std-headers/ratio	/^typedef ratio<               1000000000, 1> giga;$/;"	t	namespace:std	typeref:typename:ratio<1000000000,1>	file:
global	std-headers/locale	/^    static locale global(const locale& loc);$/;"	p	class:std::locale	typeref:typename:locale	file:
gmtime	std-headers/ctime	/^std::tm* gmtime(const std::time_t* time);$/;"	p	namespace:std	typeref:typename:std::tm *	file:
good	std-headers/ios	/^    bool good() const;$/;"	p	class:std::basic_ios	typeref:typename:bool	file:
goodbit	std-headers/ios	/^    static constexpr iostate goodbit;$/;"	m	class:std::ios_base	typeref:typename:iostate	file:
gptr	std-headers/streambuf	/^    char_type* gptr() const;$/;"	p	class:std::basic_streambuf	typeref:typename:char_type *	file:
graph	std-headers/locale	/^    static const mask graph;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
greater	std-headers/functional	/^struct greater {$/;"	s	namespace:std	file:
greater_equal	std-headers/functional	/^struct greater_equal {$/;"	s	namespace:std	file:
grep	std-headers/regex	/^constexpr syntax_option_type grep;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
grouping	std-headers/clocale	/^    char* grouping;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
grouping	std-headers/locale	/^    std::string grouping() const;$/;"	p	class:std::moneypunct	typeref:typename:std::string	file:
grouping	std-headers/locale	/^    std::string grouping() const;$/;"	p	class:std::numpunct	typeref:typename:std::string	file:
gslice	std-headers/valarray	/^    gslice();$/;"	p	class:std::gslice	file:
gslice	std-headers/valarray	/^    gslice(const gslice& other);$/;"	p	class:std::gslice	file:
gslice	std-headers/valarray	/^    gslice(std::size_t start, const std::valarray<std::size_t>& sizes,$/;"	p	class:std::gslice	file:
gslice	std-headers/valarray	/^class gslice {$/;"	c	namespace:std	file:
gslice_array	std-headers/valarray	/^    gslice_array() = delete;$/;"	p	class:std::gslice_array	file:
gslice_array	std-headers/valarray	/^    gslice_array(const gslice_array& other);$/;"	p	class:std::gslice_array	file:
gslice_array	std-headers/valarray	/^class gslice_array {$/;"	c	namespace:std	file:
hardware_concurrency	std-headers/thread	/^    static unsigned hardware_concurrency();$/;"	p	class:std::thread	typeref:typename:unsigned	file:
has_denorm	std-headers/limits	/^    static const float_denorm_style has_denorm;$/;"	m	class:std::numeric_limits	typeref:typename:const float_denorm_style	file:
has_denorm_loss	std-headers/limits	/^    static const bool has_denorm_loss;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
has_facet	std-headers/locale	/^const Facet& has_facet(const locale& loc);$/;"	p	namespace:std	typeref:typename:const Facet &	file:
has_infinity	std-headers/limits	/^    static const bool has_infinity;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
has_quiet_NaN	std-headers/limits	/^    static const bool has_quiet_NaN;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
has_signaling_NaN	std-headers/limits	/^    static const bool has_signaling_NaN;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
has_virtual_destructor	std-headers/type_traits	/^template<class T> struct has_virtual_destructor : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
hash	std-headers/functional	/^struct hash {$/;"	s	namespace:std	file:
hash	std-headers/locale	/^    long hash(const CharT* beg, const CharT* end) const;$/;"	p	class:std::collate	typeref:typename:long	file:
hash_code	std-headers/typeindex	/^    size_t hash_code() const;$/;"	p	class:std::type_index	typeref:typename:size_t	file:
hash_code	std-headers/typeinfo	/^    size_t hash_code() const;$/;"	p	class:std::type_info	typeref:typename:size_t	file:
hash_function	std-headers/unordered_map	/^    hasher hash_function() const;$/;"	p	class:std::unordered_map	typeref:typename:hasher	file:
hash_function	std-headers/unordered_map	/^    hasher hash_function() const;$/;"	p	class:std::unordered_multimap	typeref:typename:hasher	file:
hash_function	std-headers/unordered_set	/^    hasher hash_function() const;$/;"	p	class:std::unordered_multiset	typeref:typename:hasher	file:
hash_function	std-headers/unordered_set	/^    hasher hash_function() const;$/;"	p	class:std::unordered_set	typeref:typename:hasher	file:
hasher	std-headers/unordered_map	/^    typedef Hash hasher;$/;"	t	class:std::unordered_map	typeref:typename:Hash	file:
hasher	std-headers/unordered_map	/^    typedef Hash hasher;$/;"	t	class:std::unordered_multimap	typeref:typename:Hash	file:
hasher	std-headers/unordered_set	/^    typedef Hash hasher;$/;"	t	class:std::unordered_multiset	typeref:typename:Hash	file:
hasher	std-headers/unordered_set	/^    typedef Hash hasher;$/;"	t	class:std::unordered_set	typeref:typename:Hash	file:
hecto	std-headers/ratio	/^typedef ratio<                      100, 1> hecto;$/;"	t	namespace:std	typeref:typename:ratio<100,1>	file:
hex	std-headers/ios	/^    static constexpr fmtflags hex;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
hex	std-headers/ios	/^ios_base& hex(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
hexfloat	std-headers/ios	/^ios_base& hexfloat(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
high_resolution_clock	std-headers/chrono	/^class high_resolution_clock {$/;"	c	namespace:std::chrono	file:
host_unreachable	std-headers/system_error	/^    host_unreachable,                   \/\/  EHOSTUNREACH$/;"	e	enum:std::errc	file:
hours	std-headers/chrono	/^typedef duration<int, std::ratio<3600>> hours;$/;"	t	namespace:std::chrono	typeref:typename:duration<int,std::ratio<3600>>	file:
hypot	std-headers/cmath	/^double      hypot(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
hypot	std-headers/cmath	/^float       hypot(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
hypot	std-headers/cmath	/^long double hypot(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
icase	std-headers/regex	/^constexpr syntax_option_type icase;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
id	std-headers/locale	/^        id();$/;"	p	class:std::locale::id	file:
id	std-headers/locale	/^    class id {$/;"	c	class:std::locale	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::codecvt	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::collate	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::ctype	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::messages	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::money_get	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::money_put	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::num_get	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::num_put	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::numpunct	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::time_get	typeref:typename:locale::id	file:
id	std-headers/locale	/^    static locale::id id;$/;"	m	class:std::time_put	typeref:typename:locale::id	file:
id	std-headers/thread	/^        id();$/;"	p	class:std::thread::id	file:
id	std-headers/thread	/^    class id {$/;"	c	class:std::thread	file:
identifier_removed	std-headers/system_error	/^    identifier_removed,                 \/\/  EIDRM$/;"	e	enum:std::errc	file:
ifstream	std-headers/fstream	/^typedef basic_ifstream<char> ifstream;$/;"	t	namespace:std	typeref:typename:basic_ifstream<char>	file:
ifstream	std-headers/iosfwd	/^typedef basic_ifstream<char> ifstream;$/;"	t	namespace:std	typeref:typename:basic_ifstream<char>	file:
ignore	std-headers/istream	/^    basic_istream& ignore(std::streamsize count = 1, int_type delim = Traits::eof());$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
ignore	std-headers/tuple	/^const void* ignore; \/\/ SIMPLIFIED$/;"	v	namespace:std	typeref:typename:const void *
illegal_byte_sequence	std-headers/system_error	/^    illegal_byte_sequence,              \/\/  EILSEQ$/;"	e	enum:std::errc	file:
ilogb	std-headers/cmath	/^int         ilogb(double arg);$/;"	p	namespace:std	typeref:typename:int	file:
ilogb	std-headers/cmath	/^int         ilogb(float arg);$/;"	p	namespace:std	typeref:typename:int	file:
ilogb	std-headers/cmath	/^int         ilogb(long double arg);$/;"	p	namespace:std	typeref:typename:int	file:
imag	std-headers/complex	/^    T imag() const;$/;"	p	class:std::complex	typeref:typename:T	file:
imag	std-headers/complex	/^    void imag(T value);$/;"	p	class:std::complex	typeref:typename:void	file:
imag	std-headers/complex	/^T imag(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:T	file:
imaxabs	std-headers/cinttypes	/^std::intmax_t imaxabs(std::intmax_t n);$/;"	p	namespace:std	typeref:typename:std::intmax_t	file:
imaxdiv	std-headers/cinttypes	/^std::imaxdiv_t imaxdiv(std::intmax_t x, std::intmax_t y);$/;"	p	namespace:std	typeref:typename:std::imaxdiv_t	file:
imaxdiv_t	std-headers/cinttypes	/^struct imaxdiv_t {$/;"	s	namespace:std	file:
imbue	std-headers/fstream	/^    virtual void imbue(const locale& loc);$/;"	p	class:std::basic_filebuf	typeref:typename:void	file:
imbue	std-headers/ios	/^    locale imbue(const locale& loc);$/;"	p	class:std::basic_ios	typeref:typename:locale	file:
imbue	std-headers/ios	/^    locale imbue(const locale& loc);$/;"	p	class:std::ios_base	typeref:typename:locale	file:
imbue	std-headers/regex	/^    locale_type imbue(locale_type loc);$/;"	p	class:std::basic_regex	typeref:typename:locale_type	file:
imbue	std-headers/regex	/^    locale_type imbue(locale_type loc);$/;"	p	class:std::regex_traits	typeref:typename:locale_type	file:
imbue	std-headers/streambuf	/^    virtual void imbue(const std::locale& loc);$/;"	p	class:std::basic_streambuf	typeref:typename:void	file:
imbue_event	std-headers/ios	/^        imbue_event,$/;"	e	enum:std::ios_base::event	file:
in	std-headers/ios	/^    static constexpr openmode in;$/;"	m	class:std::ios_base	typeref:typename:openmode	file:
in	std-headers/locale	/^    result in(stateT& state,$/;"	p	class:std::codecvt	typeref:typename:result	file:
in_avail	std-headers/streambuf	/^    streamsize in_avail();$/;"	p	class:std::basic_streambuf	typeref:typename:streamsize	file:
inappropriate_io_control_operation	std-headers/system_error	/^    inappropriate_io_control_operation, \/\/  ENOTTY$/;"	e	enum:std::errc	file:
includes	std-headers/algorithm	/^bool includes(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:bool	file:
increment	std-headers/random	/^    static constexpr UIntType increment;$/;"	m	class:std::linear_congruential_engine	typeref:typename:UIntType	file:
independent_bits_engine	std-headers/random	/^    > class independent_bits_engine {$/;"	c	namespace:std	file:
independent_bits_engine	std-headers/random	/^    explicit independent_bits_engine(Engine&& e);$/;"	p	class:std::independent_bits_engine	file:
independent_bits_engine	std-headers/random	/^    explicit independent_bits_engine(Sseq& seq);$/;"	p	class:std::independent_bits_engine	file:
independent_bits_engine	std-headers/random	/^    explicit independent_bits_engine(const Engine& e);$/;"	p	class:std::independent_bits_engine	file:
independent_bits_engine	std-headers/random	/^    explicit independent_bits_engine(result_type s);$/;"	p	class:std::independent_bits_engine	file:
independent_bits_engine	std-headers/random	/^    independent_bits_engine();$/;"	p	class:std::independent_bits_engine	file:
indirect_array	std-headers/valarray	/^    indirect_array() = delete;$/;"	p	class:std::indirect_array	file:
indirect_array	std-headers/valarray	/^    indirect_array(const indirect_array& other);$/;"	p	class:std::indirect_array	file:
indirect_array	std-headers/valarray	/^class indirect_array {$/;"	c	namespace:std	file:
infinity	std-headers/limits	/^    static T infinity();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
init	std-headers/ios	/^    void init(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
initialization_multiplier	std-headers/random	/^    static constexpr UIntType initialization_multiplier;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:UIntType	file:
initializer_list	std-headers/initializer_list	/^    initializer_list();$/;"	p	class:std::initializer_list	file:
initializer_list	std-headers/initializer_list	/^class initializer_list {$/;"	c	namespace:std	file:
inner_allocator	std-headers/scoped_allocator	/^    const inner_allocator_type& inner_allocator() const;$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:const inner_allocator_type &	file:
inner_allocator	std-headers/scoped_allocator	/^    inner_allocator_type& inner_allocator();$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:inner_allocator_type &	file:
inner_allocator_type	std-headers/scoped_allocator	/^    typedef scoped_allocator_adaptor<OuterAlloc> inner_allocator_type; \/\/ SIMPLIFIED$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:scoped_allocator_adaptor<OuterAlloc>	file:
inner_product	std-headers/numeric	/^T inner_product(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:T	file:
inplace_merge	std-headers/algorithm	/^void inplace_merge(BidirIt first, BidirIt middle, BidirIt last);$/;"	p	namespace:std	typeref:typename:void	file:
inplace_merge	std-headers/algorithm	/^void inplace_merge(BidirIt first, BidirIt middle, BidirIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
input_iterator_tag	std-headers/iterator	/^struct input_iterator_tag { };$/;"	s	namespace:std	file:
insert	std-headers/deque	/^    iterator insert(const_iterator pos, InputIt first, InputIt last);$/;"	p	class:std::deque	typeref:typename:iterator	file:
insert	std-headers/deque	/^    iterator insert(const_iterator pos, T&& value);$/;"	p	class:std::deque	typeref:typename:iterator	file:
insert	std-headers/deque	/^    iterator insert(const_iterator pos, const T& value);$/;"	p	class:std::deque	typeref:typename:iterator	file:
insert	std-headers/deque	/^    iterator insert(const_iterator pos, size_type count, const T& value);$/;"	p	class:std::deque	typeref:typename:iterator	file:
insert	std-headers/deque	/^    iterator insert(const_iterator pos, std::initializer_list<T> ilist);$/;"	p	class:std::deque	typeref:typename:iterator	file:
insert	std-headers/deque	/^    iterator insert(iterator pos, const T& value);$/;"	p	class:std::deque	typeref:typename:iterator	file:
insert	std-headers/deque	/^    void insert(iterator pos, InputIt first, InputIt last);$/;"	p	class:std::deque	typeref:typename:void	file:
insert	std-headers/deque	/^    void insert(iterator pos, size_type count, const T& value);$/;"	p	class:std::deque	typeref:typename:void	file:
insert	std-headers/list	/^    iterator insert(const_iterator pos, InputIt first, InputIt last);$/;"	p	class:std::list	typeref:typename:iterator	file:
insert	std-headers/list	/^    iterator insert(const_iterator pos, T&& value);$/;"	p	class:std::list	typeref:typename:iterator	file:
insert	std-headers/list	/^    iterator insert(const_iterator pos, const T& value);$/;"	p	class:std::list	typeref:typename:iterator	file:
insert	std-headers/list	/^    iterator insert(const_iterator pos, size_type count, const T& value);$/;"	p	class:std::list	typeref:typename:iterator	file:
insert	std-headers/list	/^    iterator insert(const_iterator pos, std::initializer_list<T> ilist);$/;"	p	class:std::list	typeref:typename:iterator	file:
insert	std-headers/list	/^    iterator insert(iterator pos, const T& value);$/;"	p	class:std::list	typeref:typename:iterator	file:
insert	std-headers/list	/^    void insert(iterator pos, InputIt first, InputIt last);$/;"	p	class:std::list	typeref:typename:void	file:
insert	std-headers/list	/^    void insert(iterator pos, size_type count, const T& value);$/;"	p	class:std::list	typeref:typename:void	file:
insert	std-headers/map	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::map	typeref:typename:iterator	file:
insert	std-headers/map	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
insert	std-headers/map	/^    iterator insert(const_iterator hint, value_type&& value);$/;"	p	class:std::map	typeref:typename:iterator	file:
insert	std-headers/map	/^    iterator insert(const_iterator hint, value_type&& value);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
insert	std-headers/map	/^    iterator insert(iterator hint, const value_type& value);$/;"	p	class:std::map	typeref:typename:iterator	file:
insert	std-headers/map	/^    iterator insert(iterator hint, const value_type& value);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
insert	std-headers/map	/^    std::pair<iterator, bool> insert(P&& value);$/;"	p	class:std::map	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/map	/^    std::pair<iterator, bool> insert(P&& value);$/;"	p	class:std::multimap	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/map	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::map	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/map	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::multimap	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/map	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::map	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/map	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::multimap	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/map	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::map	typeref:typename:void	file:
insert	std-headers/map	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::multimap	typeref:typename:void	file:
insert	std-headers/map	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::map	typeref:typename:void	file:
insert	std-headers/map	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::multimap	typeref:typename:void	file:
insert	std-headers/set	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
insert	std-headers/set	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::set	typeref:typename:iterator	file:
insert	std-headers/set	/^    iterator insert(const_iterator hint, value_type&& value);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
insert	std-headers/set	/^    iterator insert(const_iterator hint, value_type&& value);$/;"	p	class:std::set	typeref:typename:iterator	file:
insert	std-headers/set	/^    iterator insert(iterator hint, const value_type& value);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
insert	std-headers/set	/^    iterator insert(iterator hint, const value_type& value);$/;"	p	class:std::set	typeref:typename:iterator	file:
insert	std-headers/set	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::multiset	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/set	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::set	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/set	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::multiset	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/set	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::set	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/set	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::multiset	typeref:typename:void	file:
insert	std-headers/set	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::set	typeref:typename:void	file:
insert	std-headers/set	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::multiset	typeref:typename:void	file:
insert	std-headers/set	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::set	typeref:typename:void	file:
insert	std-headers/string	/^    basic_string& insert(size_type index, const CharT* s);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
insert	std-headers/string	/^    basic_string& insert(size_type index, const CharT* s, size_type count);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
insert	std-headers/string	/^    basic_string& insert(size_type index, const basic_string& str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
insert	std-headers/string	/^    basic_string& insert(size_type index, const basic_string& str,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
insert	std-headers/string	/^    basic_string& insert(size_type index, size_type count, CharT ch);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
insert	std-headers/string	/^    iterator insert(const_iterator pos, CharT ch);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
insert	std-headers/string	/^    iterator insert(const_iterator pos, InputIt first, InputIt last);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
insert	std-headers/string	/^    iterator insert(const_iterator pos, size_type count, CharT ch);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
insert	std-headers/string	/^    iterator insert(const_iterator pos, std::initializer_list<CharT> ilist);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
insert	std-headers/string	/^    iterator insert(iterator pos, CharT ch);$/;"	p	class:std::basic_string	typeref:typename:iterator	file:
insert	std-headers/string	/^    void insert(iterator pos, InputIt first, InputIt last);$/;"	p	class:std::basic_string	typeref:typename:void	file:
insert	std-headers/string	/^    void insert(iterator pos, size_type count, CharT ch);$/;"	p	class:std::basic_string	typeref:typename:void	file:
insert	std-headers/unordered_map	/^    iterator insert(const_iterator hint, P&& value);$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
insert	std-headers/unordered_map	/^    iterator insert(const_iterator hint, P&& value);$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
insert	std-headers/unordered_map	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::unordered_map	typeref:typename:iterator	file:
insert	std-headers/unordered_map	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::unordered_multimap	typeref:typename:iterator	file:
insert	std-headers/unordered_map	/^    std::pair<iterator, bool> insert(P&& value);$/;"	p	class:std::unordered_map	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_map	/^    std::pair<iterator, bool> insert(P&& value);$/;"	p	class:std::unordered_multimap	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_map	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::unordered_map	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_map	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::unordered_multimap	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_map	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::unordered_map	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_map	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::unordered_multimap	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_map	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::unordered_map	typeref:typename:void	file:
insert	std-headers/unordered_map	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
insert	std-headers/unordered_map	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::unordered_map	typeref:typename:void	file:
insert	std-headers/unordered_map	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
insert	std-headers/unordered_set	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
insert	std-headers/unordered_set	/^    iterator insert(const_iterator hint, const value_type& value);$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
insert	std-headers/unordered_set	/^    iterator insert(const_iterator hint, value_type&& value);$/;"	p	class:std::unordered_multiset	typeref:typename:iterator	file:
insert	std-headers/unordered_set	/^    iterator insert(const_iterator hint, value_type&& value);$/;"	p	class:std::unordered_set	typeref:typename:iterator	file:
insert	std-headers/unordered_set	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::unordered_multiset	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_set	/^    std::pair<iterator, bool> insert(const value_type& value);$/;"	p	class:std::unordered_set	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_set	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::unordered_multiset	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_set	/^    std::pair<iterator, bool> insert(value_type&& value);$/;"	p	class:std::unordered_set	typeref:typename:std::pair<iterator,bool>	file:
insert	std-headers/unordered_set	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
insert	std-headers/unordered_set	/^    void insert(InputIt first, InputIt last);$/;"	p	class:std::unordered_set	typeref:typename:void	file:
insert	std-headers/unordered_set	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
insert	std-headers/unordered_set	/^    void insert(std::initializer_list<value_type> ilist);$/;"	p	class:std::unordered_set	typeref:typename:void	file:
insert	std-headers/vector	/^    iterator insert(const_iterator pos, InputIt first, InputIt last);$/;"	p	class:std::vector	typeref:typename:iterator	file:
insert	std-headers/vector	/^    iterator insert(const_iterator pos, T&& value);$/;"	p	class:std::vector	typeref:typename:iterator	file:
insert	std-headers/vector	/^    iterator insert(const_iterator pos, const T& value);$/;"	p	class:std::vector	typeref:typename:iterator	file:
insert	std-headers/vector	/^    iterator insert(const_iterator pos, size_type count, const T& value);$/;"	p	class:std::vector	typeref:typename:iterator	file:
insert	std-headers/vector	/^    iterator insert(const_iterator pos, std::initializer_list<T> ilist);$/;"	p	class:std::vector	typeref:typename:iterator	file:
insert	std-headers/vector	/^    iterator insert(iterator pos, const T& value);$/;"	p	class:std::vector	typeref:typename:iterator	file:
insert	std-headers/vector	/^    void insert(iterator pos, InputIt first, InputIt last);$/;"	p	class:std::vector	typeref:typename:void	file:
insert	std-headers/vector	/^    void insert(iterator pos, size_type count, const T& value);$/;"	p	class:std::vector	typeref:typename:void	file:
insert_after	std-headers/forward_list	/^    iterator insert_after(const_iterator pos, InputIt first, InputIt last);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
insert_after	std-headers/forward_list	/^    iterator insert_after(const_iterator pos, T&& value);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
insert_after	std-headers/forward_list	/^    iterator insert_after(const_iterator pos, const T& value);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
insert_after	std-headers/forward_list	/^    iterator insert_after(const_iterator pos, size_type count, const T& value);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
insert_after	std-headers/forward_list	/^    iterator insert_after(const_iterator pos, std::initializer_list<T> ilist);$/;"	p	class:std::forward_list	typeref:typename:iterator	file:
insert_iterator	std-headers/iterator	/^    explicit insert_iterator(Container& c, typename Container::iterator i);$/;"	p	class:std::insert_iterator	file:
insert_iterator	std-headers/iterator	/^class insert_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
inserter	std-headers/iterator	/^std::insert_iterator<Container> inserter(Container& c, typename Container::iterator i);$/;"	p	namespace:std	typeref:typename:std::insert_iterator<Container>	file:
int16_t	std-headers/cstdint	/^typedef short int16_t;$/;"	t	namespace:std	typeref:typename:short	file:
int32_t	std-headers/cstdint	/^typedef int int32_t;$/;"	t	namespace:std	typeref:typename:int	file:
int64_t	std-headers/cstdint	/^typedef long long int64_t;$/;"	t	namespace:std	typeref:typename:long long	file:
int8_t	std-headers/cstdint	/^typedef char int8_t;$/;"	t	namespace:std	typeref:typename:char	file:
int_curr_symbol	std-headers/clocale	/^    char* int_curr_symbol;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
int_fast16_t	std-headers/cstdint	/^typedef short int_fast16_t;$/;"	t	namespace:std	typeref:typename:short	file:
int_fast32_t	std-headers/cstdint	/^typedef int int_fast32_t;$/;"	t	namespace:std	typeref:typename:int	file:
int_fast64_t	std-headers/cstdint	/^typedef long long int_fast64_t;$/;"	t	namespace:std	typeref:typename:long long	file:
int_fast8_t	std-headers/cstdint	/^typedef char int_fast8_t;$/;"	t	namespace:std	typeref:typename:char	file:
int_frac_digits	std-headers/clocale	/^    char int_frac_digits;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_least16_t	std-headers/cstdint	/^typedef short int_least16_t;$/;"	t	namespace:std	typeref:typename:short	file:
int_least32_t	std-headers/cstdint	/^typedef int int_least32_t;$/;"	t	namespace:std	typeref:typename:int	file:
int_least64_t	std-headers/cstdint	/^typedef long long int_least64_t;$/;"	t	namespace:std	typeref:typename:long long	file:
int_least8_t	std-headers/cstdint	/^typedef char int_least8_t;$/;"	t	namespace:std	typeref:typename:char	file:
int_n_cs_precedes	std-headers/clocale	/^    char int_n_cs_precedes;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_n_sep_by_space	std-headers/clocale	/^    char int_n_sep_by_space;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_n_sign_posn	std-headers/clocale	/^    char int_n_sign_posn;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_p_cs_precedes	std-headers/clocale	/^    char int_p_cs_precedes;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_p_sep_by_space	std-headers/clocale	/^    char int_p_sep_by_space;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_p_sign_posn	std-headers/clocale	/^    char int_p_sign_posn;$/;"	m	struct:std::lconv	typeref:typename:char	file:
int_type	std-headers/ios	/^    typedef typename Traits::int_type int_type;$/;"	t	class:std::basic_ios	typeref:typename:Traits::int_type	file:
int_type	std-headers/iterator	/^    typedef int int_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:int	file:
int_type	std-headers/iterator	/^    typedef typename Traits::int_type int_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:Traits::int_type	file:
int_type	std-headers/streambuf	/^    typedef typename traits_type::int_type int_type;$/;"	t	class:std::basic_streambuf	typeref:typename:traits_type::int_type	file:
int_type	std-headers/string	/^    typedef int       int_type; \/\/ impl-defined integer type$/;"	t	class:std::char_traits	typeref:typename:int	file:
integral_constant	std-headers/type_traits	/^struct integral_constant {$/;"	s	namespace:std	file:
interface	std-headers/README.md	/^ - CPPREFERENCE_STDVER: defines the standard version of the interface. Possible$/;"	t	file:
interface	std-headers/README.md	/^This dummy library performs various steps to simplify the exposed interface, to$/;"	t	file:
intern_type	std-headers/locale	/^    typedef InternT intern_type;$/;"	t	class:std::codecvt	typeref:typename:InternT	file:
internal	std-headers/ios	/^    static constexpr fmtflags internal;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
internal	std-headers/ios	/^ios_base& internal(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
interrupted	std-headers/system_error	/^    interrupted,                        \/\/  EINTR$/;"	e	enum:std::errc	file:
intervals	std-headers/random	/^    std::vector<RealType> intervals() const;$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:std::vector<RealType>	file:
intervals	std-headers/random	/^    std::vector<RealType> intervals() const;$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:std::vector<RealType>	file:
intmax_t	std-headers/cstdint	/^typedef long long  intmax_t;$/;"	t	namespace:std	typeref:typename:long long	file:
intptr_t	std-headers/cstdint	/^typedef long long intptr_t;$/;"	t	namespace:std	typeref:typename:long long	file:
invalid_argument	std-headers/stdexcept	/^    explicit invalid_argument(const char* what_arg);$/;"	p	class:std::invalid_argument	file:
invalid_argument	std-headers/stdexcept	/^    explicit invalid_argument(const string& what_arg);$/;"	p	class:std::invalid_argument	file:
invalid_argument	std-headers/stdexcept	/^class invalid_argument : public logic_error {$/;"	c	namespace:std	file:
invalid_argument	std-headers/system_error	/^    invalid_argument,                   \/\/  EINVAL$/;"	e	enum:std::errc	file:
invalid_seek	std-headers/system_error	/^    invalid_seek,                       \/\/  ESPIPE$/;"	e	enum:std::errc	file:
invoke	std-headers/functional	/^std::result_of_t < F&& (ArgTypes&& ...) > invoke(F&& f, ArgTypes&& ... args);$/;"	p	namespace:std	typeref:typename:std::result_of_t<F && (ArgTypes &&...)>	file:
io_errc	std-headers/ios	/^enum class io_errc {$/;"	g	namespace:std	file:
io_error	std-headers/system_error	/^    io_error,                           \/\/  EIO$/;"	e	enum:std::errc	file:
ios	std-headers/ios	/^typedef basic_ios<char> ios;$/;"	t	namespace:std	typeref:typename:basic_ios<char>	file:
ios	std-headers/iosfwd	/^typedef basic_ios<char> ios;$/;"	t	namespace:std	typeref:typename:basic_ios<char>	file:
ios_base	std-headers/ios	/^    ios_base();$/;"	p	class:std::ios_base	file:
ios_base	std-headers/ios	/^    ios_base(const ios_base& other);$/;"	p	class:std::ios_base	file:
ios_base	std-headers/ios	/^class ios_base {$/;"	c	namespace:std	file:
iostate	std-headers/ios	/^    typedef int iostate; \/\/ actually impl-defined$/;"	t	class:std::ios_base	typeref:typename:int	file:
iostream	std-headers/iosfwd	/^typedef basic_iostream<char> iostream;$/;"	t	namespace:std	typeref:typename:basic_iostream<char>	file:
iostream	std-headers/istream	/^typedef basic_iostream<char> iostream;$/;"	t	namespace:std	typeref:typename:basic_iostream<char>	file:
iostream_category	std-headers/ios	/^const std::error_category& iostream_category();$/;"	p	namespace:std	typeref:typename:const std::error_category &	file:
iota	std-headers/numeric	/^void iota(ForwardIterator first, ForwardIterator last, T value);$/;"	p	namespace:std	typeref:typename:void	file:
is	std-headers/locale	/^    bool is(mask m, CharT c) const;$/;"	p	class:std::ctype	typeref:typename:bool	file:
is	std-headers/locale	/^    const CharT* is(const CharT* low, const CharT* high, mask* vec) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
is_a_directory	std-headers/system_error	/^    is_a_directory,                     \/\/  EISDIR$/;"	e	enum:std::errc	file:
is_abstract	std-headers/type_traits	/^template<class T> struct is_abstract : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_always_equal	std-headers/scoped_allocator	/^    typedef std::true_type is_always_equal;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::true_type	file:
is_arithmetic	std-headers/type_traits	/^template<class T> struct is_arithmetic : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_array	std-headers/type_traits	/^template<class T> struct is_array : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_assignable	std-headers/type_traits	/^template<class T, class U> struct is_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_base_of	std-headers/type_traits	/^template<class Base, class Derived> struct is_base_of : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_bind_expression	std-headers/functional	/^struct is_bind_expression : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
is_bounded	std-headers/limits	/^    static const bool is_bounded;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_class	std-headers/type_traits	/^template<class T> struct is_class : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_compound	std-headers/type_traits	/^template<class T> struct is_compound : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_const	std-headers/type_traits	/^template<class T> struct is_const : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_constructible	std-headers/type_traits	/^template<class T, class... Args> struct is_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_convertible	std-headers/type_traits	/^template<class From, class To> struct is_convertible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_copy_assignable	std-headers/type_traits	/^template<class T> struct is_copy_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_copy_constructible	std-headers/type_traits	/^template<class T> struct is_copy_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_default_constructible	std-headers/type_traits	/^template<class T> struct is_default_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_destructible	std-headers/type_traits	/^template<class T> struct is_destructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_empty	std-headers/type_traits	/^template<class T> struct is_empty : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_enum	std-headers/type_traits	/^template<class T> struct is_enum : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_error_code_enum	std-headers/system_error	/^struct is_error_code_enum : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_error_condition_enum	std-headers/system_error	/^struct is_error_condition_enum : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_exact	std-headers/limits	/^    static const bool is_exact;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_final	std-headers/type_traits	/^template<class T> struct is_final : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_floating_point	std-headers/type_traits	/^template<class T> struct is_floating_point : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_function	std-headers/type_traits	/^template<class T> struct is_function : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_fundamental	std-headers/type_traits	/^template<class T> struct is_fundamental : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_heap	std-headers/algorithm	/^bool is_heap(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:bool	file:
is_heap	std-headers/algorithm	/^bool is_heap(RandomIt first, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:bool	file:
is_heap_until	std-headers/algorithm	/^RandomIt is_heap_until(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:RandomIt	file:
is_heap_until	std-headers/algorithm	/^RandomIt is_heap_until(RandomIt first, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:RandomIt	file:
is_iec559	std-headers/limits	/^    static const bool is_iec559;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_integer	std-headers/limits	/^    static const bool is_integer;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_integral	std-headers/type_traits	/^template<class T> struct is_integral : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_literal_type	std-headers/type_traits	/^template<class T> struct is_literal_type : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_lock_free	std-headers/atomic	/^    bool is_lock_free() const volatile;$/;"	p	struct:std::atomic	typeref:typename:bool	file:
is_lock_free	std-headers/atomic	/^    bool is_lock_free() const;$/;"	p	struct:std::atomic	typeref:typename:bool	file:
is_lvalue_reference	std-headers/type_traits	/^template<class T> struct is_lvalue_reference : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_member_function_pointer	std-headers/type_traits	/^template<class T> struct is_member_function_pointer : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_member_object_pointer	std-headers/type_traits	/^template<class T> struct is_member_object_pointer : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_member_pointer	std-headers/type_traits	/^template<class T> struct is_member_pointer : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_modulo	std-headers/limits	/^    static const bool is_modulo;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_move_assignable	std-headers/type_traits	/^template<class T> struct is_move_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_move_constructible	std-headers/type_traits	/^template<class T> struct is_move_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_assignable	std-headers/type_traits	/^template<class T, class U> struct is_nothrow_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_constructible	std-headers/type_traits	/^template<class T, class... Args> struct is_nothrow_constructible : integral_constant<bool, false/;"	s	namespace:std	file:
is_nothrow_copy_assignable	std-headers/type_traits	/^template<class T> struct is_nothrow_copy_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_copy_constructible	std-headers/type_traits	/^template<class T> struct is_nothrow_copy_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_default_constructible	std-headers/type_traits	/^template<class T> struct is_nothrow_default_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_destructible	std-headers/type_traits	/^template<class T> struct is_nothrow_destructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_move_assignable	std-headers/type_traits	/^template<class T> struct is_nothrow_move_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_nothrow_move_constructible	std-headers/type_traits	/^template<class T> struct is_nothrow_move_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_null_pointer	std-headers/type_traits	/^template<class T> struct is_null_pointer : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_object	std-headers/type_traits	/^template<class T> struct is_object : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_open	std-headers/fstream	/^    bool is_open() const;$/;"	p	class:std::basic_filebuf	typeref:typename:bool	file:
is_open	std-headers/fstream	/^    bool is_open() const;$/;"	p	class:std::basic_fstream	typeref:typename:bool	file:
is_open	std-headers/fstream	/^    bool is_open() const;$/;"	p	class:std::basic_ifstream	typeref:typename:bool	file:
is_open	std-headers/fstream	/^    bool is_open() const;$/;"	p	class:std::basic_ofstream	typeref:typename:bool	file:
is_open	std-headers/fstream	/^    bool is_open();$/;"	p	class:std::basic_fstream	typeref:typename:bool	file:
is_open	std-headers/fstream	/^    bool is_open();$/;"	p	class:std::basic_ifstream	typeref:typename:bool	file:
is_open	std-headers/fstream	/^    bool is_open();$/;"	p	class:std::basic_ofstream	typeref:typename:bool	file:
is_partitioned	std-headers/algorithm	/^bool is_partitioned(InputIt first, InputIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:bool	file:
is_permutation	std-headers/algorithm	/^bool is_permutation(ForwardIt1 first1, ForwardIt1 last1,$/;"	p	namespace:std	typeref:typename:bool	file:
is_placeholder	std-headers/functional	/^struct is_placeholder : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
is_pod	std-headers/type_traits	/^template<class T> struct is_pod : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_pointer	std-headers/type_traits	/^template<class T> struct is_pointer : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_polymorphic	std-headers/type_traits	/^template<class T> struct is_polymorphic : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_reference	std-headers/type_traits	/^template<class T> struct is_reference : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_rvalue_reference	std-headers/type_traits	/^template<class T> struct is_rvalue_reference : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_same	std-headers/type_traits	/^template<class T, class U> struct is_same : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_scalar	std-headers/type_traits	/^template<class T> struct is_scalar : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_signed	std-headers/limits	/^    static const bool is_signed;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_signed	std-headers/type_traits	/^template<class T> struct is_signed : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_sorted	std-headers/algorithm	/^bool is_sorted(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:bool	file:
is_sorted	std-headers/algorithm	/^bool is_sorted(ForwardIt first, ForwardIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:bool	file:
is_sorted_until	std-headers/algorithm	/^ForwardIt is_sorted_until(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
is_sorted_until	std-headers/algorithm	/^ForwardIt is_sorted_until(ForwardIt first, ForwardIt last,$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
is_specialized	std-headers/limits	/^    static const bool is_specialized;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
is_standard_layout	std-headers/type_traits	/^template<class T> struct is_standard_layout : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_steady	std-headers/chrono	/^    constexpr static bool is_steady;$/;"	m	class:std::chrono::high_resolution_clock	typeref:typename:bool	file:
is_steady	std-headers/chrono	/^    constexpr static bool is_steady;$/;"	m	class:std::chrono::steady_clock	typeref:typename:bool	file:
is_steady	std-headers/chrono	/^    constexpr static bool is_steady;$/;"	m	class:std::chrono::system_clock	typeref:typename:bool	file:
is_trivial	std-headers/type_traits	/^template<class T> struct is_trivial : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_assignable	std-headers/type_traits	/^template<class T, class U> struct is_trivially_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_constructible	std-headers/type_traits	/^template<class T, class... Args> struct is_trivially_constructible : integral_constant<bool, fal/;"	s	namespace:std	file:
is_trivially_copy_assignable	std-headers/type_traits	/^template<class T> struct is_trivially_copy_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_copy_constructible	std-headers/type_traits	/^template<class T> struct is_trivially_copy_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_copyable	std-headers/type_traits	/^template<class T> struct is_trivially_copyable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_default_constructible	std-headers/type_traits	/^template<class T> struct is_trivially_default_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_destructible	std-headers/type_traits	/^template<class T> struct is_trivially_destructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_move_assignable	std-headers/type_traits	/^template<class T> struct is_trivially_move_assignable : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_trivially_move_constructible	std-headers/type_traits	/^template<class T> struct is_trivially_move_constructible : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_union	std-headers/type_traits	/^template<class T> struct is_union : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_unsigned	std-headers/type_traits	/^template<class T> struct is_unsigned : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_void	std-headers/type_traits	/^template<class T> struct is_void : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
is_volatile	std-headers/type_traits	/^template<class T> struct is_volatile : integral_constant<bool, false> {};$/;"	s	namespace:std	file:
isalnum	std-headers/cctype	/^int isalnum(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isalnum	std-headers/locale	/^template<class CharT> bool isalnum(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isalpha	std-headers/cctype	/^int isalpha(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isalpha	std-headers/locale	/^template<class CharT> bool isalpha(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isblank	std-headers/cctype	/^int isblank(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isblank	std-headers/locale	/^template<class CharT> bool isblank(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
iscntrl	std-headers/cctype	/^int iscntrl(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
iscntrl	std-headers/locale	/^template<class CharT> bool iscntrl(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isctype	std-headers/regex	/^    bool isctype(CharT c, char_class_type f) const;$/;"	p	class:std::regex_traits	typeref:typename:bool	file:
isdigit	std-headers/cctype	/^int isdigit(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isdigit	std-headers/locale	/^template<class CharT> bool isdigit(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isfinite	std-headers/cmath	/^bool isfinite(double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isfinite	std-headers/cmath	/^bool isfinite(float arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isfinite	std-headers/cmath	/^bool isfinite(long double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isgraph	std-headers/cctype	/^int isgraph(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isgraph	std-headers/locale	/^template<class CharT> bool isgraph(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isgreater	std-headers/cmath	/^bool isgreater(double x, double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isgreater	std-headers/cmath	/^bool isgreater(float x, float y);$/;"	p	namespace:std	typeref:typename:bool	file:
isgreater	std-headers/cmath	/^bool isgreater(long double x, long double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isgreaterequal	std-headers/cmath	/^bool isgreaterequal(double x, double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isgreaterequal	std-headers/cmath	/^bool isgreaterequal(float x, float y);$/;"	p	namespace:std	typeref:typename:bool	file:
isgreaterequal	std-headers/cmath	/^bool isgreaterequal(long double x, long double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isinf	std-headers/cmath	/^bool isinf(double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isinf	std-headers/cmath	/^bool isinf(float arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isinf	std-headers/cmath	/^bool isinf(long double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isless	std-headers/cmath	/^bool isless(double x, double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isless	std-headers/cmath	/^bool isless(float x, float y);$/;"	p	namespace:std	typeref:typename:bool	file:
isless	std-headers/cmath	/^bool isless(long double x, long double y);$/;"	p	namespace:std	typeref:typename:bool	file:
islessequal	std-headers/cmath	/^bool islessequal(double x, double y);$/;"	p	namespace:std	typeref:typename:bool	file:
islessequal	std-headers/cmath	/^bool islessequal(float x, float y);$/;"	p	namespace:std	typeref:typename:bool	file:
islessequal	std-headers/cmath	/^bool islessequal(long double x, long double y);$/;"	p	namespace:std	typeref:typename:bool	file:
islessgreater	std-headers/cmath	/^bool islessgreater(double x, double y);$/;"	p	namespace:std	typeref:typename:bool	file:
islessgreater	std-headers/cmath	/^bool islessgreater(float x, float y);$/;"	p	namespace:std	typeref:typename:bool	file:
islessgreater	std-headers/cmath	/^bool islessgreater(long double x, long double y);$/;"	p	namespace:std	typeref:typename:bool	file:
islower	std-headers/cctype	/^int islower(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
islower	std-headers/locale	/^template<class CharT> bool islower(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isnan	std-headers/cmath	/^bool isnan(double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isnan	std-headers/cmath	/^bool isnan(float arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isnan	std-headers/cmath	/^bool isnan(long double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isnormal	std-headers/cmath	/^bool isnormal(double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isnormal	std-headers/cmath	/^bool isnormal(float arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isnormal	std-headers/cmath	/^bool isnormal(long double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
isprint	std-headers/cctype	/^int isprint(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isprint	std-headers/locale	/^template<class CharT> bool isprint(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
ispunct	std-headers/cctype	/^int ispunct(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
ispunct	std-headers/locale	/^template<class CharT> bool ispunct(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
isspace	std-headers/cctype	/^int isspace(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isspace	std-headers/locale	/^template<class CharT> bool isspace(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
istream	std-headers/iosfwd	/^typedef basic_istream<char> istream;$/;"	t	namespace:std	typeref:typename:basic_istream<char>	file:
istream	std-headers/istream	/^typedef basic_istream<char> istream;$/;"	t	namespace:std	typeref:typename:basic_istream<char>	file:
istream_iterator	std-headers/iterator	/^    istream_iterator();$/;"	p	class:std::istream_iterator	file:
istream_iterator	std-headers/iterator	/^    istream_iterator(const istream_iterator& other) = default;$/;"	p	class:std::istream_iterator	file:
istream_iterator	std-headers/iterator	/^    istream_iterator(istream_type& stream);$/;"	p	class:std::istream_iterator	file:
istream_iterator	std-headers/iterator	/^class istream_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
istream_type	std-headers/iterator	/^    typedef std::basic_istream<CharT, Traits> istream_type;$/;"	t	class:std::istream_iterator	typeref:typename:std::basic_istream<CharT,Traits>	file:
istream_type	std-headers/iterator	/^    typedef std::basic_istream<CharT, Traits> istream_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:std::basic_istream<CharT,Traits>	file:
istreambuf_iterator	std-headers/iterator	/^    istreambuf_iterator();$/;"	p	class:std::istreambuf_iterator	file:
istreambuf_iterator	std-headers/iterator	/^    istreambuf_iterator(const istreambuf_iterator&) = default;$/;"	p	class:std::istreambuf_iterator	file:
istreambuf_iterator	std-headers/iterator	/^    istreambuf_iterator(std::basic_istream<CharT, Traits>& is);$/;"	p	class:std::istreambuf_iterator	file:
istreambuf_iterator	std-headers/iterator	/^    istreambuf_iterator(std::basic_streambuf<CharT, Traits>* s);$/;"	p	class:std::istreambuf_iterator	file:
istreambuf_iterator	std-headers/iterator	/^class istreambuf_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
istringstream	std-headers/iosfwd	/^typedef basic_istringstream<char> istringstream;$/;"	t	namespace:std	typeref:typename:basic_istringstream<char>	file:
istringstream	std-headers/sstream	/^typedef basic_istringstream<char> istringstream;$/;"	t	namespace:std	typeref:typename:basic_istringstream<char>	file:
isunordered	std-headers/cmath	/^bool isunordered(double x, double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isunordered	std-headers/cmath	/^bool isunordered(float x, float y);$/;"	p	namespace:std	typeref:typename:bool	file:
isunordered	std-headers/cmath	/^bool isunordered(long double x, long double y);$/;"	p	namespace:std	typeref:typename:bool	file:
isupper	std-headers/cctype	/^int isupper(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isupper	std-headers/locale	/^template<class CharT> bool isupper(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
iswalnum	std-headers/cwctype	/^int iswalnum(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswalpha	std-headers/cwctype	/^int iswalpha(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswblank	std-headers/cwctype	/^int iswblank(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswcntrl	std-headers/cwctype	/^int iswcntrl(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswctype	std-headers/cwctype	/^int iswctype(std::wint_t wc, std::wctype_t desc);$/;"	p	namespace:std	typeref:typename:int	file:
iswdigit	std-headers/cwctype	/^int iswdigit(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswgraph	std-headers/cwctype	/^int iswgraph(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswlower	std-headers/cwctype	/^int iswlower(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswprint	std-headers/cwctype	/^int iswprint(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswpunct	std-headers/cwctype	/^int iswpunct(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswspace	std-headers/cwctype	/^int iswspace(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswupper	std-headers/cwctype	/^int iswupper(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
iswxdigit	std-headers/cwctype	/^int iswxdigit(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
isxdigit	std-headers/cctype	/^int isxdigit(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
isxdigit	std-headers/locale	/^template<class CharT> bool isxdigit(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:bool	file:
iter	std-headers/iterator	/^    Container::iterator iter;$/;"	m	class:std::insert_iterator	typeref:typename:Container::iterator	file:
iter_swap	std-headers/algorithm	/^void iter_swap(ForwardIt1 a, ForwardIt2 b);$/;"	p	namespace:std	typeref:typename:void	file:
iter_type	std-headers/locale	/^    typedef InputIt iter_type;$/;"	t	class:std::money_get	typeref:typename:InputIt	file:
iter_type	std-headers/locale	/^    typedef InputIt iter_type;$/;"	t	class:std::num_get	typeref:typename:InputIt	file:
iter_type	std-headers/locale	/^    typedef InputIt iter_type;$/;"	t	class:std::time_get	typeref:typename:InputIt	file:
iter_type	std-headers/locale	/^    typedef OutputIt iter_type;$/;"	t	class:std::money_put	typeref:typename:OutputIt	file:
iter_type	std-headers/locale	/^    typedef OutputIt iter_type;$/;"	t	class:std::num_put	typeref:typename:OutputIt	file:
iter_type	std-headers/locale	/^    typedef OutputIt iter_type;$/;"	t	class:std::time_put	typeref:typename:OutputIt	file:
iterator	std-headers/array	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::array	typeref:typename:T *	file:
iterator	std-headers/deque	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::deque	typeref:typename:T *	file:
iterator	std-headers/forward_list	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::forward_list	typeref:typename:T *	file:
iterator	std-headers/initializer_list	/^    typedef const T* iterator;$/;"	t	class:std::initializer_list	typeref:typename:const T *	file:
iterator	std-headers/iterator	/^struct iterator {$/;"	s	namespace:std	file:
iterator	std-headers/list	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::list	typeref:typename:T *	file:
iterator	std-headers/map	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::multimap	typeref:typename:T *	file:
iterator	std-headers/map	/^    typedef value_type* iterator; \/\/ actual type is unspecified$/;"	t	class:std::map	typeref:typename:value_type *	file:
iterator	std-headers/regex	/^    typedef BidirIt iterator;$/;"	t	class:std::sub_match	typeref:typename:BidirIt	file:
iterator	std-headers/regex	/^    typedef const_iterator iterator;$/;"	t	class:std::match_results	typeref:typename:const_iterator	file:
iterator	std-headers/set	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::multiset	typeref:typename:T *	file:
iterator	std-headers/set	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::set	typeref:typename:T *	file:
iterator	std-headers/string	/^    typedef CharT* iterator; \/\/ actual type is unspecified$/;"	t	class:std::basic_string	typeref:typename:CharT *	file:
iterator	std-headers/unordered_map	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multimap	typeref:typename:T *	file:
iterator	std-headers/unordered_map	/^    typedef value_type* iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_map	typeref:typename:value_type *	file:
iterator	std-headers/unordered_set	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multiset	typeref:typename:T *	file:
iterator	std-headers/unordered_set	/^    typedef value_type* iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_set	typeref:typename:value_type *	file:
iterator	std-headers/vector	/^    typedef T* iterator; \/\/ actual type is unspecified$/;"	t	class:std::vector	typeref:typename:T *	file:
iterator_category	std-headers/iterator	/^    typedef Category iterator_category;$/;"	t	struct:std::iterator	typeref:typename:Category	file:
iterator_category	std-headers/iterator	/^    typedef input_iterator_tag iterator_category;$/;"	t	class:std::istream_iterator	typeref:typename:input_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef input_iterator_tag iterator_category;$/;"	t	class:std::istreambuf_iterator	typeref:typename:input_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef output_iterator_tag iterator_category;$/;"	t	class:std::back_insert_iterator	typeref:typename:output_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef output_iterator_tag iterator_category;$/;"	t	class:std::front_insert_iterator	typeref:typename:output_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	typeref:typename:output_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef output_iterator_tag iterator_category;$/;"	t	class:std::ostream_iterator	typeref:typename:output_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef output_iterator_tag iterator_category;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:output_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	file:
iterator_category	std-headers/iterator	/^    typedef typename Iterator::iterator_category iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:Iterator::iterator_category	file:
iterator_category	std-headers/iterator	/^    typedef typename Iterator::iterator_category iterator_category;$/;"	t	class:std::reverse_iterator	typeref:typename:Iterator::iterator_category	file:
iterator_category	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:iterator_traits<Iterator>::iterator_category	file:
iterator_category	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<Iterator>::iterator_category	file:
iterator_category	std-headers/memory	/^    typedef output_iterator_tag iterator_category;$/;"	t	class:std::raw_storage_iterator	typeref:typename:output_iterator_tag	file:
iterator_category	std-headers/regex	/^    typedef forward_iterator_tag iterator_category;$/;"	t	class:std::regex_iterator	typeref:typename:forward_iterator_tag	file:
iterator_category	std-headers/regex	/^    typedef forward_iterator_tag iterator_category;$/;"	t	class:std::regex_token_iterator	typeref:typename:forward_iterator_tag	file:
iterator_traits	std-headers/iterator	/^struct iterator_traits {$/;"	s	namespace:std	file:
iterator_type	std-headers/iterator	/^    typedef Iterator iterator_type;$/;"	t	class:std::move_iterator	typeref:typename:Iterator	file:
iterator_type	std-headers/iterator	/^    typedef Iterator iterator_type;$/;"	t	class:std::reverse_iterator	typeref:typename:Iterator	file:
iword	std-headers/ios	/^    long& iword(int index);$/;"	p	class:std::ios_base	typeref:typename:long &	file:
join	std-headers/thread	/^    void join();$/;"	p	class:std::thread	typeref:typename:void	file:
joinable	std-headers/thread	/^    bool joinable() const;$/;"	p	class:std::thread	typeref:typename:bool	file:
k	std-headers/random	/^    IntType k() const;$/;"	p	class:std::negative_binomial_distribution	typeref:typename:IntType	file:
key_comp	std-headers/map	/^    key_compare key_comp() const;$/;"	p	class:std::map	typeref:typename:key_compare	file:
key_comp	std-headers/map	/^    key_compare key_comp() const;$/;"	p	class:std::multimap	typeref:typename:key_compare	file:
key_comp	std-headers/set	/^    key_compare key_comp() const;$/;"	p	class:std::multiset	typeref:typename:key_compare	file:
key_comp	std-headers/set	/^    key_compare key_comp() const;$/;"	p	class:std::set	typeref:typename:key_compare	file:
key_compare	std-headers/map	/^    typedef Compare key_compare;$/;"	t	class:std::map	typeref:typename:Compare	file:
key_compare	std-headers/map	/^    typedef Compare key_compare;$/;"	t	class:std::multimap	typeref:typename:Compare	file:
key_compare	std-headers/set	/^    typedef Compare key_compare;$/;"	t	class:std::multiset	typeref:typename:Compare	file:
key_compare	std-headers/set	/^    typedef Compare key_compare;$/;"	t	class:std::set	typeref:typename:Compare	file:
key_eq	std-headers/unordered_map	/^    key_equal key_eq() const;$/;"	p	class:std::unordered_map	typeref:typename:key_equal	file:
key_eq	std-headers/unordered_map	/^    key_equal key_eq() const;$/;"	p	class:std::unordered_multimap	typeref:typename:key_equal	file:
key_eq	std-headers/unordered_set	/^    key_equal key_eq() const;$/;"	p	class:std::unordered_multiset	typeref:typename:key_equal	file:
key_eq	std-headers/unordered_set	/^    key_equal key_eq() const;$/;"	p	class:std::unordered_set	typeref:typename:key_equal	file:
key_equal	std-headers/unordered_map	/^    typedef KeyEqual key_equal;$/;"	t	class:std::unordered_map	typeref:typename:KeyEqual	file:
key_equal	std-headers/unordered_map	/^    typedef KeyEqual key_equal;$/;"	t	class:std::unordered_multimap	typeref:typename:KeyEqual	file:
key_equal	std-headers/unordered_set	/^    typedef KeyEqual key_equal;$/;"	t	class:std::unordered_multiset	typeref:typename:KeyEqual	file:
key_equal	std-headers/unordered_set	/^    typedef KeyEqual key_equal;$/;"	t	class:std::unordered_set	typeref:typename:KeyEqual	file:
key_type	std-headers/map	/^    typedef Key key_type;$/;"	t	class:std::map	typeref:typename:Key	file:
key_type	std-headers/map	/^    typedef Key key_type;$/;"	t	class:std::multimap	typeref:typename:Key	file:
key_type	std-headers/set	/^    typedef Key key_type;$/;"	t	class:std::multiset	typeref:typename:Key	file:
key_type	std-headers/set	/^    typedef Key key_type;$/;"	t	class:std::set	typeref:typename:Key	file:
key_type	std-headers/unordered_map	/^    typedef Key key_type;$/;"	t	class:std::unordered_map	typeref:typename:Key	file:
key_type	std-headers/unordered_map	/^    typedef Key key_type;$/;"	t	class:std::unordered_multimap	typeref:typename:Key	file:
key_type	std-headers/unordered_set	/^    typedef Key key_type;$/;"	t	class:std::unordered_multiset	typeref:typename:Key	file:
key_type	std-headers/unordered_set	/^    typedef Key key_type;$/;"	t	class:std::unordered_set	typeref:typename:Key	file:
kill_dependency	std-headers/atomic	/^T kill_dependency(T y);$/;"	p	namespace:std	typeref:typename:T	file:
kilo	std-headers/ratio	/^typedef ratio<                     1000, 1> kilo;$/;"	t	namespace:std	typeref:typename:ratio<1000,1>	file:
knuth_b	std-headers/random	/^typedef std::shuffle_order_engine<std::minstd_rand0, 256> knuth_b;$/;"	t	namespace:std	typeref:typename:std::shuffle_order_engine<std::minstd_rand0,256>	file:
labs	std-headers/cstdlib	/^long       labs(long n);$/;"	p	namespace:std	typeref:typename:long	file:
lambda	std-headers/random	/^    result_type lambda() const;$/;"	p	class:std::exponential_distribution	typeref:typename:result_type	file:
launch	std-headers/future	/^enum class launch {$/;"	g	namespace:std	file:
lconv	std-headers/clocale	/^struct lconv {$/;"	s	namespace:std	file:
ldexp	std-headers/cmath	/^double      ldexp(double x, int exp);$/;"	p	namespace:std	typeref:typename:double	file:
ldexp	std-headers/cmath	/^float       ldexp(float x, int exp);$/;"	p	namespace:std	typeref:typename:float	file:
ldexp	std-headers/cmath	/^long double ldexp(long double x, int exp);$/;"	p	namespace:std	typeref:typename:long double	file:
ldiv	std-headers/cstdlib	/^std::ldiv_t   ldiv(long x, long y);$/;"	p	namespace:std	typeref:typename:std::ldiv_t	file:
ldiv_t	std-headers/cstdlib	/^struct ldiv_t {$/;"	s	namespace:std	file:
left	std-headers/ios	/^    static constexpr fmtflags left;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
left	std-headers/ios	/^ios_base& left(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
length	std-headers/locale	/^    int length(StateT& state,$/;"	p	class:std::codecvt	typeref:typename:int	file:
length	std-headers/regex	/^    difference_type length() const;$/;"	p	class:std::sub_match	typeref:typename:difference_type	file:
length	std-headers/regex	/^    difference_type length(size_type n = 0) const;$/;"	p	class:std::match_results	typeref:typename:difference_type	file:
length	std-headers/regex	/^    static std::size_t length(const char_type* p);$/;"	p	class:std::regex_traits	typeref:typename:std::size_t	file:
length	std-headers/string	/^    size_type length() const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
length	std-headers/string	/^    static size_t length(const char_type* s);$/;"	p	class:std::char_traits	typeref:typename:size_t	file:
length_error	std-headers/stdexcept	/^    explicit length_error(const char* what_arg);$/;"	p	class:std::length_error	file:
length_error	std-headers/stdexcept	/^    explicit length_error(const string& what_arg);$/;"	p	class:std::length_error	file:
length_error	std-headers/stdexcept	/^class length_error : public logic_error {$/;"	c	namespace:std	file:
less	std-headers/functional	/^struct less {$/;"	s	namespace:std	file:
less_equal	std-headers/functional	/^struct less_equal {$/;"	s	namespace:std	file:
lexicographical_compare	std-headers/algorithm	/^bool lexicographical_compare(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:bool	file:
lgamma	std-headers/cmath	/^double      lgamma(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
lgamma	std-headers/cmath	/^float       lgamma(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
lgamma	std-headers/cmath	/^long double lgamma(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
linear_congruential_engine	std-headers/random	/^    > class linear_congruential_engine {$/;"	c	namespace:std	file:
linear_congruential_engine	std-headers/random	/^    explicit linear_congruential_engine(Sseq& s);$/;"	p	class:std::linear_congruential_engine	file:
linear_congruential_engine	std-headers/random	/^    explicit linear_congruential_engine(result_type value = default_seed);$/;"	p	class:std::linear_congruential_engine	file:
linear_congruential_engine	std-headers/random	/^    linear_congruential_engine(const linear_congruential_engine& other);$/;"	p	class:std::linear_congruential_engine	file:
list	std-headers/list	/^    explicit list(const Allocator& alloc = Allocator());$/;"	p	class:std::list	file:
list	std-headers/list	/^    explicit list(const Allocator& alloc);$/;"	p	class:std::list	file:
list	std-headers/list	/^    explicit list(size_type count,$/;"	p	class:std::list	file:
list	std-headers/list	/^    explicit list(size_type n);$/;"	p	class:std::list	file:
list	std-headers/list	/^    explicit list(size_type n, const Allocator& alloc = Allocator());$/;"	p	class:std::list	file:
list	std-headers/list	/^    list();$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(InputIt first, InputIt last,$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(const list& other);$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(const list& other, const Allocator& alloc);$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(list&& other);$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(list&& other, const Allocator& alloc);$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(size_type count,$/;"	p	class:std::list	file:
list	std-headers/list	/^    list(std::initializer_list<T> init,$/;"	p	class:std::list	file:
list	std-headers/list	/^class list {$/;"	c	namespace:std	file:
little_endian	std-headers/codecvt	/^    little_endian = 1$/;"	e	enum:std::codecvt_mode	file:
llabs	std-headers/cstdlib	/^long long llabs(long long n);$/;"	p	namespace:std	typeref:typename:long long	file:
lldiv	std-headers/cstdlib	/^std::lldiv_t lldiv(long long x, long long y);$/;"	p	namespace:std	typeref:typename:std::lldiv_t	file:
lldiv_t	std-headers/cstdlib	/^struct lldiv_t {$/;"	s	namespace:std	file:
llrint	std-headers/cmath	/^long long llrint(double arg);$/;"	p	namespace:std	typeref:typename:long long	file:
llrint	std-headers/cmath	/^long long llrint(float arg);$/;"	p	namespace:std	typeref:typename:long long	file:
llrint	std-headers/cmath	/^long long llrint(long double arg);$/;"	p	namespace:std	typeref:typename:long long	file:
llround	std-headers/cmath	/^long long llround(double arg);$/;"	p	namespace:std	typeref:typename:long long	file:
llround	std-headers/cmath	/^long long llround(float arg);$/;"	p	namespace:std	typeref:typename:long long	file:
llround	std-headers/cmath	/^long long llround(long double arg);$/;"	p	namespace:std	typeref:typename:long long	file:
load	std-headers/atomic	/^    T load(std::memory_order order = std::memory_order_seq_cst) const volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
load	std-headers/atomic	/^    T load(std::memory_order order = std::memory_order_seq_cst) const;$/;"	p	struct:std::atomic	typeref:typename:T	file:
load_factor	std-headers/unordered_map	/^    float load_factor() const;$/;"	p	class:std::unordered_map	typeref:typename:float	file:
load_factor	std-headers/unordered_map	/^    float load_factor() const;$/;"	p	class:std::unordered_multimap	typeref:typename:float	file:
load_factor	std-headers/unordered_set	/^    float load_factor() const;$/;"	p	class:std::unordered_multiset	typeref:typename:float	file:
load_factor	std-headers/unordered_set	/^    float load_factor() const;$/;"	p	class:std::unordered_set	typeref:typename:float	file:
local_iterator	std-headers/unordered_map	/^    typedef T* local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multimap	typeref:typename:T *	file:
local_iterator	std-headers/unordered_map	/^    typedef value_type* local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_map	typeref:typename:value_type *	file:
local_iterator	std-headers/unordered_set	/^    typedef T* local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_multiset	typeref:typename:T *	file:
local_iterator	std-headers/unordered_set	/^    typedef value_type* local_iterator; \/\/ actual type is unspecified$/;"	t	class:std::unordered_set	typeref:typename:value_type *	file:
locale	std-headers/locale	/^    explicit locale(const char* std_name);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    explicit locale(const std::string& std_name);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    locale();$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    locale(const locale& other);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    locale(const locale& other, Facet* f);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    locale(const locale& other, const char* std_name, category cat);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    locale(const locale& other, const locale& one, category cat);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^    locale(const locale& other, const std::string& std_name, category cat);$/;"	p	class:std::locale	file:
locale	std-headers/locale	/^class locale {$/;"	c	namespace:std	file:
locale_type	std-headers/regex	/^    typedef typename Traits::locale_type locale_type;$/;"	t	class:std::basic_regex	typeref:typename:Traits::locale_type	file:
locale_type	std-headers/regex	/^    typedef void* locale_type; \/\/ not specified$/;"	t	class:std::regex_traits	typeref:typename:void *	file:
localeconv	std-headers/clocale	/^std::lconv* localeconv();$/;"	p	namespace:std	typeref:typename:std::lconv *	file:
localtime	std-headers/ctime	/^std::tm* localtime(const std::time_t* time);$/;"	p	namespace:std	typeref:typename:std::tm *	file:
lock	std-headers/memory	/^    std::shared_ptr<T> lock() const;$/;"	p	class:std::weak_ptr	typeref:typename:std::shared_ptr<T>	file:
lock	std-headers/mutex	/^    void lock();$/;"	p	class:std::mutex	typeref:typename:void	file:
lock	std-headers/mutex	/^    void lock();$/;"	p	class:std::recursive_mutex	typeref:typename:void	file:
lock	std-headers/mutex	/^    void lock();$/;"	p	class:std::recursive_timed_mutex	typeref:typename:void	file:
lock	std-headers/mutex	/^    void lock();$/;"	p	class:std::timed_mutex	typeref:typename:void	file:
lock	std-headers/mutex	/^    void lock();$/;"	p	class:std::unique_lock	typeref:typename:void	file:
lock	std-headers/mutex	/^void lock(Lockable1& lock1, Lockable2& lock2, LockableN& ... lockn);$/;"	p	namespace:std	typeref:typename:void	file:
lock	std-headers/shared_mutex	/^    void lock();$/;"	p	class:std::shared_lock	typeref:typename:void	file:
lock	std-headers/shared_mutex	/^    void lock();$/;"	p	class:std::shared_mutex	typeref:typename:void	file:
lock	std-headers/shared_mutex	/^    void lock();$/;"	p	class:std::shared_timed_mutex	typeref:typename:void	file:
lock_guard	std-headers/mutex	/^    explicit lock_guard(mutex_type& m);$/;"	p	class:std::lock_guard	file:
lock_guard	std-headers/mutex	/^    lock_guard(const lock_guard&) = delete;$/;"	p	class:std::lock_guard	file:
lock_guard	std-headers/mutex	/^    lock_guard(mutex_type& m, std::adopt_lock_t t);$/;"	p	class:std::lock_guard	file:
lock_guard	std-headers/mutex	/^class lock_guard {$/;"	c	namespace:std	file:
lock_shared	std-headers/shared_mutex	/^    void lock_shared();$/;"	p	class:std::shared_mutex	typeref:typename:void	file:
lock_shared	std-headers/shared_mutex	/^    void lock_shared();$/;"	p	class:std::shared_timed_mutex	typeref:typename:void	file:
log	std-headers/cmath	/^double      log(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
log	std-headers/cmath	/^float       log(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
log	std-headers/cmath	/^long double log(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
log	std-headers/complex	/^complex<T> log(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
log	std-headers/valarray	/^valarray<T> log(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
log10	std-headers/cmath	/^double      log10(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
log10	std-headers/cmath	/^float       log10(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
log10	std-headers/cmath	/^long double log10(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
log10	std-headers/complex	/^complex<T> log10(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
log10	std-headers/valarray	/^valarray<T> log10(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
log1p	std-headers/cmath	/^double      log1p(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
log1p	std-headers/cmath	/^float       log1p(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
log1p	std-headers/cmath	/^long double log1p(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
log2	std-headers/cmath	/^double      log2(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
log2	std-headers/cmath	/^float       log2(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
log2	std-headers/cmath	/^long double log2(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
logb	std-headers/cmath	/^double      logb(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
logb	std-headers/cmath	/^float       logb(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
logb	std-headers/cmath	/^long double logb(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
logic_error	std-headers/stdexcept	/^    explicit logic_error(const char* what_arg);$/;"	p	class:std::logic_error	file:
logic_error	std-headers/stdexcept	/^    explicit logic_error(const string& what_arg);$/;"	p	class:std::logic_error	file:
logic_error	std-headers/stdexcept	/^class logic_error : public exception {$/;"	c	namespace:std	file:
logical_and	std-headers/functional	/^struct logical_and {$/;"	s	namespace:std	file:
logical_not	std-headers/functional	/^struct logical_not {$/;"	s	namespace:std	file:
logical_or	std-headers/functional	/^struct logical_or {$/;"	s	namespace:std	file:
lognormal_distribution	std-headers/random	/^    explicit lognormal_distribution(RealType m = 0.0, RealType s = 1.0);$/;"	p	class:std::lognormal_distribution	file:
lognormal_distribution	std-headers/random	/^    explicit lognormal_distribution(const param_type& params);$/;"	p	class:std::lognormal_distribution	file:
lognormal_distribution	std-headers/random	/^class lognormal_distribution {$/;"	c	namespace:std	file:
long_lag	std-headers/random	/^    static constexpr size_t long_lag;$/;"	m	class:std::subtract_with_carry_engine	typeref:typename:size_t	file:
longjmp	std-headers/csetjmp	/^void longjmp(std::jmp_buf env, int status);$/;"	p	namespace:std	typeref:typename:void	file:
lookup_classname	std-headers/regex	/^    char_class_type lookup_classname(ForwardIt first,$/;"	p	class:std::regex_traits	typeref:typename:char_class_type	file:
lookup_collatename	std-headers/regex	/^    string_type lookup_collatename(ForwardIt first, ForwardIt last) const;$/;"	p	class:std::regex_traits	typeref:typename:string_type	file:
lower	std-headers/locale	/^    static const mask lower;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
lower_bound	std-headers/algorithm	/^ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
lower_bound	std-headers/algorithm	/^ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
lower_bound	std-headers/map	/^    const_iterator lower_bound(const K& x) const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
lower_bound	std-headers/map	/^    const_iterator lower_bound(const K& x) const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
lower_bound	std-headers/map	/^    const_iterator lower_bound(const Key& key) const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
lower_bound	std-headers/map	/^    const_iterator lower_bound(const Key& key) const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
lower_bound	std-headers/map	/^    iterator lower_bound(const K& x);$/;"	p	class:std::map	typeref:typename:iterator	file:
lower_bound	std-headers/map	/^    iterator lower_bound(const K& x);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
lower_bound	std-headers/map	/^    iterator lower_bound(const Key& key);$/;"	p	class:std::map	typeref:typename:iterator	file:
lower_bound	std-headers/map	/^    iterator lower_bound(const Key& key);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
lower_bound	std-headers/set	/^    const_iterator lower_bound(const K& x) const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
lower_bound	std-headers/set	/^    const_iterator lower_bound(const K& x) const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
lower_bound	std-headers/set	/^    const_iterator lower_bound(const Key& key) const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
lower_bound	std-headers/set	/^    const_iterator lower_bound(const Key& key) const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
lower_bound	std-headers/set	/^    iterator lower_bound(const K& x);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
lower_bound	std-headers/set	/^    iterator lower_bound(const K& x);$/;"	p	class:std::set	typeref:typename:iterator	file:
lower_bound	std-headers/set	/^    iterator lower_bound(const Key& key);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
lower_bound	std-headers/set	/^    iterator lower_bound(const Key& key);$/;"	p	class:std::set	typeref:typename:iterator	file:
lowest	std-headers/limits	/^    static T lowest();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
lrint	std-headers/cmath	/^long lrint(double arg);$/;"	p	namespace:std	typeref:typename:long	file:
lrint	std-headers/cmath	/^long lrint(float arg);$/;"	p	namespace:std	typeref:typename:long	file:
lrint	std-headers/cmath	/^long lrint(long double arg);$/;"	p	namespace:std	typeref:typename:long	file:
lround	std-headers/cmath	/^long lround(double arg);$/;"	p	namespace:std	typeref:typename:long	file:
lround	std-headers/cmath	/^long lround(float arg);$/;"	p	namespace:std	typeref:typename:long	file:
lround	std-headers/cmath	/^long lround(long double arg);$/;"	p	namespace:std	typeref:typename:long	file:
lt	std-headers/string	/^    static bool lt(char_type a, char_type b);$/;"	p	class:std::char_traits	typeref:typename:bool	file:
m	std-headers/random	/^    result_type m() const;$/;"	p	class:std::fisher_f_distribution	typeref:typename:result_type	file:
m	std-headers/random	/^    result_type m() const;$/;"	p	class:std::lognormal_distribution	typeref:typename:result_type	file:
make_error_code	std-headers/ios	/^std::error_code make_error_code(std::io_errc e);$/;"	p	namespace:std	typeref:typename:std::error_code	file:
make_error_code	std-headers/system_error	/^std::error_code make_error_code(std::errc e);$/;"	p	namespace:std	typeref:typename:std::error_code	file:
make_error_condition	std-headers/ios	/^std::error_condition make_error_condition(std::io_errc e);$/;"	p	namespace:std	typeref:typename:std::error_condition	file:
make_error_condition	std-headers/system_error	/^std::error_condition make_error_condition(std::errc e);$/;"	p	namespace:std	typeref:typename:std::error_condition	file:
make_exception_ptr	std-headers/exception	/^std::exception_ptr make_exception_ptr(E e);$/;"	p	namespace:std	typeref:typename:std::exception_ptr	file:
make_heap	std-headers/algorithm	/^void make_heap(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
make_heap	std-headers/algorithm	/^void make_heap(RandomIt first, RandomIt last,$/;"	p	namespace:std	typeref:typename:void	file:
make_move_iterator	std-headers/iterator	/^std::move_iterator<Iterator> make_move_iterator(Iterator i);$/;"	p	namespace:std	typeref:typename:std::move_iterator<Iterator>	file:
make_move_iterator	std-headers/iterator	/^std::move_iterator<Iterator> make_move_iterator(const Iterator& i);$/;"	p	namespace:std	typeref:typename:std::move_iterator<Iterator>	file:
make_pair	std-headers/utility	/^std::pair<T1, T2> make_pair(T1 t, T2 u);$/;"	p	namespace:std	typeref:typename:std::pair<T1,T2>	file:
make_pair	std-headers/utility	/^std::pair<T1, T2> make_pair(T1&& t, T2&& u);$/;"	p	namespace:std	typeref:typename:std::pair<T1,T2>	file:
make_ready_at_thread_exit	std-headers/future	/^    void make_ready_at_thread_exit(ArgTypes... args);$/;"	p	class:std::packaged_task	typeref:typename:void	file:
make_reverse_iterator	std-headers/iterator	/^std::reverse_iterator<Iterator> make_reverse_iterator(Iterator i);$/;"	p	namespace:std	typeref:typename:std::reverse_iterator<Iterator>	file:
make_shared	std-headers/memory	/^shared_ptr<T> make_shared(Args&& ... args);$/;"	p	namespace:std	typeref:typename:shared_ptr<T>	file:
make_signed	std-headers/type_traits	/^template<class T> struct make_signed {$/;"	s	namespace:std	file:
make_tuple	std-headers/tuple	/^tuple<VTypes...> make_tuple(Types&& ... args);$/;"	p	namespace:std	typeref:typename:tuple<VTypes...>	file:
make_unique	std-headers/memory	/^unique_ptr<T> make_unique(Args&& ... args);$/;"	p	namespace:std	typeref:typename:unique_ptr<T>	file:
make_unsigned	std-headers/type_traits	/^template<class T> struct make_unsigned {$/;"	s	namespace:std	file:
malloc	std-headers/cstdlib	/^void* malloc(std::size_t size);$/;"	p	namespace:std	typeref:typename:void *	file:
map	std-headers/map	/^    > class map {$/;"	c	namespace:std	file:
map	std-headers/map	/^    explicit map(const Allocator& alloc);$/;"	p	class:std::map	file:
map	std-headers/map	/^    explicit map(const Compare& comp = Compare(),$/;"	p	class:std::map	file:
map	std-headers/map	/^    explicit map(const Compare& comp,$/;"	p	class:std::map	file:
map	std-headers/map	/^    map();$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(InputIt first, InputIt last, const Allocator& alloc);$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(InputIt first, InputIt last,$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(const map& other);$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(const map& other, const Allocator& alloc);$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(map&& other);$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(map&& other, const Allocator& alloc);$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::map	file:
map	std-headers/map	/^    map(std::initializer_list<value_type> init,$/;"	p	class:std::map	file:
mapped_type	std-headers/map	/^    typedef T mapped_type;$/;"	t	class:std::map	typeref:typename:T	file:
mapped_type	std-headers/map	/^    typedef T mapped_type;$/;"	t	class:std::multimap	typeref:typename:T	file:
mapped_type	std-headers/unordered_map	/^    typedef T mapped_type;$/;"	t	class:std::unordered_map	typeref:typename:T	file:
mapped_type	std-headers/unordered_map	/^    typedef T mapped_type;$/;"	t	class:std::unordered_multimap	typeref:typename:T	file:
mark_count	std-headers/regex	/^    unsigned mark_count() const;$/;"	p	class:std::basic_regex	typeref:typename:unsigned	file:
mask	std-headers/locale	/^    typedef int mask; \/\/ actually unspecified$/;"	t	class:std::ctype_base	typeref:typename:int	file:
mask_array	std-headers/valarray	/^    mask_array() = delete;$/;"	p	class:std::mask_array	file:
mask_array	std-headers/valarray	/^    mask_array(const mask_array& other);$/;"	p	class:std::mask_array	file:
mask_array	std-headers/valarray	/^class mask_array {$/;"	c	namespace:std	file:
mask_bits	std-headers/random	/^    static constexpr size_t mask_bits;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
match_any	std-headers/regex	/^constexpr match_flag_type match_any;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_continuous	std-headers/regex	/^constexpr match_flag_type match_continuous;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_default	std-headers/regex	/^constexpr match_flag_type match_default = 0;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_flag_type	std-headers/regex	/^typedef int match_flag_type; \/\/ actually unspecified$/;"	t	namespace:std::regex_constants	typeref:typename:int	file:
match_not_bol	std-headers/regex	/^constexpr match_flag_type match_not_bol;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_not_bow	std-headers/regex	/^constexpr match_flag_type match_not_bow;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_not_eol	std-headers/regex	/^constexpr match_flag_type match_not_eol;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_not_eow	std-headers/regex	/^constexpr match_flag_type match_not_eow;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_not_null	std-headers/regex	/^constexpr match_flag_type match_not_null;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_prev_avail	std-headers/regex	/^constexpr match_flag_type match_prev_avail;$/;"	v	namespace:std::regex_constants	typeref:typename:match_flag_type
match_results	std-headers/regex	/^    > class match_results {$/;"	c	namespace:std	file:
match_results	std-headers/regex	/^    explicit match_results(const Allocator& a = Allocator());$/;"	p	class:std::match_results	file:
match_results	std-headers/regex	/^    match_results(const match_results& rhs);$/;"	p	class:std::match_results	file:
match_results	std-headers/regex	/^    match_results(match_results&& rhs);$/;"	p	class:std::match_results	file:
matched	std-headers/regex	/^    bool matched;$/;"	m	class:std::sub_match	typeref:typename:bool	file:
math_errhandling	std-headers/cmath	/^#define math_errhandling /;"	d	file:
max	std-headers/algorithm	/^T max(std::initializer_list<T> ilist);$/;"	p	namespace:std	typeref:typename:T	file:
max	std-headers/algorithm	/^T max(std::initializer_list<T> ilist, Compare comp);$/;"	p	namespace:std	typeref:typename:T	file:
max	std-headers/algorithm	/^const T& max(const T& a, const T& b);$/;"	p	namespace:std	typeref:typename:const T &	file:
max	std-headers/algorithm	/^const T& max(const T& a, const T& b, Compare comp);$/;"	p	namespace:std	typeref:typename:const T &	file:
max	std-headers/algorithm	/^constexpr T max(std::initializer_list<T> ilist);$/;"	p	namespace:std	typeref:typename:T	file:
max	std-headers/algorithm	/^constexpr T max(std::initializer_list<T> ilist, Compare comp);$/;"	p	namespace:std	typeref:typename:T	file:
max	std-headers/algorithm	/^constexpr const T& max(const T& a, const T& b);$/;"	p	namespace:std	typeref:typename:const T &	file:
max	std-headers/algorithm	/^constexpr const T& max(const T& a, const T& b, Compare comp);$/;"	p	namespace:std	typeref:typename:const T &	file:
max	std-headers/chrono	/^    static constexpr Rep max();$/;"	p	struct:std::chrono::duration_values	typeref:typename:Rep	file:
max	std-headers/chrono	/^    static constexpr duration max();$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
max	std-headers/chrono	/^    static constexpr time_point max();$/;"	p	class:std::chrono::time_point	typeref:typename:time_point	file:
max	std-headers/limits	/^    static T max();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::bernoulli_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::binomial_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::cauchy_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::chi_squared_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::discrete_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::exponential_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::extreme_value_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::fisher_f_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::gamma_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::geometric_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::lognormal_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::negative_binomial_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::normal_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::poisson_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::student_t_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::uniform_int_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::uniform_real_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    result_type max() const;$/;"	p	class:std::weibull_distribution	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::discard_block_engine	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::independent_bits_engine	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::linear_congruential_engine	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::mersenne_twister_engine	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::random_device	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::shuffle_order_engine	typeref:typename:result_type	file:
max	std-headers/random	/^    static constexpr result_type max();$/;"	p	class:std::subtract_with_carry_engine	typeref:typename:result_type	file:
max	std-headers/valarray	/^    T max() const;$/;"	p	class:std::valarray	typeref:typename:T	file:
max_align_t	std-headers/cstddef	/^typedef long long max_align_t;$/;"	t	namespace:std::std	typeref:typename:long long	file:
max_bucket_count	std-headers/unordered_map	/^    size_type max_bucket_count() const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
max_bucket_count	std-headers/unordered_map	/^    size_type max_bucket_count() const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
max_bucket_count	std-headers/unordered_set	/^    size_type max_bucket_count() const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
max_bucket_count	std-headers/unordered_set	/^    size_type max_bucket_count() const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
max_element	std-headers/algorithm	/^ForwardIt max_element(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
max_element	std-headers/algorithm	/^ForwardIt max_element(ForwardIt first, ForwardIt last, Compare cmp);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
max_element	std-headers/algorithm	/^constexpr ForwardIt max_element(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
max_element	std-headers/algorithm	/^constexpr ForwardIt max_element(ForwardIt first, ForwardIt last, Compare cmp);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
max_exponent	std-headers/limits	/^    static const int  max_exponent;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
max_exponent10	std-headers/limits	/^    static const int  max_exponent10;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
max_length	std-headers/locale	/^    int max_length() const;$/;"	p	class:std::codecvt	typeref:typename:int	file:
max_load_factor	std-headers/unordered_map	/^    float max_load_factor() const;$/;"	p	class:std::unordered_map	typeref:typename:float	file:
max_load_factor	std-headers/unordered_map	/^    float max_load_factor() const;$/;"	p	class:std::unordered_multimap	typeref:typename:float	file:
max_load_factor	std-headers/unordered_map	/^    void max_load_factor(float ml);$/;"	p	class:std::unordered_map	typeref:typename:void	file:
max_load_factor	std-headers/unordered_map	/^    void max_load_factor(float ml);$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
max_load_factor	std-headers/unordered_set	/^    float max_load_factor() const;$/;"	p	class:std::unordered_multiset	typeref:typename:float	file:
max_load_factor	std-headers/unordered_set	/^    float max_load_factor() const;$/;"	p	class:std::unordered_set	typeref:typename:float	file:
max_load_factor	std-headers/unordered_set	/^    void max_load_factor(float ml);$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
max_load_factor	std-headers/unordered_set	/^    void max_load_factor(float ml);$/;"	p	class:std::unordered_set	typeref:typename:void	file:
max_size	std-headers/array	/^    size_type max_size() const;$/;"	p	class:std::array	typeref:typename:size_type	file:
max_size	std-headers/deque	/^    size_type max_size() const;$/;"	p	class:std::deque	typeref:typename:size_type	file:
max_size	std-headers/forward_list	/^    size_type max_size() const;$/;"	p	class:std::forward_list	typeref:typename:size_type	file:
max_size	std-headers/list	/^    size_type max_size() const;$/;"	p	class:std::list	typeref:typename:size_type	file:
max_size	std-headers/map	/^    size_type max_size() const;$/;"	p	class:std::map	typeref:typename:size_type	file:
max_size	std-headers/map	/^    size_type max_size() const;$/;"	p	class:std::multimap	typeref:typename:size_type	file:
max_size	std-headers/memory	/^    size_type max_size() const;$/;"	p	struct:std::allocator	typeref:typename:size_type	file:
max_size	std-headers/memory	/^    static size_type max_size(const Alloc& a);$/;"	p	struct:std::allocator_traits	typeref:typename:size_type	file:
max_size	std-headers/regex	/^    size_type max_size() const;$/;"	p	class:std::match_results	typeref:typename:size_type	file:
max_size	std-headers/scoped_allocator	/^    size_type max_size() const;$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:size_type	file:
max_size	std-headers/set	/^    size_type max_size() const;$/;"	p	class:std::multiset	typeref:typename:size_type	file:
max_size	std-headers/set	/^    size_type max_size() const;$/;"	p	class:std::set	typeref:typename:size_type	file:
max_size	std-headers/string	/^    size_type max_size() const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
max_size	std-headers/unordered_map	/^    size_type max_size() const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
max_size	std-headers/unordered_map	/^    size_type max_size() const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
max_size	std-headers/unordered_set	/^    size_type max_size() const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
max_size	std-headers/unordered_set	/^    size_type max_size() const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
max_size	std-headers/vector	/^    size_type max_size() const;$/;"	p	class:std::vector	typeref:typename:size_type	file:
mblen	std-headers/cstdlib	/^int mblen(const char* s, std::size_t n);$/;"	p	namespace:std	typeref:typename:int	file:
mbrlen	std-headers/cwchar	/^std::size_t mbrlen(const char* s, std::size_t n, std::mbstate_t* ps);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
mbrtoc16	std-headers/cuchar	/^std::size_t mbrtoc16(char16_t* pc16,$/;"	p	namespace:std	typeref:typename:std::size_t	file:
mbrtoc32	std-headers/cuchar	/^std::size_t mbrtoc32(char32_t* pc32,$/;"	p	namespace:std	typeref:typename:std::size_t	file:
mbrtowc	std-headers/cwchar	/^std::size_t mbrtowc(wchar_t* pwc,$/;"	p	namespace:std	typeref:typename:std::size_t	file:
mbsinit	std-headers/cwchar	/^int mbsinit(const std::mbstate_t* ps);$/;"	p	namespace:std	typeref:typename:int	file:
mbsrtowcs	std-headers/cwchar	/^std::size_t mbsrtowcs(wchar_t* dst,$/;"	p	namespace:std	typeref:typename:std::size_t	file:
mbstowcs	std-headers/cstdlib	/^std::size_t mbstowcs(wchar_t* dst, const char* src, std::size_t len);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
mbtowc	std-headers/cstdlib	/^int mbtowc(wchar_t* pwc, const char* s, std::size_t n);$/;"	p	namespace:std	typeref:typename:int	file:
mdy	std-headers/locale	/^        no_order, dmy, mdy, ymd, ydm$/;"	e	enum:std::time_base::dateorder	file:
mean	std-headers/random	/^    double mean() const;$/;"	p	class:std::poisson_distribution	typeref:typename:double	file:
mean	std-headers/random	/^    result_type mean() const;$/;"	p	class:std::normal_distribution	typeref:typename:result_type	file:
mega	std-headers/ratio	/^typedef ratio<                  1000000, 1> mega;$/;"	t	namespace:std	typeref:typename:ratio<1000000,1>	file:
mem_fn	std-headers/functional	/^std::function<R> mem_fn(R T::* pm);$/;"	p	namespace:std	typeref:typename:std::function<R>	file:
memchr	std-headers/cstring	/^const void* memchr(const void* ptr, int ch, std::size_t count);$/;"	p	namespace:std	typeref:typename:const void *	file:
memchr	std-headers/cstring	/^void* memchr(void* ptr, int ch, std::size_t count);$/;"	p	namespace:std	typeref:typename:void *	file:
memcmp	std-headers/cstring	/^int memcmp(const void* lhs, const void* rhs, std::size_t count);$/;"	p	namespace:std	typeref:typename:int	file:
memcpy	std-headers/cstring	/^void* memcpy(void* dest, const void* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:void *	file:
memmove	std-headers/cstring	/^void* memmove(void* dest, const void* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:void *	file:
memory_order	std-headers/atomic	/^enum memory_order {$/;"	g	namespace:std	file:
memory_order_acq_rel	std-headers/atomic	/^    memory_order_acq_rel,$/;"	e	enum:std::memory_order	file:
memory_order_acquire	std-headers/atomic	/^    memory_order_acquire,$/;"	e	enum:std::memory_order	file:
memory_order_consume	std-headers/atomic	/^    memory_order_consume,$/;"	e	enum:std::memory_order	file:
memory_order_relaxed	std-headers/atomic	/^    memory_order_relaxed,$/;"	e	enum:std::memory_order	file:
memory_order_release	std-headers/atomic	/^    memory_order_release,$/;"	e	enum:std::memory_order	file:
memory_order_seq_cst	std-headers/atomic	/^    memory_order_seq_cst$/;"	e	enum:std::memory_order	file:
memset	std-headers/cstring	/^void* memset(void* dest, int ch, std::size_t count);$/;"	p	namespace:std	typeref:typename:void *	file:
merge	std-headers/algorithm	/^OutputIt merge(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
merge	std-headers/forward_list	/^    void merge(forward_list& other);$/;"	p	class:std::forward_list	typeref:typename:void	file:
merge	std-headers/forward_list	/^    void merge(forward_list& other, Compare comp);$/;"	p	class:std::forward_list	typeref:typename:void	file:
merge	std-headers/forward_list	/^    void merge(forward_list&& other);$/;"	p	class:std::forward_list	typeref:typename:void	file:
merge	std-headers/forward_list	/^    void merge(forward_list&& other, Compare comp);$/;"	p	class:std::forward_list	typeref:typename:void	file:
merge	std-headers/list	/^    void merge(list& other);$/;"	p	class:std::list	typeref:typename:void	file:
merge	std-headers/list	/^    void merge(list& other, Compare comp);$/;"	p	class:std::list	typeref:typename:void	file:
merge	std-headers/list	/^    void merge(list&& other);$/;"	p	class:std::list	typeref:typename:void	file:
merge	std-headers/list	/^    void merge(list&& other, Compare comp);$/;"	p	class:std::list	typeref:typename:void	file:
mersenne_twister_engine	std-headers/random	/^    > class mersenne_twister_engine {$/;"	c	namespace:std	file:
mersenne_twister_engine	std-headers/random	/^    explicit mersenne_twister_engine(Sseq& s);$/;"	p	class:std::mersenne_twister_engine	file:
mersenne_twister_engine	std-headers/random	/^    explicit mersenne_twister_engine(result_type value = default_seed);$/;"	p	class:std::mersenne_twister_engine	file:
mersenne_twister_engine	std-headers/random	/^    mersenne_twister_engine(const mersenne_twister_engine& other);$/;"	p	class:std::mersenne_twister_engine	file:
message	std-headers/system_error	/^    std::string message() const;$/;"	p	class:std::error_code	typeref:typename:std::string	file:
message	std-headers/system_error	/^    std::string message() const;$/;"	p	class:std::error_condition	typeref:typename:std::string	file:
message	std-headers/system_error	/^    virtual std::string message(int condition) const = 0;$/;"	p	class:std::error_category	typeref:typename:std::string	file:
message_size	std-headers/system_error	/^    message_size,                       \/\/  EMSGSIZE$/;"	e	enum:std::errc	file:
messages	std-headers/locale	/^    explicit messages(std::size_t refs = 0);$/;"	p	class:std::messages	file:
messages	std-headers/locale	/^    static const category messages;$/;"	m	class:std::locale	typeref:typename:const category	file:
messages	std-headers/locale	/^class messages : public messages_base, public locale::facet {$/;"	c	namespace:std	file:
messages_base	std-headers/locale	/^class messages_base {$/;"	c	namespace:std	file:
messages_byname	std-headers/locale	/^    explicit messages_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::messages_byname	file:
messages_byname	std-headers/locale	/^    explicit messages_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::messages_byname	file:
messages_byname	std-headers/locale	/^class messages_byname : public messages<CharT> {$/;"	c	namespace:std	file:
micro	std-headers/ratio	/^typedef ratio<1,                   1000000> micro;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000>	file:
microseconds	std-headers/chrono	/^typedef duration<int, std::micro> microseconds;$/;"	t	namespace:std::chrono	typeref:typename:duration<int,std::micro>	file:
milli	std-headers/ratio	/^typedef ratio<1,                      1000> milli;$/;"	t	namespace:std	typeref:typename:ratio<1,1000>	file:
milliseconds	std-headers/chrono	/^typedef duration<int, std::milli> milliseconds;$/;"	t	namespace:std::chrono	typeref:typename:duration<int,std::milli>	file:
min	std-headers/algorithm	/^T min(std::initializer_list<T> ilist);$/;"	p	namespace:std	typeref:typename:T	file:
min	std-headers/algorithm	/^T min(std::initializer_list<T> ilist, Compare comp);$/;"	p	namespace:std	typeref:typename:T	file:
min	std-headers/algorithm	/^const T& min(const T& a, const T& b);$/;"	p	namespace:std	typeref:typename:const T &	file:
min	std-headers/algorithm	/^const T& min(const T& a, const T& b, Compare comp);$/;"	p	namespace:std	typeref:typename:const T &	file:
min	std-headers/algorithm	/^constexpr T min(std::initializer_list<T> ilist);$/;"	p	namespace:std	typeref:typename:T	file:
min	std-headers/algorithm	/^constexpr T min(std::initializer_list<T> ilist, Compare comp);$/;"	p	namespace:std	typeref:typename:T	file:
min	std-headers/algorithm	/^constexpr const T& min(const T& a, const T& b);$/;"	p	namespace:std	typeref:typename:const T &	file:
min	std-headers/algorithm	/^constexpr const T& min(const T& a, const T& b, Compare comp);$/;"	p	namespace:std	typeref:typename:const T &	file:
min	std-headers/chrono	/^    static constexpr Rep min();$/;"	p	struct:std::chrono::duration_values	typeref:typename:Rep	file:
min	std-headers/chrono	/^    static constexpr duration min();$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
min	std-headers/chrono	/^    static constexpr time_point min();$/;"	p	class:std::chrono::time_point	typeref:typename:time_point	file:
min	std-headers/limits	/^    static T min();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::bernoulli_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::binomial_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::cauchy_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::chi_squared_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::discrete_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::exponential_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::extreme_value_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::fisher_f_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::gamma_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::geometric_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::lognormal_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::negative_binomial_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::normal_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::poisson_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::student_t_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::uniform_int_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::uniform_real_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    result_type min() const;$/;"	p	class:std::weibull_distribution	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::discard_block_engine	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::independent_bits_engine	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::linear_congruential_engine	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::mersenne_twister_engine	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::random_device	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::shuffle_order_engine	typeref:typename:result_type	file:
min	std-headers/random	/^    static constexpr result_type min();$/;"	p	class:std::subtract_with_carry_engine	typeref:typename:result_type	file:
min	std-headers/valarray	/^    T min() const;$/;"	p	class:std::valarray	typeref:typename:T	file:
min_element	std-headers/algorithm	/^ForwardIt min_element(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
min_element	std-headers/algorithm	/^ForwardIt min_element(ForwardIt first, ForwardIt last, Compare cmp);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
min_element	std-headers/algorithm	/^constexpr ForwardIt min_element(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
min_element	std-headers/algorithm	/^constexpr ForwardIt min_element(ForwardIt first, ForwardIt last, Compare cmp);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
min_exponent	std-headers/limits	/^    static const int  min_exponent;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
min_exponent10	std-headers/limits	/^    static const int  min_exponent10;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
minmax	std-headers/algorithm	/^constexpr std::pair<T, T> minmax(std::initializer_list<T> ilist);$/;"	p	namespace:std	typeref:typename:std::pair<T,T>	file:
minmax	std-headers/algorithm	/^constexpr std::pair<T, T> minmax(std::initializer_list<T> ilist, Compare comp);$/;"	p	namespace:std	typeref:typename:std::pair<T,T>	file:
minmax	std-headers/algorithm	/^constexpr std::pair<const T&, const T&> minmax(const T& a, const T& b);$/;"	p	namespace:std	typeref:typename:std::pair<const T &,const T &>	file:
minmax	std-headers/algorithm	/^constexpr std::pair<const T&, const T&> minmax(const T& a, const T& b,$/;"	p	namespace:std	typeref:typename:std::pair<const T &,const T &>	file:
minmax	std-headers/algorithm	/^std::pair<T, T> minmax(std::initializer_list<T> ilist);$/;"	p	namespace:std	typeref:typename:std::pair<T,T>	file:
minmax	std-headers/algorithm	/^std::pair<T, T> minmax(std::initializer_list<T> ilist, Compare comp);$/;"	p	namespace:std	typeref:typename:std::pair<T,T>	file:
minmax	std-headers/algorithm	/^std::pair<const T&, const T&> minmax(const T& a, const T& b);$/;"	p	namespace:std	typeref:typename:std::pair<const T &,const T &>	file:
minmax	std-headers/algorithm	/^std::pair<const T&, const T&> minmax(const T& a, const T& b,$/;"	p	namespace:std	typeref:typename:std::pair<const T &,const T &>	file:
minmax_element	std-headers/algorithm	/^minmax_element(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:std::pair<ForwardIt,ForwardIt>	file:
minmax_element	std-headers/algorithm	/^minmax_element(ForwardIt first, ForwardIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:std::pair<ForwardIt,ForwardIt>	file:
minstd_rand	std-headers/random	/^typedef std::linear_congruential_engine<std::uint_fast32_t, 48271, 0, 2147483647> minstd_rand;$/;"	t	namespace:std	typeref:typename:std::linear_congruential_engine<std::uint_fast32_t,48271,0,2147483647>	file:
minstd_rand0	std-headers/random	/^typedef std::linear_congruential_engine<std::uint_fast32_t, 16807, 0, 2147483647> minstd_rand0;$/;"	t	namespace:std	typeref:typename:std::linear_congruential_engine<std::uint_fast32_t,16807,0,2147483647>	file:
minus	std-headers/functional	/^struct minus {$/;"	s	namespace:std	file:
minutes	std-headers/chrono	/^typedef duration<int, std::ratio<60>> minutes;$/;"	t	namespace:std::chrono	typeref:typename:duration<int,std::ratio<60>>	file:
mismatch	std-headers/algorithm	/^mismatch(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:std::pair<InputIt1,InputIt2>	file:
mktime	std-headers/ctime	/^std::time_t mktime(std::tm* time);$/;"	p	namespace:std	typeref:typename:std::time_t	file:
modf	std-headers/cmath	/^double      modf(double x, double* iptr);$/;"	p	namespace:std	typeref:typename:double	file:
modf	std-headers/cmath	/^float       modf(float x, float* iptr);$/;"	p	namespace:std	typeref:typename:float	file:
modf	std-headers/cmath	/^long double modf(long double x, long double* iptr);$/;"	p	namespace:std	typeref:typename:long double	file:
modulus	std-headers/functional	/^struct modulus {$/;"	s	namespace:std	file:
modulus	std-headers/random	/^    static constexpr UIntType modulus;$/;"	m	class:std::linear_congruential_engine	typeref:typename:UIntType	file:
mon_decimal_point	std-headers/clocale	/^    char* mon_decimal_point;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
mon_grouping	std-headers/clocale	/^    char* mon_grouping;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
mon_thousands_sep	std-headers/clocale	/^    char* mon_thousands_sep;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
monetary	std-headers/locale	/^    static const category monetary;$/;"	m	class:std::locale	typeref:typename:const category	file:
money_base	std-headers/locale	/^class money_base {$/;"	c	namespace:std	file:
money_get	std-headers/locale	/^    > class money_get : public locale::facet  {$/;"	c	namespace:std	file:
money_get	std-headers/locale	/^    explicit money_get(std::size_t refs = 0);$/;"	p	class:std::money_get	file:
money_put	std-headers/locale	/^    > class money_put : public locale::facet  {$/;"	c	namespace:std	file:
money_put	std-headers/locale	/^    explicit money_put(std::size_t refs = 0);$/;"	p	class:std::money_put	file:
moneypunct	std-headers/locale	/^    explicit moneypunct(std::size_t refs = 0);$/;"	p	class:std::moneypunct	file:
moneypunct	std-headers/locale	/^class moneypunct : public money_base, public locale::facet {$/;"	c	namespace:std	file:
moneypunct_byname	std-headers/locale	/^    explicit moneypunct_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::moneypunct_byname	file:
moneypunct_byname	std-headers/locale	/^    explicit moneypunct_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::moneypunct_byname	file:
moneypunct_byname	std-headers/locale	/^class moneypunct_byname : public moneypunct<CharT, International> {$/;"	c	namespace:std	file:
move	std-headers/algorithm	/^OutputIt move(InputIt first, InputIt last, OutputIt d_first);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
move	std-headers/ios	/^    void move(basic_ios& other);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
move	std-headers/ios	/^    void move(basic_ios&& other);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
move	std-headers/string	/^    static char_type* move(char_type* desc, const char_type* src, size_t count);$/;"	p	class:std::char_traits	typeref:typename:char_type *	file:
move	std-headers/utility	/^typename T&& move(T&& t);   \/\/ SIMPLIFIED: return type$/;"	p	namespace:std	typeref:typename:T &&	file:
move_if_noexcept	std-headers/utility	/^typename T&& move_if_noexcept(T&& t);   \/\/ SIMPLIFIED: return type$/;"	p	namespace:std	typeref:typename:T &&	file:
move_iterator	std-headers/iterator	/^    explicit move_iterator(Iterator x);$/;"	p	class:std::move_iterator	file:
move_iterator	std-headers/iterator	/^    move_iterator();$/;"	p	class:std::move_iterator	file:
move_iterator	std-headers/iterator	/^    template <class U> move_iterator(const move_iterator<U>& other);$/;"	p	class:std::move_iterator	file:
move_iterator	std-headers/iterator	/^class move_iterator {$/;"	c	namespace:std	file:
mt19937	std-headers/random	/^        0xefc60000, 18, 1812433253> mt19937;$/;"	t	namespace:std	file:
mt19937_64	std-headers/random	/^        0xfff7eee000000000, 43, 6364136223846793005> mt19937_64;$/;"	t	namespace:std	file:
multimap	std-headers/map	/^    > class multimap {$/;"	c	namespace:std	file:
multimap	std-headers/map	/^    explicit multimap(const Allocator& alloc);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    explicit multimap(const Compare& comp = Compare(),$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    explicit multimap(const Compare& comp,$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap();$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(InputIt first, InputIt last, const Allocator& alloc);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(InputIt first, InputIt last,$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(const multimap& other);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(const multimap& other, const Allocator& alloc);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(multimap&& other);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(multimap&& other, const Allocator& alloc);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::multimap	file:
multimap	std-headers/map	/^    multimap(std::initializer_list<value_type> init,$/;"	p	class:std::multimap	file:
multiplier	std-headers/random	/^    static constexpr UIntType multiplier;$/;"	m	class:std::linear_congruential_engine	typeref:typename:UIntType	file:
multiplies	std-headers/functional	/^struct multiplies {$/;"	s	namespace:std	file:
multiset	std-headers/set	/^    > class multiset {$/;"	c	namespace:std	file:
multiset	std-headers/set	/^    explicit multiset(const Allocator& alloc);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    explicit multiset(const Compare& comp = Compare(),$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    explicit multiset(const Compare& comp,$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset();$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(InputIt first, InputIt last, const Allocator& alloc);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(InputIt first, InputIt last,$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(const multiset& other);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(const multiset& other, const Allocator& alloc);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(multiset&& other);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(multiset&& other, const Allocator& alloc);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::multiset	file:
multiset	std-headers/set	/^    multiset(std::initializer_list<value_type> init,$/;"	p	class:std::multiset	file:
mutex	std-headers/mutex	/^    constexpr mutex();$/;"	p	class:std::mutex	file:
mutex	std-headers/mutex	/^    mutex(const mutex&) = delete;$/;"	p	class:std::mutex	file:
mutex	std-headers/mutex	/^    mutex_type* mutex() const;$/;"	p	class:std::unique_lock	typeref:typename:mutex_type *	file:
mutex	std-headers/mutex	/^class mutex {$/;"	c	namespace:std	file:
mutex	std-headers/shared_mutex	/^    mutex_type* mutex() const;$/;"	p	class:std::shared_lock	typeref:typename:mutex_type *	file:
mutex_type	std-headers/mutex	/^    typedef Mutex mutex_type;$/;"	t	class:std::lock_guard	typeref:typename:Mutex	file:
mutex_type	std-headers/mutex	/^    typedef Mutex mutex_type;$/;"	t	class:std::unique_lock	typeref:typename:Mutex	file:
mutex_type	std-headers/shared_mutex	/^    typedef Mutex mutex_type;$/;"	t	class:std::shared_lock	typeref:typename:Mutex	file:
n	std-headers/random	/^    result_type n() const;$/;"	p	class:std::chi_squared_distribution	typeref:typename:result_type	file:
n	std-headers/random	/^    result_type n() const;$/;"	p	class:std::fisher_f_distribution	typeref:typename:result_type	file:
n	std-headers/random	/^    result_type n() const;$/;"	p	class:std::student_t_distribution	typeref:typename:result_type	file:
n_cs_precedes	std-headers/clocale	/^    char n_cs_precedes;$/;"	m	struct:std::lconv	typeref:typename:char	file:
n_sep_by_space	std-headers/clocale	/^    char n_sep_by_space;$/;"	m	struct:std::lconv	typeref:typename:char	file:
n_sign_posn	std-headers/clocale	/^    char n_sign_posn;$/;"	m	struct:std::lconv	typeref:typename:char	file:
name	std-headers/locale	/^    std::string name() const;$/;"	p	class:std::locale	typeref:typename:std::string	file:
name	std-headers/system_error	/^    virtual const char* name() const = 0;$/;"	p	class:std::error_category	typeref:typename:const char *	file:
name	std-headers/typeindex	/^    const char* name() const;$/;"	p	class:std::type_index	typeref:typename:const char *	file:
name	std-headers/typeinfo	/^    const char* name() const;$/;"	p	class:std::type_info	typeref:typename:const char *	file:
nan	std-headers/cmath	/^double nan(const char* arg);$/;"	p	namespace:std	typeref:typename:double	file:
nanf	std-headers/cmath	/^float nanf(const char* arg);$/;"	p	namespace:std	typeref:typename:float	file:
nanl	std-headers/cmath	/^long double nanl(const char* arg);$/;"	p	namespace:std	typeref:typename:long double	file:
nano	std-headers/ratio	/^typedef ratio<1,                1000000000> nano;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000000>	file:
nanoseconds	std-headers/chrono	/^typedef duration<int, std::nano> nanoseconds;$/;"	t	namespace:std::chrono	typeref:typename:duration<int,std::nano>	file:
narrow	std-headers/ios	/^    char narrow(char_type c, char dfault) const;$/;"	p	class:std::basic_ios	typeref:typename:char	file:
narrow	std-headers/locale	/^    char narrow(CharT c, char dflt) const;$/;"	p	class:std::ctype	typeref:typename:char	file:
narrow	std-headers/locale	/^    const CharT* narrow(const CharT* beg, const CharT* end,$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
native_handle	std-headers/condition_variable	/^    native_handle_type native_handle();$/;"	p	class:std::condition_variable	typeref:typename:native_handle_type	file:
native_handle	std-headers/mutex	/^    native_handle_type native_handle();$/;"	p	class:std::mutex	typeref:typename:native_handle_type	file:
native_handle	std-headers/mutex	/^    native_handle_type native_handle();$/;"	p	class:std::recursive_mutex	typeref:typename:native_handle_type	file:
native_handle	std-headers/mutex	/^    native_handle_type native_handle();$/;"	p	class:std::recursive_timed_mutex	typeref:typename:native_handle_type	file:
native_handle	std-headers/mutex	/^    native_handle_type native_handle();$/;"	p	class:std::timed_mutex	typeref:typename:native_handle_type	file:
native_handle	std-headers/shared_mutex	/^    native_handle_type native_handle();$/;"	p	class:std::shared_mutex	typeref:typename:native_handle_type	file:
native_handle	std-headers/shared_mutex	/^    native_handle_type native_handle();$/;"	p	class:std::shared_timed_mutex	typeref:typename:native_handle_type	file:
native_handle	std-headers/thread	/^    native_handle_type native_handle();$/;"	p	class:std::thread	typeref:typename:native_handle_type	file:
native_handle_type	std-headers/condition_variable	/^    typedef void* native_handle_type; \/\/ actually implementation-defined$/;"	t	class:std::condition_variable	typeref:typename:void *	file:
native_handle_type	std-headers/mutex	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::mutex	typeref:typename:void *	file:
native_handle_type	std-headers/mutex	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::recursive_mutex	typeref:typename:void *	file:
native_handle_type	std-headers/mutex	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::recursive_timed_mutex	typeref:typename:void *	file:
native_handle_type	std-headers/mutex	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::timed_mutex	typeref:typename:void *	file:
native_handle_type	std-headers/shared_mutex	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::shared_mutex	typeref:typename:void *	file:
native_handle_type	std-headers/shared_mutex	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::shared_timed_mutex	typeref:typename:void *	file:
native_handle_type	std-headers/thread	/^    typedef void* native_handle_type; \/\/ actually impl-defined$/;"	t	class:std::thread	typeref:typename:void *	file:
nearbyint	std-headers/cmath	/^double      nearbyint(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
nearbyint	std-headers/cmath	/^float       nearbyint(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
nearbyint	std-headers/cmath	/^long double nearbyint(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
neg_format	std-headers/locale	/^    pattern neg_format() const;$/;"	p	class:std::moneypunct	typeref:typename:pattern	file:
negate	std-headers/functional	/^struct negate {$/;"	s	namespace:std	file:
negative_binomial_distribution	std-headers/random	/^    explicit negative_binomial_distribution(IntType k = 1, double p = 0.5);$/;"	p	class:std::negative_binomial_distribution	file:
negative_binomial_distribution	std-headers/random	/^    explicit negative_binomial_distribution(const param_type& params);$/;"	p	class:std::negative_binomial_distribution	file:
negative_binomial_distribution	std-headers/random	/^class negative_binomial_distribution {$/;"	c	namespace:std	file:
negative_sign	std-headers/clocale	/^    char* negative_sign;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
negative_sign	std-headers/locale	/^    string_type negative_sign() const;$/;"	p	class:std::moneypunct	typeref:typename:string_type	file:
nested_exception	std-headers/exception	/^    nested_exception();$/;"	p	class:std::nested_exception	file:
nested_exception	std-headers/exception	/^    nested_exception(const nested_exception& other) = default;$/;"	p	class:std::nested_exception	file:
nested_exception	std-headers/exception	/^class nested_exception {$/;"	c	namespace:std	file:
nested_ptr	std-headers/exception	/^    std::exception_ptr nested_ptr() const;$/;"	p	class:std::nested_exception	typeref:typename:std::exception_ptr	file:
network_down	std-headers/system_error	/^    network_down,                       \/\/  ENETDOWN$/;"	e	enum:std::errc	file:
network_reset	std-headers/system_error	/^    network_reset,                      \/\/  ENETRESET$/;"	e	enum:std::errc	file:
network_unreachable	std-headers/system_error	/^    network_unreachable,                \/\/  ENETUNREACH$/;"	e	enum:std::errc	file:
new_handler	std-headers/new	/^typedef void (*new_handler)();$/;"	t	namespace:std	typeref:typename:void (*)()	file:
next	std-headers/iterator	/^ForwardIt next(ForwardIt it,$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
next_permutation	std-headers/algorithm	/^bool next_permutation(BidirIt first, BidirIt last);$/;"	p	namespace:std	typeref:typename:bool	file:
next_permutation	std-headers/algorithm	/^bool next_permutation(BidirIt first, BidirIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:bool	file:
nextafter	std-headers/cmath	/^double      nextafter(double from, double to);$/;"	p	namespace:std	typeref:typename:double	file:
nextafter	std-headers/cmath	/^float       nextafter(float from, float to);$/;"	p	namespace:std	typeref:typename:float	file:
nextafter	std-headers/cmath	/^long double nextafter(long double from, long double to);$/;"	p	namespace:std	typeref:typename:long double	file:
nexttoward	std-headers/cmath	/^double      nexttoward(double from, long double to);$/;"	p	namespace:std	typeref:typename:double	file:
nexttoward	std-headers/cmath	/^float       nexttoward(float from, long double to);$/;"	p	namespace:std	typeref:typename:float	file:
nexttoward	std-headers/cmath	/^long double nexttoward(long double from, long double to);$/;"	p	namespace:std	typeref:typename:long double	file:
no_buffer_space	std-headers/system_error	/^    no_buffer_space,                    \/\/  ENOBUFS$/;"	e	enum:std::errc	file:
no_child_process	std-headers/system_error	/^    no_child_process,                   \/\/  ECHILD$/;"	e	enum:std::errc	file:
no_link	std-headers/system_error	/^    no_link,                            \/\/  ENOLINK$/;"	e	enum:std::errc	file:
no_lock_available	std-headers/system_error	/^    no_lock_available,                  \/\/  ENOLCK$/;"	e	enum:std::errc	file:
no_message	std-headers/system_error	/^    no_message,                         \/\/  ENOMSG$/;"	e	enum:std::errc	file:
no_message_available	std-headers/system_error	/^    no_message_available,               \/\/  ENODATA$/;"	e	enum:std::errc	file:
no_order	std-headers/locale	/^        no_order, dmy, mdy, ymd, ydm$/;"	e	enum:std::time_base::dateorder	file:
no_protocol_option	std-headers/system_error	/^    no_protocol_option,                 \/\/  ENOPROTOOPT$/;"	e	enum:std::errc	file:
no_space_on_device	std-headers/system_error	/^    no_space_on_device,                 \/\/  ENOSPC$/;"	e	enum:std::errc	file:
no_state	std-headers/future	/^    no_state$/;"	e	enum:std::future_errc	file:
no_stream_resources	std-headers/system_error	/^    no_stream_resources,                \/\/  ENOSR$/;"	e	enum:std::errc	file:
no_such_device	std-headers/system_error	/^    no_such_device,                     \/\/  ENODEV$/;"	e	enum:std::errc	file:
no_such_device_or_address	std-headers/system_error	/^    no_such_device_or_address,          \/\/  ENXIO$/;"	e	enum:std::errc	file:
no_such_file_or_directory	std-headers/system_error	/^    no_such_file_or_directory,          \/\/  ENOENT$/;"	e	enum:std::errc	file:
no_such_process	std-headers/system_error	/^    no_such_process,                    \/\/  ESRCH$/;"	e	enum:std::errc	file:
no_timeout	std-headers/condition_variable	/^    no_timeout,$/;"	e	enum:std::cv_status	file:
noboolalpha	std-headers/ios	/^ios_base& noboolalpha(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
noconv	std-headers/locale	/^        noconv$/;"	e	enum:std::codecvt_base::result	file:
none	std-headers/bitset	/^    bool none() const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
none	std-headers/locale	/^        none, space, symbol, sign, value$/;"	e	enum:std::money_base::part	file:
none	std-headers/locale	/^    static const category none;$/;"	m	class:std::locale	typeref:typename:const category	file:
none_of	std-headers/algorithm	/^bool none_of(InputIt first, InputIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:bool	file:
norm	std-headers/complex	/^T norm(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:T	file:
normal_distribution	std-headers/random	/^    explicit normal_distribution(RealType mean = 0.0, RealType stddev = 1.0);$/;"	p	class:std::normal_distribution	file:
normal_distribution	std-headers/random	/^    explicit normal_distribution(const param_type& params);$/;"	p	class:std::normal_distribution	file:
normal_distribution	std-headers/random	/^class normal_distribution {$/;"	c	namespace:std	file:
noshowbase	std-headers/ios	/^ios_base& noshowbase(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
noshowpoint	std-headers/ios	/^ios_base& noshowpoint(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
noshowpos	std-headers/ios	/^ios_base& noshowpos(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
noskipws	std-headers/ios	/^ios_base& noskipws(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
nosubs	std-headers/regex	/^constexpr syntax_option_type nosubs;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
not1	std-headers/functional	/^std::unary_negate<Predicate> not1(const Predicate& pred);$/;"	p	namespace:std	typeref:typename:std::unary_negate<Predicate>	file:
not2	std-headers/functional	/^std::binary_negate<Predicate> not2(const Predicate& pred);$/;"	p	namespace:std	typeref:typename:std::binary_negate<Predicate>	file:
not_a_directory	std-headers/system_error	/^    not_a_directory,                    \/\/  ENOTDIR$/;"	e	enum:std::errc	file:
not_a_socket	std-headers/system_error	/^    not_a_socket,                       \/\/  ENOTSOCK$/;"	e	enum:std::errc	file:
not_a_stream	std-headers/system_error	/^    not_a_stream,                       \/\/  ENOSTR$/;"	e	enum:std::errc	file:
not_connected	std-headers/system_error	/^    not_connected,                      \/\/  ENOTCONN$/;"	e	enum:std::errc	file:
not_enough_memory	std-headers/system_error	/^    not_enough_memory,                  \/\/  ENOMEM$/;"	e	enum:std::errc	file:
not_eof	std-headers/string	/^    static int_type not_eof(int_type c);$/;"	p	class:std::char_traits	typeref:typename:int_type	file:
not_equal_to	std-headers/functional	/^struct not_equal_to {$/;"	s	namespace:std	file:
not_supported	std-headers/system_error	/^    not_supported,                      \/\/  ENOTSUP$/;"	e	enum:std::errc	file:
nothrow	std-headers/new	/^extern const std::nothrow_t nothrow;$/;"	x	namespace:std	typeref:typename:const std::nothrow_t
nothrow_t	std-headers/new	/^struct nothrow_t {};$/;"	s	namespace:std	file:
notify_all	std-headers/condition_variable	/^    void notify_all();$/;"	p	class:std::condition_variable	typeref:typename:void	file:
notify_all	std-headers/condition_variable	/^    void notify_all();$/;"	p	class:std::condition_variable_any	typeref:typename:void	file:
notify_all_at_thread_exit	std-headers/condition_variable	/^void notify_all_at_thread_exit(std::condition_variable& cond,$/;"	p	namespace:std	typeref:typename:void	file:
notify_one	std-headers/condition_variable	/^    void notify_one();$/;"	p	class:std::condition_variable	typeref:typename:void	file:
notify_one	std-headers/condition_variable	/^    void notify_one();$/;"	p	class:std::condition_variable_any	typeref:typename:void	file:
nounitbuf	std-headers/ios	/^ios_base& nounitbuf(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
nouppercase	std-headers/ios	/^ios_base& nouppercase(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
now	std-headers/chrono	/^    static std::chrono::time_point<std::chrono::high_resolution_clock> now();$/;"	p	class:std::chrono::high_resolution_clock	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>	file:
now	std-headers/chrono	/^    static std::chrono::time_point<std::chrono::steady_clock> now();$/;"	p	class:std::chrono::steady_clock	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>	file:
now	std-headers/chrono	/^    static std::chrono::time_point<std::chrono::system_clock> now();$/;"	p	class:std::chrono::system_clock	typeref:typename:std::chrono::time_point<std::chrono::system_clock>	file:
npos	std-headers/string	/^    static const size_type npos = -1;$/;"	m	class:std::basic_string	typeref:typename:const size_type	file:
nth_element	std-headers/algorithm	/^void nth_element(RandomIt first, RandomIt nth, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
nth_element	std-headers/algorithm	/^void nth_element(RandomIt first, RandomIt nth, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
nullptr_t	std-headers/cstddef	/^typedef void* nullptr_t;$/;"	t	namespace:std::std	typeref:typename:void *	file:
num	std-headers/ratio	/^    static constexpr intmax_t num;$/;"	m	struct:std::ratio	typeref:typename:intmax_t	file:
num_get	std-headers/locale	/^    > class num_get : public locale::facet {$/;"	c	namespace:std	file:
num_get	std-headers/locale	/^    explicit num_get(std::size_t refs = 0);$/;"	p	class:std::num_get	file:
num_put	std-headers/locale	/^    > class num_put : public locale::facet {$/;"	c	namespace:std	file:
num_put	std-headers/locale	/^    explicit num_put(std::size_t refs = 0);$/;"	p	class:std::num_put	file:
numeric	std-headers/locale	/^    static const category numeric;$/;"	m	class:std::locale	typeref:typename:const category	file:
numeric_limits	std-headers/limits	/^class numeric_limits {$/;"	c	namespace:std	file:
numpunct	std-headers/locale	/^    explicit numpunct(std::size_t refs = 0);$/;"	p	class:std::numpunct	file:
numpunct	std-headers/locale	/^class numpunct : public locale::facet  {$/;"	c	namespace:std	file:
numpunct_byname	std-headers/locale	/^    explicit numpunct_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::numpunct_byname	file:
numpunct_byname	std-headers/locale	/^    explicit numpunct_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::numpunct_byname	file:
numpunct_byname	std-headers/locale	/^class numpunct_byname : public numpunct<CharT> {$/;"	c	namespace:std	file:
oct	std-headers/ios	/^    static constexpr fmtflags oct;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
oct	std-headers/ios	/^ios_base& oct(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
off_type	std-headers/ios	/^    typedef typename Traits::off_type off_type;$/;"	t	class:std::basic_ios	typeref:typename:Traits::off_type	file:
off_type	std-headers/streambuf	/^    typedef typename traits_type::off_type off_type;$/;"	t	class:std::basic_streambuf	typeref:typename:traits_type::off_type	file:
off_type	std-headers/string	/^    typedef streamoff off_type; \/\/ actually impl-defined$/;"	t	class:std::char_traits	typeref:typename:streamoff	file:
offsetof	std-headers/cstddef	/^#define offsetof(/;"	d	file:
ofstream	std-headers/fstream	/^typedef basic_ofstream<char> ofstream;$/;"	t	namespace:std	typeref:typename:basic_ofstream<char>	file:
ofstream	std-headers/iosfwd	/^typedef basic_ofstream<char> ofstream;$/;"	t	namespace:std	typeref:typename:basic_ofstream<char>	file:
ok	std-headers/locale	/^        ok,$/;"	e	enum:std::codecvt_base::result	file:
once_flag	std-headers/mutex	/^    constexpr once_flag();$/;"	p	class:std::once_flag	file:
once_flag	std-headers/mutex	/^class once_flag {$/;"	c	namespace:std	file:
open	std-headers/fstream	/^    basic_filebuf* open(const char* s, ios_base::openmode mode);$/;"	p	class:std::basic_filebuf	typeref:typename:basic_filebuf *	file:
open	std-headers/fstream	/^    basic_filebuf* open(const string& str, ios_base::openmode mode);$/;"	p	class:std::basic_filebuf	typeref:typename:basic_filebuf *	file:
open	std-headers/fstream	/^    void open(const char* filename,$/;"	p	class:std::basic_fstream	typeref:typename:void	file:
open	std-headers/fstream	/^    void open(const char* filename,$/;"	p	class:std::basic_ifstream	typeref:typename:void	file:
open	std-headers/fstream	/^    void open(const char* filename,$/;"	p	class:std::basic_ofstream	typeref:typename:void	file:
open	std-headers/fstream	/^    void open(const std::string& filename,$/;"	p	class:std::basic_fstream	typeref:typename:void	file:
open	std-headers/fstream	/^    void open(const std::string& filename,$/;"	p	class:std::basic_ifstream	typeref:typename:void	file:
open	std-headers/fstream	/^    void open(const std::string& filename,$/;"	p	class:std::basic_ofstream	typeref:typename:void	file:
open	std-headers/locale	/^    catalog open(const std::basic_string<char>& name, const std::locale& loc) const;$/;"	p	class:std::messages	typeref:typename:catalog	file:
openmode	std-headers/ios	/^    typedef int openmode; \/\/ actually impl-defined$/;"	t	class:std::ios_base	typeref:typename:int	file:
operation_canceled	std-headers/system_error	/^    operation_canceled,                 \/\/  ECANCELED$/;"	e	enum:std::errc	file:
operation_in_progress	std-headers/system_error	/^    operation_in_progress,              \/\/  EINPROGRESS$/;"	e	enum:std::errc	file:
operation_not_permitted	std-headers/system_error	/^    operation_not_permitted,            \/\/  EPERM$/;"	e	enum:std::errc	file:
operation_not_supported	std-headers/system_error	/^    operation_not_supported,            \/\/  EOPNOTSUPP$/;"	e	enum:std::errc	file:
operation_would_block	std-headers/system_error	/^    operation_would_block,              \/\/  EWOULDBLOCK$/;"	e	enum:std::errc	file:
operator !	std-headers/ios	/^    bool operator!() const;$/;"	p	class:std::basic_ios	typeref:typename:bool	file:
operator !	std-headers/valarray	/^    valarray<bool> operator!() const;$/;"	p	class:std::valarray	typeref:typename:valarray<bool>	file:
operator !=	std-headers/array	/^bool operator!=(const array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/bitset	/^    bool operator!=(const bitset<N>& rhs) const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
operator !=	std-headers/chrono	/^bool operator!=(const time_point<Clock, Dur1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator !=	std-headers/chrono	/^constexpr bool operator!=(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator !=	std-headers/complex	/^bool operator!=(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/deque	/^bool operator!=(const deque<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/forward_list	/^bool operator!=(const forward_list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/functional	/^bool operator!=(const std::function<R(ArgTypes...)>& f, std::nullptr_t);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/functional	/^bool operator!=(std::nullptr_t, const std::function<R(ArgTypes...)>& f);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/iterator	/^bool operator!=(const istream_iterator<T, CharT, Traits, Dist>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/iterator	/^bool operator!=(const istreambuf_iterator<CharT, Traits>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/iterator	/^bool operator!=(const move_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/iterator	/^bool operator!=(const ostream_iterator<T, CharT, Traits>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/iterator	/^bool operator!=(const reverse_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/list	/^bool operator!=(const list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/locale	/^    bool operator!=(const locale& other) const;$/;"	p	class:std::locale	typeref:typename:bool	file:
operator !=	std-headers/map	/^bool operator!=(const map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/map	/^bool operator!=(const multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/memory	/^bool operator!=(const allocator<T1>& lhs, const allocator<T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/memory	/^bool operator!=(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/memory	/^bool operator!=(const shared_ptr<T>& lhs, std::nullptr_t rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/memory	/^bool operator!=(std::nullptr_t lhs, const shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/queue	/^bool operator!=(priority_queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/queue	/^bool operator!=(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const bernoulli_distribution& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const binomial_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const cauchy_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const chi_squared_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const discard_block_engine<Engine, p, r>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const discrete_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const exponential_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const extreme_value_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const fisher_f_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const gamma_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const geometric_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const lognormal_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const negative_binomial_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const normal_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const piecewise_constant_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const piecewise_linear_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const poisson_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const student_t_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const uniform_int_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const uniform_real_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/random	/^bool operator!=(const weibull_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/regex	/^    bool operator!=(const regex_iterator& rhs) const;$/;"	p	class:std::regex_iterator	typeref:typename:bool	file:
operator !=	std-headers/regex	/^    bool operator!=(const regex_token_iterator& rhs) const;$/;"	p	class:std::regex_token_iterator	typeref:typename:bool	file:
operator !=	std-headers/regex	/^bool operator!=(match_results<BidirIt, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/scoped_allocator	/^bool operator!=(const scoped_allocator_adaptor<OuterAlloc1, InnerAllocs...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/set	/^bool operator!=(const multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/set	/^bool operator!=(const set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/stack	/^bool operator!=(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/string	/^bool operator!=(const CharT* lhs, const basic_string<CharT, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/string	/^bool operator!=(const basic_string<CharT, Traits, Alloc>& lhs, const CharT* rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/string	/^bool operator!=(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/string	/^bool operator!=(const fpos<State>& x, const fpos<State>& y);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/system_error	/^    bool operator!=(const error_category& rhs) const;$/;"	p	class:std::error_category	typeref:typename:bool	file:
operator !=	std-headers/system_error	/^bool operator!=(const error_code& lhs, const error_code& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/system_error	/^bool operator!=(const error_code& lhs, const error_condition& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/system_error	/^bool operator!=(const error_condition& lhs, const error_code& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/system_error	/^bool operator!=(const error_condition& lhs, const error_condition& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/thread	/^bool operator!=(thread::id lhs, thread::id rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/tuple	/^bool operator!=(const tuple<TTypes...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/typeindex	/^    bool operator!=(const type_index& rhs) const;$/;"	p	class:std::type_index	typeref:typename:bool	file:
operator !=	std-headers/typeinfo	/^    bool operator!=(const type_info& rhs) const;$/;"	p	class:std::type_info	typeref:typename:bool	file:
operator !=	std-headers/unordered_map	/^bool operator!=(const unordered_map<Key, T, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/unordered_map	/^bool operator!=(const unordered_multimap<Key, T, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/unordered_set	/^bool operator!=(const unordered_multiset<Key, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/unordered_set	/^bool operator!=(const unordered_set<Key, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/utility	/^bool operator!=(const T& lhs, const T& rhs);$/;"	p	namespace:std::rel_ops	typeref:typename:bool	file:
operator !=	std-headers/utility	/^bool operator!=(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator !=	std-headers/valarray	/^valarray<bool> operator!=(const T& lhsv, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator !=	std-headers/valarray	/^valarray<bool> operator!=(const valarray<T>& lhs, const T& rhsv);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator !=	std-headers/valarray	/^valarray<bool> operator!=(const valarray<T>& lhs, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator !=	std-headers/vector	/^bool operator!=(const vector<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator %	std-headers/chrono	/^constexpr operator%(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period1> 	file:
operator %	std-headers/chrono	/^constexpr operator%(const duration<Rep1, Period>& d,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period> 	file:
operator %	std-headers/valarray	/^template <class T> std::valarray<T> operator% (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator %	std-headers/valarray	/^template <class T> std::valarray<T> operator% (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator %	std-headers/valarray	/^template <class T> std::valarray<T> operator% (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator %=	std-headers/chrono	/^    duration& operator%=(const duration& rhs);$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator %=	std-headers/chrono	/^    duration& operator%=(const rep& rhs);$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator %=	std-headers/valarray	/^    valarray<T> operator%=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator %=	std-headers/valarray	/^    valarray<T> operator%=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator %=	std-headers/valarray	/^    void operator%=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator %=	std-headers/valarray	/^    void operator%=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator %=	std-headers/valarray	/^    void operator%=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator %=	std-headers/valarray	/^    void operator%=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator &	std-headers/bitset	/^bitset<N> operator&(const bitset<N>& lhs, const bitset<N>& rhs);$/;"	p	namespace:std	typeref:typename:bitset<N>	file:
operator &	std-headers/valarray	/^template <class T> std::valarray<T> operator& (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator &	std-headers/valarray	/^template <class T> std::valarray<T> operator& (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator &	std-headers/valarray	/^template <class T> std::valarray<T> operator& (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator &&	std-headers/valarray	/^template <class T> std::valarray<bool> operator&&(const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<bool>	file:
operator &&	std-headers/valarray	/^template <class T> std::valarray<bool> operator&&(const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<bool>	file:
operator &&	std-headers/valarray	/^template <class T> std::valarray<bool> operator&&(const std::valarray<T>& lhs, const std::valarr/;"	p	namespace:std	typeref:typename:std::valarray<bool>	file:
operator &=	std-headers/atomic	/^    T operator&=(T arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator &=	std-headers/atomic	/^    T operator&=(T arg);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator &=	std-headers/bitset	/^    bitset<N>& operator&=(const bitset<N>& other);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
operator &=	std-headers/valarray	/^    valarray<T> operator&=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator &=	std-headers/valarray	/^    valarray<T> operator&=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator &=	std-headers/valarray	/^    void operator&=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator &=	std-headers/valarray	/^    void operator&=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator &=	std-headers/valarray	/^    void operator&=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator &=	std-headers/valarray	/^    void operator&=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator ()	std-headers/functional	/^    R operator()(ArgTypes... args) const;$/;"	p	class:std::function	typeref:typename:R	file:
operator ()	std-headers/functional	/^    T operator()(const T& arg) const;$/;"	p	struct:std::bit_not	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& arg) const;$/;"	p	struct:std::negate	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::bit_and	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::bit_or	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::bit_xor	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::divides	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::minus	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::modulus	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::multiplies	typeref:typename:T	file:
operator ()	std-headers/functional	/^    T operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::plus	typeref:typename:T	file:
operator ()	std-headers/functional	/^    bool operator()(const T& arg) const;$/;"	p	struct:std::logical_not	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::equal_to	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::greater	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::greater_equal	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::less	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::less_equal	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::logical_and	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::logical_or	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    bool operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::not_equal_to	typeref:typename:bool	file:
operator ()	std-headers/functional	/^    operator()(ArgTypes&& ... args) const;   \/\/ only if T is function$/;"	p	class:std::reference_wrapper	typeref:typename:std::result_of<T & (ArgTypes &&...)>::type	file:
operator ()	std-headers/functional	/^    result_type operator()(argument_type const& x) const;$/;"	p	struct:std::unary_negate	typeref:typename:result_type	file:
operator ()	std-headers/functional	/^    result_type operator()(const T& lhs, const T& rhs) const;$/;"	p	struct:std::binary_negate	typeref:typename:result_type	file:
operator ()	std-headers/functional	/^    std::size_t operator()(const Key& key) const;$/;"	p	struct:std::hash	typeref:typename:std::size_t	file:
operator ()	std-headers/future	/^    void operator()(ArgTypes... args);$/;"	p	class:std::packaged_task	typeref:typename:void	file:
operator ()	std-headers/locale	/^    bool operator()(const basic_string<CharT, Traits, Alloc>& s1,$/;"	p	class:std::locale	typeref:typename:bool	file:
operator ()	std-headers/map	/^        bool operator()(const value_type& lhs, const value_type& rhs) const;$/;"	p	class:std::map::value_compare	typeref:typename:bool	file:
operator ()	std-headers/map	/^        bool operator()(const value_type& lhs, const value_type& rhs) const;$/;"	p	class:std::multimap::value_compare	typeref:typename:bool	file:
operator ()	std-headers/memory	/^    bool operator()(const shared_ptr<T>& lhs,$/;"	p	struct:std::owner_less	typeref:typename:bool	file:
operator ()	std-headers/memory	/^    bool operator()(const weak_ptr<T>& lhs,$/;"	p	struct:std::owner_less	typeref:typename:bool	file:
operator ()	std-headers/memory	/^    void operator()(T* ptr) const;$/;"	p	struct:std::default_delete	typeref:typename:void	file:
operator ()	std-headers/memory	/^    void operator()(U* ptr) const;$/;"	p	struct:std::default_delete	typeref:typename:void	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::discard_block_engine	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::independent_bits_engine	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::linear_congruential_engine	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::mersenne_twister_engine	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::random_device	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::shuffle_order_engine	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()();$/;"	p	class:std::subtract_with_carry_engine	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::bernoulli_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::binomial_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::cauchy_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::chi_squared_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::discrete_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::exponential_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::extreme_value_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::fisher_f_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::gamma_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::geometric_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::lognormal_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::negative_binomial_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::normal_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::poisson_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::student_t_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::uniform_int_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::uniform_real_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g);$/;"	p	class:std::weibull_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::bernoulli_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::binomial_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::cauchy_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::chi_squared_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::discrete_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::exponential_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::extreme_value_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::fisher_f_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::gamma_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::geometric_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::lognormal_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::negative_binomial_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::normal_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::poisson_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::student_t_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::uniform_int_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::uniform_real_distribution	typeref:typename:result_type	file:
operator ()	std-headers/random	/^    result_type operator()(Generator& g, const param_type& params);$/;"	p	class:std::weibull_distribution	typeref:typename:result_type	file:
operator ()	std-headers/type_traits	/^    constexpr operator()() const;$/;"	p	struct:std::integral_constant	file:
operator *	std-headers/chrono	/^constexpr operator*(const Rep1& s,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period> 	file:
operator *	std-headers/chrono	/^constexpr operator*(const duration<Rep1, Period>& d,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period> 	file:
operator *	std-headers/complex	/^complex<T> operator*(const T& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator *	std-headers/complex	/^complex<T> operator*(const complex<T>& lhs, const T& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator *	std-headers/complex	/^complex<T> operator*(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator *	std-headers/iterator	/^    CharT operator*() const;$/;"	p	class:std::istreambuf_iterator	typeref:typename:CharT	file:
operator *	std-headers/iterator	/^    back_insert_iterator& operator*();$/;"	p	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	file:
operator *	std-headers/iterator	/^    const T& operator*() const;$/;"	p	class:std::istream_iterator	typeref:typename:const T &	file:
operator *	std-headers/iterator	/^    front_insert_iterator& operator*();$/;"	p	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	file:
operator *	std-headers/iterator	/^    insert_iterator& operator*();$/;"	p	class:std::insert_iterator	typeref:typename:insert_iterator &	file:
operator *	std-headers/iterator	/^    ostream_iterator& operator*();$/;"	p	class:std::ostream_iterator	typeref:typename:ostream_iterator &	file:
operator *	std-headers/iterator	/^    ostreambuf_iterator& operator*();$/;"	p	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	file:
operator *	std-headers/iterator	/^    reference operator*() const;$/;"	p	class:std::move_iterator	typeref:typename:reference	file:
operator *	std-headers/iterator	/^    reference operator*() const;$/;"	p	class:std::reverse_iterator	typeref:typename:reference	file:
operator *	std-headers/memory	/^    T& operator*() const; \/\/ SIMPLIFIED$/;"	p	class:std::unique_ptr	typeref:typename:T &	file:
operator *	std-headers/memory	/^    T& operator*() const;$/;"	p	class:std::auto_ptr	typeref:typename:T &	file:
operator *	std-headers/memory	/^    T& operator*() const;$/;"	p	class:std::shared_ptr	typeref:typename:T &	file:
operator *	std-headers/memory	/^    raw_storage_iterator& operator*();$/;"	p	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	file:
operator *	std-headers/regex	/^    const value_type& operator*() const;$/;"	p	class:std::regex_iterator	typeref:typename:const value_type &	file:
operator *	std-headers/regex	/^    const value_type& operator*() const;$/;"	p	class:std::regex_token_iterator	typeref:typename:const value_type &	file:
operator *	std-headers/valarray	/^template <class T> std::valarray<T> operator* (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator *	std-headers/valarray	/^template <class T> std::valarray<T> operator* (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator *	std-headers/valarray	/^template <class T> std::valarray<T> operator* (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator *=	std-headers/chrono	/^    duration& operator*=(const rep& rhs);$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator *=	std-headers/complex	/^    complex<T>& operator*=(const T& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator *=	std-headers/complex	/^    complex<T>& operator*=(const complex<X>& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator *=	std-headers/valarray	/^    valarray<T> operator*=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator *=	std-headers/valarray	/^    valarray<T> operator*=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator *=	std-headers/valarray	/^    void operator*=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator *=	std-headers/valarray	/^    void operator*=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator *=	std-headers/valarray	/^    void operator*=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator *=	std-headers/valarray	/^    void operator*=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator +	std-headers/chrono	/^    constexpr duration operator+() const;$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
operator +	std-headers/chrono	/^constexpr operator+(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period1> 	file:
operator +	std-headers/chrono	/^operator+(const duration<R1, P1>& d,$/;"	p	namespace:std::chrono	typeref:typename:time_point<C,D2>	file:
operator +	std-headers/chrono	/^operator+(const time_point<C, D1>& pt,$/;"	p	namespace:std::chrono	typeref:typename:time_point<C,D1>	file:
operator +	std-headers/complex	/^    complex<T> operator+(const complex<T>& val);$/;"	p	class:std::complex	typeref:typename:complex<T>	file:
operator +	std-headers/complex	/^complex<T> operator+(const T& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator +	std-headers/complex	/^complex<T> operator+(const complex<T>& lhs, const T& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator +	std-headers/complex	/^complex<T> operator+(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator +	std-headers/iterator	/^    move_iterator operator+(difference_type n) const;$/;"	p	class:std::move_iterator	typeref:typename:move_iterator	file:
operator +	std-headers/iterator	/^    reverse_iterator operator+(difference_type n) const;$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator	file:
operator +	std-headers/iterator	/^operator+(typename move_iterator<Iterator>::difference_type n,$/;"	p	namespace:std	typeref:typename:move_iterator<Iterator>	file:
operator +	std-headers/iterator	/^operator+(typename reverse_iterator<Iterator>::difference_type n,$/;"	p	namespace:std	typeref:typename:reverse_iterator<Iterator>	file:
operator +	std-headers/string	/^    fpos operator+(streamoff) const;$/;"	p	class:std::fpos	typeref:typename:fpos	file:
operator +	std-headers/string	/^operator+(CharT lhs,$/;"	p	namespace:std	typeref:typename:basic_string<CharT,Traits,Alloc>	file:
operator +	std-headers/string	/^operator+(basic_string<CharT, Traits, Alloc>&& lhs,$/;"	p	namespace:std	typeref:typename:basic_string<CharT,Traits,Alloc>	file:
operator +	std-headers/string	/^operator+(const CharT* lhs,$/;"	p	namespace:std	typeref:typename:basic_string<CharT,Traits,Alloc>	file:
operator +	std-headers/string	/^operator+(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:basic_string<CharT,Traits,Alloc>	file:
operator +	std-headers/valarray	/^    valarray<T> operator+() const;$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator +	std-headers/valarray	/^template <class T> std::valarray<T> operator+ (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator +	std-headers/valarray	/^template <class T> std::valarray<T> operator+ (const std::valarray<T>& lhs, const T& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator +	std-headers/valarray	/^template <class T> std::valarray<T> operator+ (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator ++	std-headers/atomic	/^    T operator++() volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator ++	std-headers/atomic	/^    T operator++();$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator ++	std-headers/atomic	/^    T operator++(int) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator ++	std-headers/atomic	/^    T operator++(int);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator ++	std-headers/atomic	/^    T* operator++() volatile;$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator ++	std-headers/atomic	/^    T* operator++();$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator ++	std-headers/atomic	/^    T* operator++(int) volatile;$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator ++	std-headers/atomic	/^    T* operator++(int);$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator ++	std-headers/chrono	/^    duration operator++(int);$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
operator ++	std-headers/chrono	/^    duration& operator++();$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator ++	std-headers/iterator	/^    back_insert_iterator& operator++();$/;"	p	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	file:
operator ++	std-headers/iterator	/^    back_insert_iterator& operator++(int);$/;"	p	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	file:
operator ++	std-headers/iterator	/^    front_insert_iterator& operator++();$/;"	p	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	file:
operator ++	std-headers/iterator	/^    front_insert_iterator& operator++(int);$/;"	p	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	file:
operator ++	std-headers/iterator	/^    insert_iterator& operator++();$/;"	p	class:std::insert_iterator	typeref:typename:insert_iterator &	file:
operator ++	std-headers/iterator	/^    insert_iterator& operator++(int);$/;"	p	class:std::insert_iterator	typeref:typename:insert_iterator &	file:
operator ++	std-headers/iterator	/^    istream_iterator operator++(int);$/;"	p	class:std::istream_iterator	typeref:typename:istream_iterator	file:
operator ++	std-headers/iterator	/^    istream_iterator& operator++();$/;"	p	class:std::istream_iterator	typeref:typename:istream_iterator &	file:
operator ++	std-headers/iterator	/^    istreambuf_iterator operator++(int); \/\/ actually unspecified$/;"	p	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	file:
operator ++	std-headers/iterator	/^    istreambuf_iterator& operator++();$/;"	p	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	file:
operator ++	std-headers/iterator	/^    move_iterator operator++(int);$/;"	p	class:std::move_iterator	typeref:typename:move_iterator	file:
operator ++	std-headers/iterator	/^    move_iterator& operator++();$/;"	p	class:std::move_iterator	typeref:typename:move_iterator &	file:
operator ++	std-headers/iterator	/^    ostream_iterator& operator++();$/;"	p	class:std::ostream_iterator	typeref:typename:ostream_iterator &	file:
operator ++	std-headers/iterator	/^    ostream_iterator& operator++(int);$/;"	p	class:std::ostream_iterator	typeref:typename:ostream_iterator &	file:
operator ++	std-headers/iterator	/^    ostreambuf_iterator& operator++();$/;"	p	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	file:
operator ++	std-headers/iterator	/^    ostreambuf_iterator& operator++(int);$/;"	p	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	file:
operator ++	std-headers/iterator	/^    reverse_iterator operator++(int);$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator	file:
operator ++	std-headers/iterator	/^    reverse_iterator& operator++();$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	file:
operator ++	std-headers/memory	/^    raw_storage_iterator operator++(int);$/;"	p	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator	file:
operator ++	std-headers/memory	/^    raw_storage_iterator& operator++();$/;"	p	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	file:
operator ++	std-headers/regex	/^    regex_iterator operator++(int);$/;"	p	class:std::regex_iterator	typeref:typename:regex_iterator	file:
operator ++	std-headers/regex	/^    regex_iterator operator++(int);$/;"	p	class:std::regex_token_iterator	typeref:typename:regex_iterator	file:
operator ++	std-headers/regex	/^    regex_iterator& operator++();$/;"	p	class:std::regex_iterator	typeref:typename:regex_iterator &	file:
operator ++	std-headers/regex	/^    regex_iterator& operator++();$/;"	p	class:std::regex_token_iterator	typeref:typename:regex_iterator &	file:
operator +=	std-headers/atomic	/^    T operator+=(T arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator +=	std-headers/atomic	/^    T operator+=(T arg);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator +=	std-headers/atomic	/^    T* operator+=(std::ptrdiff_t arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator +=	std-headers/atomic	/^    T* operator+=(std::ptrdiff_t arg);$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator +=	std-headers/chrono	/^    duration& operator+=(const duration& d);$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator +=	std-headers/chrono	/^    time_point& operator+=(const duration& d);$/;"	p	class:std::chrono::time_point	typeref:typename:time_point &	file:
operator +=	std-headers/complex	/^    complex<T>& operator+=(const T& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator +=	std-headers/complex	/^    complex<T>& operator+=(const complex<X>& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator +=	std-headers/iterator	/^    move_iterator& operator+=(difference_type n);$/;"	p	class:std::move_iterator	typeref:typename:move_iterator &	file:
operator +=	std-headers/iterator	/^    reverse_iterator& operator+=(difference_type n);$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	file:
operator +=	std-headers/string	/^    basic_string& operator+=(CharT ch);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator +=	std-headers/string	/^    basic_string& operator+=(const CharT* s);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator +=	std-headers/string	/^    basic_string& operator+=(const basic_string& str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator +=	std-headers/string	/^    basic_string& operator+=(std::initializer_list<CharT> ilist);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator +=	std-headers/string	/^    fpos& operator+=(streamoff);$/;"	p	class:std::fpos	typeref:typename:fpos &	file:
operator +=	std-headers/valarray	/^    valarray<T> operator+=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator +=	std-headers/valarray	/^    valarray<T> operator+=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator +=	std-headers/valarray	/^    void operator+=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator +=	std-headers/valarray	/^    void operator+=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator +=	std-headers/valarray	/^    void operator+=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator +=	std-headers/valarray	/^    void operator+=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator -	std-headers/chrono	/^    constexpr duration operator-() const;$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
operator -	std-headers/chrono	/^constexpr operator-(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period1> 	file:
operator -	std-headers/chrono	/^operator-(const duration<R1, P1>& d,$/;"	p	namespace:std::chrono	typeref:typename:time_point<C,D2>	file:
operator -	std-headers/chrono	/^operator-(const time_point<C, D1>& pt,$/;"	p	namespace:std::chrono	typeref:typename:time_point<C,D1>	file:
operator -	std-headers/complex	/^    complex<T> operator-(const complex<T>& val);$/;"	p	class:std::complex	typeref:typename:complex<T>	file:
operator -	std-headers/complex	/^complex<T> operator-(const T& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator -	std-headers/complex	/^complex<T> operator-(const complex<T>& lhs, const T& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator -	std-headers/complex	/^complex<T> operator-(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator -	std-headers/iterator	/^    move_iterator operator-(difference_type n) const;$/;"	p	class:std::move_iterator	typeref:typename:move_iterator	file:
operator -	std-headers/iterator	/^    reverse_iterator operator-(difference_type n) const;$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator	file:
operator -	std-headers/iterator	/^operator-(const move_iterator<Iterator>& lhs,$/;"	p	namespace:std	typeref:typename:move_iterator<Iterator>::difference_type	file:
operator -	std-headers/iterator	/^operator-(const reverse_iterator<Iterator>& lhs,$/;"	p	namespace:std	typeref:typename:reverse_iterator<Iterator>::difference_type	file:
operator -	std-headers/string	/^    fpos operator-(streamoff) const;$/;"	p	class:std::fpos	typeref:typename:fpos	file:
operator -	std-headers/string	/^streamoff operator-(const fpos<State>& x, const fpos<State>& y);$/;"	p	namespace:std	typeref:typename:streamoff	file:
operator -	std-headers/valarray	/^    valarray<T> operator-() const;$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator -	std-headers/valarray	/^template <class T> std::valarray<T> operator- (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator -	std-headers/valarray	/^template <class T> std::valarray<T> operator- (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator -	std-headers/valarray	/^template <class T> std::valarray<T> operator- (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator --	std-headers/atomic	/^    T operator--() volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator --	std-headers/atomic	/^    T operator--();$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator --	std-headers/atomic	/^    T operator--(int) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator --	std-headers/atomic	/^    T operator--(int);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator --	std-headers/atomic	/^    T* operator--() volatile;$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator --	std-headers/atomic	/^    T* operator--();$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator --	std-headers/atomic	/^    T* operator--(int) volatile;$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator --	std-headers/atomic	/^    T* operator--(int);$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator --	std-headers/chrono	/^    duration operator--(int);$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
operator --	std-headers/chrono	/^    duration& operator--();$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator --	std-headers/iterator	/^    move_iterator operator--(int);$/;"	p	class:std::move_iterator	typeref:typename:move_iterator	file:
operator --	std-headers/iterator	/^    move_iterator& operator--();$/;"	p	class:std::move_iterator	typeref:typename:move_iterator &	file:
operator --	std-headers/iterator	/^    reverse_iterator operator--(int);$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator	file:
operator --	std-headers/iterator	/^    reverse_iterator& operator--();$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	file:
operator -=	std-headers/atomic	/^    T operator-=(T arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator -=	std-headers/atomic	/^    T operator-=(T arg);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator -=	std-headers/atomic	/^    T* operator-=(std::ptrdiff_t arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator -=	std-headers/atomic	/^    T* operator-=(std::ptrdiff_t arg);$/;"	p	struct:std::atomic	typeref:typename:T *	file:
operator -=	std-headers/chrono	/^    duration& operator-=(const duration& d);$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator -=	std-headers/chrono	/^    time_point& operator-=(const duration& d);$/;"	p	class:std::chrono::time_point	typeref:typename:time_point &	file:
operator -=	std-headers/complex	/^    complex<T>& operator-=(const T& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator -=	std-headers/complex	/^    complex<T>& operator-=(const complex<X>& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator -=	std-headers/iterator	/^    move_iterator& operator-=(difference_type n);$/;"	p	class:std::move_iterator	typeref:typename:move_iterator &	file:
operator -=	std-headers/iterator	/^    reverse_iterator& operator-=(difference_type n);$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	file:
operator -=	std-headers/string	/^    fpos& operator-=(streamoff);$/;"	p	class:std::fpos	typeref:typename:fpos &	file:
operator -=	std-headers/valarray	/^    valarray<T> operator-=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator -=	std-headers/valarray	/^    valarray<T> operator-=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator -=	std-headers/valarray	/^    void operator-=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator -=	std-headers/valarray	/^    void operator-=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator -=	std-headers/valarray	/^    void operator-=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator -=	std-headers/valarray	/^    void operator-=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator ->	std-headers/iterator	/^    const T* operator->() const;$/;"	p	class:std::istream_iterator	typeref:typename:const T *	file:
operator ->	std-headers/iterator	/^    pointer operator->() const;$/;"	p	class:std::istreambuf_iterator	typeref:typename:pointer	file:
operator ->	std-headers/iterator	/^    pointer operator->() const;$/;"	p	class:std::move_iterator	typeref:typename:pointer	file:
operator ->	std-headers/iterator	/^    pointer operator->() const;$/;"	p	class:std::reverse_iterator	typeref:typename:pointer	file:
operator ->	std-headers/memory	/^    T* operator->() const;$/;"	p	class:std::auto_ptr	typeref:typename:T *	file:
operator ->	std-headers/memory	/^    T* operator->() const;$/;"	p	class:std::shared_ptr	typeref:typename:T *	file:
operator ->	std-headers/memory	/^    pointer operator->();$/;"	p	class:std::unique_ptr	typeref:typename:pointer	file:
operator ->	std-headers/regex	/^    const value_type* operator->() const;$/;"	p	class:std::regex_iterator	typeref:typename:const value_type *	file:
operator ->	std-headers/regex	/^    const value_type* operator->() const;$/;"	p	class:std::regex_token_iterator	typeref:typename:const value_type *	file:
operator /	std-headers/chrono	/^constexpr operator\/(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period1> 	file:
operator /	std-headers/chrono	/^constexpr operator\/(const duration<Rep1, Period>& d,$/;"	p	namespace:std::chrono	typeref:typename:duration<Rep1,Period> 	file:
operator /	std-headers/complex	/^complex<T> operator\/(const T& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator /	std-headers/complex	/^complex<T> operator\/(const complex<T>& lhs, const T& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator /	std-headers/complex	/^complex<T> operator\/(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
operator /	std-headers/valarray	/^template <class T> std::valarray<T> operator\/ (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator /	std-headers/valarray	/^template <class T> std::valarray<T> operator\/ (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator /	std-headers/valarray	/^template <class T> std::valarray<T> operator\/ (const std::valarray<T>& lhs, const std::valarray/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator /=	std-headers/chrono	/^    duration& operator\/=(const rep& rhs);$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator /=	std-headers/complex	/^    complex<T>& operator\/=(const T& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator /=	std-headers/complex	/^    complex<T>& operator\/=(const complex<X>& other);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator /=	std-headers/valarray	/^    valarray<T> operator\/=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator /=	std-headers/valarray	/^    valarray<T> operator\/=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator /=	std-headers/valarray	/^    void operator\/=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator /=	std-headers/valarray	/^    void operator\/=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator /=	std-headers/valarray	/^    void operator\/=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator /=	std-headers/valarray	/^    void operator\/=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator <	std-headers/array	/^bool operator<(const array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/chrono	/^bool operator<(const time_point<Clock, Dur1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator <	std-headers/chrono	/^constexpr bool operator<(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator <	std-headers/complex	/^bool operator<(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/deque	/^bool operator<(const deque<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/forward_list	/^bool operator<(const forward_list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/iterator	/^bool operator<(const move_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/iterator	/^bool operator<(const reverse_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/list	/^bool operator<(const list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/map	/^bool operator<(const map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/map	/^bool operator<(const multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/memory	/^bool operator<(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/memory	/^bool operator<(const shared_ptr<T>& lhs, std::nullptr_t rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/memory	/^bool operator<(std::nullptr_t lhs, const shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/queue	/^bool operator<(priority_queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/queue	/^bool operator<(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/set	/^bool operator<(const multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/set	/^bool operator<(const set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/stack	/^bool operator<(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/string	/^bool operator<(const CharT* lhs, const basic_string<CharT, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/string	/^bool operator<(const basic_string<CharT, Traits, Alloc>& lhs,  const CharT* rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/string	/^bool operator<(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/system_error	/^    bool operator<(const error_category& rhs) const;$/;"	p	class:std::error_category	typeref:typename:bool	file:
operator <	std-headers/system_error	/^bool operator<(const error_code& lhs, const error_code& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/system_error	/^bool operator<(const error_condition& lhs, const error_condition& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/thread	/^bool operator<(thread::id lhs, thread::id rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/tuple	/^bool operator<(const tuple<TTypes...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/typeindex	/^    bool operator<(const type_index& rhs) const;$/;"	p	class:std::type_index	typeref:typename:bool	file:
operator <	std-headers/utility	/^bool operator<(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <	std-headers/valarray	/^valarray<bool> operator<(const T& lhsv, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator <	std-headers/valarray	/^valarray<bool> operator<(const valarray<T>& lhs, const T& rhsv);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator <	std-headers/valarray	/^valarray<bool> operator<(const valarray<T>& lhs, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator <	std-headers/vector	/^bool operator<(const vector<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <<	std-headers/bitset	/^    bitset<N> operator<<(std::size_t pos) const;$/;"	p	class:std::bitset	typeref:typename:bitset<N>	file:
operator <<	std-headers/bitset	/^std::basic_ostream<CharT, Traits>& operator<<(std::basic_ostream<CharT, Traits>& os,$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/complex	/^operator<<(std::basic_ostream<CharT, Traits>& os,$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/memory	/^basic_ostream<U, V>& operator<<(basic_ostream<U, V>& os, const shared_ptr<T>& ptr);$/;"	p	namespace:std	typeref:typename:basic_ostream<U,V> &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(bool value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(const void* value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(double value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(float value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(int value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(long double value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(long long value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(long value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(short value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(std::basic_ios<CharT, Traits>& (*func)(std::basic_ios<CharT, Trait/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(std::basic_ostream<CharT, Traits>& (*func)(std::basic_ostream<Char/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(std::ios_base & (*func)(std::ios_base&));$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(unsigned int value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(unsigned long long value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(unsigned long value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^    basic_ostream& operator<<(unsigned short value);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator <<	std-headers/ostream	/^basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os,$/;"	p	namespace:std	typeref:typename:basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/ostream	/^basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>&& os,$/;"	p	namespace:std	typeref:typename:basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/ostream	/^basic_ostream<char, Traits>& operator<<(basic_ostream<char, Traits>& os,$/;"	p	namespace:std	typeref:typename:basic_ostream<char,Traits> &	file:
operator <<	std-headers/random	/^operator<<(std::basic_ostream<CharT, Traits>& ost,$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/random	/^std::basic_ostream<CharT, Traits>& operator<<(std::basic_ostream<CharT, Traits>& ost,$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/regex	/^operator<<(std::basic_ostream<CharT, Traits>& os,$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/string	/^operator<<(std::basic_ostream<CharT, Traits>& os,$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/system_error	/^operator<<(basic_ostream<CharT, Traits>& os, const error_code& ec);$/;"	p	namespace:std	typeref:typename:std::basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/thread	/^operator<<(basic_ostream<CharT, Traits>& out, thread::id id);$/;"	p	namespace:std	typeref:typename:basic_ostream<CharT,Traits> &	file:
operator <<	std-headers/valarray	/^template <class T> std::valarray<T> operator<<(const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator <<	std-headers/valarray	/^template <class T> std::valarray<T> operator<<(const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator <<	std-headers/valarray	/^template <class T> std::valarray<T> operator<<(const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator <<=	std-headers/bitset	/^    bitset<N>& operator<<=(std::size_t pos);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
operator <<=	std-headers/valarray	/^    valarray<T> operator<<=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator <<=	std-headers/valarray	/^    valarray<T> operator<<=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator <<=	std-headers/valarray	/^    void operator<<=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator <<=	std-headers/valarray	/^    void operator<<=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator <<=	std-headers/valarray	/^    void operator<<=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator <<=	std-headers/valarray	/^    void operator<<=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator <=	std-headers/array	/^bool operator<=(const array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/chrono	/^bool operator<=(const time_point<Clock, Dur1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator <=	std-headers/chrono	/^constexpr bool operator<=(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator <=	std-headers/complex	/^bool operator<=(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/deque	/^bool operator<=(const deque<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/forward_list	/^bool operator<=(const forward_list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/iterator	/^bool operator<=(const move_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/iterator	/^bool operator<=(const reverse_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/list	/^bool operator<=(const list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/map	/^bool operator<=(const map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/map	/^bool operator<=(const multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/memory	/^bool operator<=(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/memory	/^bool operator<=(const shared_ptr<T>& lhs, std::nullptr_t rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/memory	/^bool operator<=(std::nullptr_t lhs, const shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/queue	/^bool operator<=(priority_queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/queue	/^bool operator<=(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/set	/^bool operator<=(const multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/set	/^bool operator<=(const set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/stack	/^bool operator<=(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/string	/^bool operator<=(const CharT* lhs, const basic_string<CharT, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/string	/^bool operator<=(const basic_string<CharT, Traits, Alloc>& lhs, const CharT* rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/string	/^bool operator<=(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/thread	/^bool operator<=(thread::id lhs, thread::id rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/tuple	/^bool operator<=(const tuple<TTypes...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/typeindex	/^    bool operator<=(const type_index& rhs) const;$/;"	p	class:std::type_index	typeref:typename:bool	file:
operator <=	std-headers/utility	/^bool operator<=(const T& lhs, const T& rhs);$/;"	p	namespace:std::rel_ops	typeref:typename:bool	file:
operator <=	std-headers/utility	/^bool operator<=(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator <=	std-headers/valarray	/^valarray<bool> operator<=(const T& lhsv, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator <=	std-headers/valarray	/^valarray<bool> operator<=(const valarray<T>& lhs, const T& rhsv);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator <=	std-headers/valarray	/^valarray<bool> operator<=(const valarray<T>& lhs, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator <=	std-headers/vector	/^bool operator<=(const vector<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator =	std-headers/array	/^    array& operator=(array&& other);$/;"	p	class:std::array	typeref:typename:array &	file:
operator =	std-headers/array	/^    array& operator=(const array& other);$/;"	p	class:std::array	typeref:typename:array &	file:
operator =	std-headers/array	/^    array& operator=(initializer_list<T> ilist);$/;"	p	class:std::array	typeref:typename:array &	file:
operator =	std-headers/atomic	/^    T operator=(T desired) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator =	std-headers/atomic	/^    T operator=(T desired);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator =	std-headers/atomic	/^    atomic& operator=(const atomic&) = delete;$/;"	p	struct:std::atomic	typeref:typename:atomic &	file:
operator =	std-headers/atomic	/^    atomic& operator=(const atomic&) volatile = delete;$/;"	p	struct:std::atomic	typeref:typename:atomic &	file:
operator =	std-headers/atomic	/^    atomic_flag& operator=(const atomic_flag&) = delete;$/;"	p	class:std::atomic_flag	typeref:typename:atomic_flag &	file:
operator =	std-headers/atomic	/^    atomic_flag& operator=(const atomic_flag&) volatile = delete;$/;"	p	class:std::atomic_flag	typeref:typename:atomic_flag &	file:
operator =	std-headers/bitset	/^        reference& operator=(bool x);$/;"	p	class:std::bitset::reference	typeref:typename:reference &	file:
operator =	std-headers/bitset	/^        reference& operator=(const reference& x);$/;"	p	class:std::bitset::reference	typeref:typename:reference &	file:
operator =	std-headers/chrono	/^    duration& operator=(const duration& other) = default;$/;"	p	class:std::chrono::duration	typeref:typename:duration &	file:
operator =	std-headers/complex	/^    complex<T>& operator=(const T& x);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator =	std-headers/complex	/^    complex<T>& operator=(const complex<X>& cx);$/;"	p	class:std::complex	typeref:typename:complex<T> &	file:
operator =	std-headers/condition_variable	/^    condition_variable& operator=(const condition_variable&) = delete;$/;"	p	class:std::condition_variable	typeref:typename:condition_variable &	file:
operator =	std-headers/condition_variable	/^    condition_variable_any& operator=(const condition_variable_any&) = delete;$/;"	p	class:std::condition_variable_any	typeref:typename:condition_variable_any &	file:
operator =	std-headers/deque	/^    deque& operator=(const deque& other);$/;"	p	class:std::deque	typeref:typename:deque &	file:
operator =	std-headers/deque	/^    deque& operator=(deque&& other);$/;"	p	class:std::deque	typeref:typename:deque &	file:
operator =	std-headers/deque	/^    deque& operator=(initializer_list<T> ilist);$/;"	p	class:std::deque	typeref:typename:deque &	file:
operator =	std-headers/exception	/^    bad_exception& operator=(const bad_exception& other);$/;"	p	class:std::bad_exception	typeref:typename:bad_exception &	file:
operator =	std-headers/exception	/^    exception& operator=(const exception& other);$/;"	p	class:std::exception	typeref:typename:exception &	file:
operator =	std-headers/exception	/^    nested_exception& operator=(const nested_exception& other) = default;$/;"	p	class:std::nested_exception	typeref:typename:nested_exception &	file:
operator =	std-headers/forward_list	/^    forward_list& operator=(const forward_list& other);$/;"	p	class:std::forward_list	typeref:typename:forward_list &	file:
operator =	std-headers/forward_list	/^    forward_list& operator=(forward_list&& other);$/;"	p	class:std::forward_list	typeref:typename:forward_list &	file:
operator =	std-headers/forward_list	/^    forward_list& operator=(initializer_list<T> ilist);$/;"	p	class:std::forward_list	typeref:typename:forward_list &	file:
operator =	std-headers/fstream	/^    basic_fstream& operator=(basic_fstream&& other);$/;"	p	class:std::basic_fstream	typeref:typename:basic_fstream &	file:
operator =	std-headers/fstream	/^    basic_ifstream& operator=(basic_ifstream&& other);$/;"	p	class:std::basic_ifstream	typeref:typename:basic_ifstream &	file:
operator =	std-headers/fstream	/^    basic_ofstream& operator=(basic_ofstream&& other);$/;"	p	class:std::basic_ofstream	typeref:typename:basic_ofstream &	file:
operator =	std-headers/fstream	/^    std::basic_filebuf& operator=(const std::basic_filebuf& rhs) = delete;$/;"	p	class:std::basic_filebuf	typeref:typename:std::basic_filebuf &	file:
operator =	std-headers/fstream	/^    std::basic_filebuf& operator=(std::basic_filebuf&& rhs);$/;"	p	class:std::basic_filebuf	typeref:typename:std::basic_filebuf &	file:
operator =	std-headers/functional	/^    function& operator=(F&& f);$/;"	p	class:std::function	typeref:typename:function &	file:
operator =	std-headers/functional	/^    function& operator=(const function& other);$/;"	p	class:std::function	typeref:typename:function &	file:
operator =	std-headers/functional	/^    function& operator=(function&& other);$/;"	p	class:std::function	typeref:typename:function &	file:
operator =	std-headers/functional	/^    function& operator=(std::nullptr_t);$/;"	p	class:std::function	typeref:typename:function &	file:
operator =	std-headers/functional	/^    function& operator=(std::reference_wrapper<F> f);$/;"	p	class:std::function	typeref:typename:function &	file:
operator =	std-headers/functional	/^    reference_wrapper& operator=(const reference_wrapper<T>& other);$/;"	p	class:std::reference_wrapper	typeref:typename:reference_wrapper &	file:
operator =	std-headers/future	/^    future& operator=(const future& other) = delete;$/;"	p	class:std::future	typeref:typename:future &	file:
operator =	std-headers/future	/^    future& operator=(future&& other);$/;"	p	class:std::future	typeref:typename:future &	file:
operator =	std-headers/future	/^    packaged_task& operator=(const packaged_task&) = delete;$/;"	p	class:std::packaged_task	typeref:typename:packaged_task &	file:
operator =	std-headers/future	/^    packaged_task& operator=(packaged_task&& rhs);$/;"	p	class:std::packaged_task	typeref:typename:packaged_task &	file:
operator =	std-headers/future	/^    promise& operator=(const promise& rhs) = delete;$/;"	p	class:std::promise	typeref:typename:promise &	file:
operator =	std-headers/future	/^    promise& operator=(promise&& other);$/;"	p	class:std::promise	typeref:typename:promise &	file:
operator =	std-headers/future	/^    shared_future& operator=(const shared_future& other);$/;"	p	class:std::shared_future	typeref:typename:shared_future &	file:
operator =	std-headers/future	/^    shared_future& operator=(shared_future&& other);$/;"	p	class:std::shared_future	typeref:typename:shared_future &	file:
operator =	std-headers/istream	/^    basic_iostream& operator=(basic_iostream&& rhs);$/;"	p	class:std::basic_iostream	typeref:typename:basic_iostream &	file:
operator =	std-headers/istream	/^    basic_iostream& operator=(const basic_iostream& rhs) = delete;$/;"	p	class:std::basic_iostream	typeref:typename:basic_iostream &	file:
operator =	std-headers/istream	/^    basic_istream& operator=(basic_istream&& rhs);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator =	std-headers/istream	/^    basic_istream& operator=(const basic_istream& rhs) = delete;$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator =	std-headers/iterator	/^    move_iterator& operator=(const move_iterator<U>& other);$/;"	p	class:std::move_iterator	typeref:typename:move_iterator &	file:
operator =	std-headers/iterator	/^    operator=(const typename Container::value_type& value);$/;"	p	class:std::back_insert_iterator	typeref:typename:back_insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(const typename Container::value_type& value);$/;"	p	class:std::front_insert_iterator	typeref:typename:front_insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(const typename Container::value_type& value);$/;"	p	class:std::insert_iterator	typeref:typename:insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(typename Container::const_reference value);$/;"	p	class:std::back_insert_iterator	typeref:typename:back_insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(typename Container::const_reference value);$/;"	p	class:std::front_insert_iterator	typeref:typename:front_insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(typename Container::const_reference value);$/;"	p	class:std::insert_iterator	typeref:typename:insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(typename Container::value_type&& value);$/;"	p	class:std::back_insert_iterator	typeref:typename:back_insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(typename Container::value_type&& value);$/;"	p	class:std::front_insert_iterator	typeref:typename:front_insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    operator=(typename Container::value_type&& value);$/;"	p	class:std::insert_iterator	typeref:typename:insert_iterator<Container> &	file:
operator =	std-headers/iterator	/^    ostream_iterator& operator=(const T& value);$/;"	p	class:std::ostream_iterator	typeref:typename:ostream_iterator &	file:
operator =	std-headers/iterator	/^    ostreambuf_iterator& operator=(CharT c);$/;"	p	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	file:
operator =	std-headers/iterator	/^    reverse_iterator& operator=(const reverse_iterator<U>& other);$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	file:
operator =	std-headers/list	/^    list& operator=(const list& other);$/;"	p	class:std::list	typeref:typename:list &	file:
operator =	std-headers/list	/^    list& operator=(initializer_list<T> ilist);$/;"	p	class:std::list	typeref:typename:list &	file:
operator =	std-headers/list	/^    list& operator=(list&& other);$/;"	p	class:std::list	typeref:typename:list &	file:
operator =	std-headers/locale	/^    const locale& operator=(const locale& other);$/;"	p	class:std::locale	typeref:typename:const locale &	file:
operator =	std-headers/map	/^    map& operator=(const map& other);$/;"	p	class:std::map	typeref:typename:map &	file:
operator =	std-headers/map	/^    map& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::map	typeref:typename:map &	file:
operator =	std-headers/map	/^    map& operator=(map&& other);$/;"	p	class:std::map	typeref:typename:map &	file:
operator =	std-headers/map	/^    multimap& operator=(const multimap& other);$/;"	p	class:std::multimap	typeref:typename:multimap &	file:
operator =	std-headers/map	/^    multimap& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::multimap	typeref:typename:multimap &	file:
operator =	std-headers/map	/^    multimap& operator=(multimap&& other);$/;"	p	class:std::multimap	typeref:typename:multimap &	file:
operator =	std-headers/memory	/^    auto_ptr& operator=(auto_ptr& r);$/;"	p	class:std::auto_ptr	typeref:typename:auto_ptr &	file:
operator =	std-headers/memory	/^    auto_ptr& operator=(auto_ptr<Y>& r);$/;"	p	class:std::auto_ptr	typeref:typename:auto_ptr &	file:
operator =	std-headers/memory	/^    auto_ptr& operator=(auto_ptr_ref m);$/;"	p	class:std::auto_ptr	typeref:typename:auto_ptr &	file:
operator =	std-headers/memory	/^    enable_shared_from_this<T>& operator=(const enable_shared_from_this<T>& obj);$/;"	p	class:std::enable_shared_from_this	typeref:typename:enable_shared_from_this<T> &	file:
operator =	std-headers/memory	/^    raw_storage_iterator& operator=(const T& el);$/;"	p	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	file:
operator =	std-headers/memory	/^    shared_ptr& operator=(const shared_ptr& r);$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	file:
operator =	std-headers/memory	/^    shared_ptr& operator=(const shared_ptr<Y>& r);$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	file:
operator =	std-headers/memory	/^    shared_ptr& operator=(shared_ptr&& r);$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	file:
operator =	std-headers/memory	/^    shared_ptr& operator=(shared_ptr<Y>&& r);$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	file:
operator =	std-headers/memory	/^    shared_ptr& operator=(std::auto_ptr<Y>&& r);$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	file:
operator =	std-headers/memory	/^    shared_ptr& operator=(std::unique_ptr<Y, Deleter>&& r);$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	file:
operator =	std-headers/memory	/^    unique_ptr& operator=(nullptr_t);$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	file:
operator =	std-headers/memory	/^    unique_ptr& operator=(unique_ptr&& r);$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	file:
operator =	std-headers/memory	/^    unique_ptr& operator=(unique_ptr<U, E>&& r);$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	file:
operator =	std-headers/memory	/^    weak_ptr& operator=(const shared_ptr<Y>& r);$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	file:
operator =	std-headers/memory	/^    weak_ptr& operator=(const weak_ptr& r);$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	file:
operator =	std-headers/memory	/^    weak_ptr& operator=(const weak_ptr<Y>& r);$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	file:
operator =	std-headers/memory	/^    weak_ptr& operator=(weak_ptr&& r);$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	file:
operator =	std-headers/memory	/^    weak_ptr& operator=(weak_ptr<Y>&& r);$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	file:
operator =	std-headers/mutex	/^    lock_guard& operator=(const lock_guard&) = delete;$/;"	p	class:std::lock_guard	typeref:typename:lock_guard &	file:
operator =	std-headers/mutex	/^    mutex& operator=(const mutex&) = delete;$/;"	p	class:std::mutex	typeref:typename:mutex &	file:
operator =	std-headers/mutex	/^    recursive_mutex& operator=(const recursive_mutex&) = delete;$/;"	p	class:std::recursive_mutex	typeref:typename:recursive_mutex &	file:
operator =	std-headers/mutex	/^    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;$/;"	p	class:std::recursive_timed_mutex	typeref:typename:recursive_timed_mutex &	file:
operator =	std-headers/mutex	/^    timed_mutex& operator=(const timed_mutex&) = delete;$/;"	p	class:std::timed_mutex	typeref:typename:timed_mutex &	file:
operator =	std-headers/mutex	/^    unique_lock& operator=(unique_lock&& other);$/;"	p	class:std::unique_lock	typeref:typename:unique_lock &	file:
operator =	std-headers/new	/^    bad_alloc& operator=(const bad_alloc& other);$/;"	p	class:std::bad_alloc	typeref:typename:bad_alloc &	file:
operator =	std-headers/ostream	/^    basic_ostream& operator=(basic_ostream&& rhs);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator =	std-headers/ostream	/^    basic_ostream& operator=(const basic_ostream& rhs) = delete;$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
operator =	std-headers/queue	/^    operator=(const priority_queue<T, Container>& other);$/;"	p	class:std::priority_queue	typeref:typename:priority_queue<T,Container> &	file:
operator =	std-headers/queue	/^    operator=(const queue<T, Container>& other);$/;"	p	class:std::queue	typeref:typename:queue<T,Container> &	file:
operator =	std-headers/queue	/^    operator=(priority_queue<T, Container>&& other);$/;"	p	class:std::priority_queue	typeref:typename:priority_queue<T,Container> &	file:
operator =	std-headers/queue	/^    operator=(queue<T, Container>&& other);$/;"	p	class:std::queue	typeref:typename:queue<T,Container> &	file:
operator =	std-headers/random	/^    random_device& operator=(const random_device&) = delete;$/;"	p	class:std::random_device	typeref:typename:random_device &	file:
operator =	std-headers/regex	/^    basic_regex& operator=(basic_regex&& other);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
operator =	std-headers/regex	/^    basic_regex& operator=(const CharT* ptr);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
operator =	std-headers/regex	/^    basic_regex& operator=(const basic_regex& other);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
operator =	std-headers/regex	/^    basic_regex& operator=(const std::basic_string<CharT, ST, SA>& p);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
operator =	std-headers/regex	/^    basic_regex& operator=(std::initializer_list<CharT> il);$/;"	p	class:std::basic_regex	typeref:typename:basic_regex &	file:
operator =	std-headers/regex	/^    match_results& operator=(const match_results& other);$/;"	p	class:std::match_results	typeref:typename:match_results &	file:
operator =	std-headers/regex	/^    match_results& operator=(match_results&& other);$/;"	p	class:std::match_results	typeref:typename:match_results &	file:
operator =	std-headers/regex	/^    regex_iterator& operator=(const regex_iterator& other);$/;"	p	class:std::regex_iterator	typeref:typename:regex_iterator &	file:
operator =	std-headers/regex	/^    regex_token_iterator& operator=(const regex_token_iterator& other);$/;"	p	class:std::regex_token_iterator	typeref:typename:regex_token_iterator &	file:
operator =	std-headers/set	/^    multiset& operator=(const multiset& other);$/;"	p	class:std::multiset	typeref:typename:multiset &	file:
operator =	std-headers/set	/^    multiset& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::multiset	typeref:typename:multiset &	file:
operator =	std-headers/set	/^    multiset& operator=(multiset&& other);$/;"	p	class:std::multiset	typeref:typename:multiset &	file:
operator =	std-headers/set	/^    set& operator=(const set& other);$/;"	p	class:std::set	typeref:typename:set &	file:
operator =	std-headers/set	/^    set& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::set	typeref:typename:set &	file:
operator =	std-headers/set	/^    set& operator=(set&& other);$/;"	p	class:std::set	typeref:typename:set &	file:
operator =	std-headers/shared_mutex	/^    shared_lock& operator=(shared_lock&& other);$/;"	p	class:std::shared_lock	typeref:typename:shared_lock &	file:
operator =	std-headers/shared_mutex	/^    shared_mutex& operator=(const shared_mutex&) = delete;$/;"	p	class:std::shared_mutex	typeref:typename:shared_mutex &	file:
operator =	std-headers/shared_mutex	/^    shared_timed_mutex& operator=(const shared_timed_mutex&) = delete;$/;"	p	class:std::shared_timed_mutex	typeref:typename:shared_timed_mutex &	file:
operator =	std-headers/sstream	/^    basic_istringstream& operator=(basic_istringstream&& other);$/;"	p	class:std::basic_istringstream	typeref:typename:basic_istringstream &	file:
operator =	std-headers/sstream	/^    basic_ostringstream& operator=(basic_ostringstream&& other);$/;"	p	class:std::basic_ostringstream	typeref:typename:basic_ostringstream &	file:
operator =	std-headers/sstream	/^    basic_stringstream& operator=(basic_stringstream&& other);$/;"	p	class:std::basic_stringstream	typeref:typename:basic_stringstream &	file:
operator =	std-headers/sstream	/^    std::basic_stringbuf& operator=(const std::basic_stringbuf& rhs) = delete;$/;"	p	class:std::basic_stringbuf	typeref:typename:std::basic_stringbuf &	file:
operator =	std-headers/sstream	/^    std::basic_stringbuf& operator=(std::basic_stringbuf&& rhs);$/;"	p	class:std::basic_stringbuf	typeref:typename:std::basic_stringbuf &	file:
operator =	std-headers/stack	/^    operator=(const stack<T, Container>& other);$/;"	p	class:std::stack	typeref:typename:stack<T,Container> &	file:
operator =	std-headers/stack	/^    operator=(stack<T, Container>&& other);$/;"	p	class:std::stack	typeref:typename:stack<T,Container> &	file:
operator =	std-headers/streambuf	/^    basic_streambuf& operator=(const basic_streambuf& rhs);$/;"	p	class:std::basic_streambuf	typeref:typename:basic_streambuf &	file:
operator =	std-headers/string	/^    basic_string& operator=(CharT ch);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator =	std-headers/string	/^    basic_string& operator=(basic_string&& other);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator =	std-headers/string	/^    basic_string& operator=(const CharT* s);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator =	std-headers/string	/^    basic_string& operator=(const basic_string& str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator =	std-headers/string	/^    basic_string& operator=(initializer_list<CharT> ilist);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
operator =	std-headers/system_error	/^    error_code& operator=(ErrorCodeEnum e);$/;"	p	class:std::error_code	typeref:typename:error_code &	file:
operator =	std-headers/system_error	/^    error_condition& operator=(ErrorConditionEnum e);$/;"	p	class:std::error_condition	typeref:typename:error_condition &	file:
operator =	std-headers/system_error	/^    error_condition& operator=(const error_condition& other);$/;"	p	class:std::error_condition	typeref:typename:error_condition &	file:
operator =	std-headers/thread	/^    thread& operator=(const thread&) = delete;$/;"	p	class:std::thread	typeref:typename:thread &	file:
operator =	std-headers/thread	/^    thread& operator=(thread&& t);$/;"	p	class:std::thread	typeref:typename:thread &	file:
operator =	std-headers/tuple	/^    tuple& operator=(const pair<U1, U2>& p);$/;"	p	class:std::tuple	typeref:typename:tuple &	file:
operator =	std-headers/tuple	/^    tuple& operator=(const tuple& other);$/;"	p	class:std::tuple	typeref:typename:tuple &	file:
operator =	std-headers/tuple	/^    tuple& operator=(const tuple<UTypes...>& other);$/;"	p	class:std::tuple	typeref:typename:tuple &	file:
operator =	std-headers/tuple	/^    tuple& operator=(pair<U1, U2>&& p);$/;"	p	class:std::tuple	typeref:typename:tuple &	file:
operator =	std-headers/tuple	/^    tuple& operator=(tuple&& other);$/;"	p	class:std::tuple	typeref:typename:tuple &	file:
operator =	std-headers/tuple	/^    tuple& operator=(tuple<UTypes...>&& other);$/;"	p	class:std::tuple	typeref:typename:tuple &	file:
operator =	std-headers/unordered_map	/^    unordered_map& operator=(const unordered_map& other);$/;"	p	class:std::unordered_map	typeref:typename:unordered_map &	file:
operator =	std-headers/unordered_map	/^    unordered_map& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::unordered_map	typeref:typename:unordered_map &	file:
operator =	std-headers/unordered_map	/^    unordered_map& operator=(unordered_map&& other);$/;"	p	class:std::unordered_map	typeref:typename:unordered_map &	file:
operator =	std-headers/unordered_map	/^    unordered_multimap& operator=(const unordered_multimap& other);$/;"	p	class:std::unordered_multimap	typeref:typename:unordered_multimap &	file:
operator =	std-headers/unordered_map	/^    unordered_multimap& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::unordered_multimap	typeref:typename:unordered_multimap &	file:
operator =	std-headers/unordered_map	/^    unordered_multimap& operator=(unordered_multimap&& other);$/;"	p	class:std::unordered_multimap	typeref:typename:unordered_multimap &	file:
operator =	std-headers/unordered_set	/^    unordered_multiset& operator=(const unordered_multiset& other);$/;"	p	class:std::unordered_multiset	typeref:typename:unordered_multiset &	file:
operator =	std-headers/unordered_set	/^    unordered_multiset& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::unordered_multiset	typeref:typename:unordered_multiset &	file:
operator =	std-headers/unordered_set	/^    unordered_multiset& operator=(unordered_multiset&& other);$/;"	p	class:std::unordered_multiset	typeref:typename:unordered_multiset &	file:
operator =	std-headers/unordered_set	/^    unordered_set& operator=(const unordered_set& other);$/;"	p	class:std::unordered_set	typeref:typename:unordered_set &	file:
operator =	std-headers/unordered_set	/^    unordered_set& operator=(initializer_list<value_type> ilist);$/;"	p	class:std::unordered_set	typeref:typename:unordered_set &	file:
operator =	std-headers/unordered_set	/^    unordered_set& operator=(unordered_set&& other);$/;"	p	class:std::unordered_set	typeref:typename:unordered_set &	file:
operator =	std-headers/utility	/^    pair& operator=(const pair& other);$/;"	p	struct:std::pair	typeref:typename:pair &	file:
operator =	std-headers/utility	/^    pair& operator=(const pair<U1, U2>& other);$/;"	p	struct:std::pair	typeref:typename:pair &	file:
operator =	std-headers/utility	/^    pair& operator=(pair&& other);$/;"	p	struct:std::pair	typeref:typename:pair &	file:
operator =	std-headers/utility	/^    pair& operator=(pair<U1, U2>&& other);$/;"	p	struct:std::pair	typeref:typename:pair &	file:
operator =	std-headers/valarray	/^    const gslice_array& operator=(const gslice_array& sl_arr) const;$/;"	p	class:std::gslice_array	typeref:typename:const gslice_array &	file:
operator =	std-headers/valarray	/^    const indirect_array& operator=(const indirect_array& sl_arr) const;$/;"	p	class:std::indirect_array	typeref:typename:const indirect_array &	file:
operator =	std-headers/valarray	/^    const mask_array& operator=(const mask_array& sl_arr) const;$/;"	p	class:std::mask_array	typeref:typename:const mask_array &	file:
operator =	std-headers/valarray	/^    const slice_array& operator=(const slice_array& sl_arr) const;$/;"	p	class:std::slice_array	typeref:typename:const slice_array &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(const std::gslice_array& other);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(const std::indirect_array& other);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(const std::mask_array& other);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(const std::slice_array& other);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(const valarray<T>& other);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(std::initializer_list<T> il);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    valarray<T>& operator=(valarray<T>&& other);$/;"	p	class:std::valarray	typeref:typename:valarray<T> &	file:
operator =	std-headers/valarray	/^    void operator=(const T& value) const;$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const T& value) const;$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const T& value) const;$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const T& value) const;$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const std::valarray<T>& val_arr) const;$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const std::valarray<T>& val_arr) const;$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const std::valarray<T>& val_arr) const;$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator =	std-headers/valarray	/^    void operator=(const std::valarray<T>& val_arr) const;$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator =	std-headers/vector	/^    vector& operator=(const vector& other);$/;"	p	class:std::vector	typeref:typename:vector &	file:
operator =	std-headers/vector	/^    vector& operator=(initializer_list<T> ilist);$/;"	p	class:std::vector	typeref:typename:vector &	file:
operator =	std-headers/vector	/^    vector& operator=(vector&& other);$/;"	p	class:std::vector	typeref:typename:vector &	file:
operator ==	std-headers/array	/^bool operator==(const array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/bitset	/^    bool operator==(const bitset<N>& rhs) const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
operator ==	std-headers/chrono	/^bool operator==(const time_point<Clock, Dur1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator ==	std-headers/chrono	/^constexpr bool operator==(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator ==	std-headers/complex	/^bool operator==(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/deque	/^bool operator==(const deque<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/forward_list	/^bool operator==(const forward_list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/functional	/^bool operator==(const std::function<R(ArgTypes...)>& f, std::nullptr_t);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/functional	/^bool operator==(std::nullptr_t, const std::function<R(ArgTypes...)>& f);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/iterator	/^bool operator==(const istream_iterator<T, CharT, Traits, Dist>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/iterator	/^bool operator==(const istreambuf_iterator<CharT, Traits>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/iterator	/^bool operator==(const move_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/iterator	/^bool operator==(const ostream_iterator<T, CharT, Traits>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/iterator	/^bool operator==(const reverse_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/list	/^bool operator==(const list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/locale	/^    bool operator==(const locale& other) const;$/;"	p	class:std::locale	typeref:typename:bool	file:
operator ==	std-headers/map	/^bool operator==(const map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/map	/^bool operator==(const multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/memory	/^bool operator==(const allocator<T1>& lhs, const allocator<T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/memory	/^bool operator==(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/memory	/^bool operator==(const shared_ptr<T>& lhs, std::nullptr_t rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/memory	/^bool operator==(std::nullptr_t lhs, const shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/queue	/^bool operator==(priority_queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/queue	/^bool operator==(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const bernoulli_distribution& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const binomial_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const cauchy_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const chi_squared_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const discard_block_engine<Engine, p, r>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const discrete_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const exponential_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const extreme_value_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const fisher_f_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const gamma_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const geometric_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const linear_congruential_engine<UIntType, a, c, m>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const lognormal_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const mersenne_twister_engine<UIntType, w, n, m, r, a, u, d, s, b, t, c, l, f>& /;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const negative_binomial_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const normal_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const piecewise_constant_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const piecewise_linear_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const poisson_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const student_t_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const subtract_with_carry_engine<UIntType, w, s, r>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const uniform_int_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const uniform_real_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/random	/^bool operator==(const weibull_distribution<ResultType>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/regex	/^    bool operator==(const regex_iterator& rhs) const;$/;"	p	class:std::regex_iterator	typeref:typename:bool	file:
operator ==	std-headers/regex	/^    bool operator==(const regex_token_iterator& rhs) const;$/;"	p	class:std::regex_token_iterator	typeref:typename:bool	file:
operator ==	std-headers/regex	/^bool operator==(match_results<BidirIt, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/scoped_allocator	/^bool operator==(const scoped_allocator_adaptor<OuterAlloc1, InnerAllocs...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/set	/^bool operator==(const multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/set	/^bool operator==(const set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/stack	/^bool operator==(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/string	/^bool operator==(const CharT* lhs, const basic_string<CharT, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/string	/^bool operator==(const basic_string<CharT, Traits, Alloc>& lhs, const CharT* rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/string	/^bool operator==(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/string	/^bool operator==(const fpos<State>& x, const fpos<State>& y);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/system_error	/^    bool operator==(const error_category& rhs) const;$/;"	p	class:std::error_category	typeref:typename:bool	file:
operator ==	std-headers/system_error	/^bool operator==(const error_code& lhs, const error_code& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/system_error	/^bool operator==(const error_code& lhs, const error_condition& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/system_error	/^bool operator==(const error_condition& lhs, const error_code& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/system_error	/^bool operator==(const error_condition& lhs, const error_condition& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/thread	/^bool operator==(thread::id lhs, thread::id rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/tuple	/^bool operator==(const tuple<TTypes...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/typeindex	/^    bool operator==(const type_index& rhs) const;$/;"	p	class:std::type_index	typeref:typename:bool	file:
operator ==	std-headers/typeinfo	/^    bool operator==(const type_info& rhs) const;$/;"	p	class:std::type_info	typeref:typename:bool	file:
operator ==	std-headers/unordered_map	/^bool operator==(const unordered_map<Key, T, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/unordered_map	/^bool operator==(const unordered_multimap<Key, T, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/unordered_set	/^bool operator==(const unordered_multiset<Key, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/unordered_set	/^bool operator==(const unordered_set<Key, Hash, KeyEqual, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/utility	/^bool operator==(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator ==	std-headers/valarray	/^valarray<bool> operator==(const T& lhsv, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator ==	std-headers/valarray	/^valarray<bool> operator==(const valarray<T>& lhs, const T& rhsv);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator ==	std-headers/valarray	/^valarray<bool> operator==(const valarray<T>& lhs, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator ==	std-headers/vector	/^bool operator==(const vector<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/array	/^bool operator>(const array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/chrono	/^bool operator>(const time_point<Clock, Dur1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator >	std-headers/chrono	/^constexpr bool operator>(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator >	std-headers/complex	/^bool operator>(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/deque	/^bool operator>(const deque<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/forward_list	/^bool operator>(const forward_list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/iterator	/^bool operator>(const move_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/iterator	/^bool operator>(const reverse_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/list	/^bool operator>(const list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/map	/^bool operator>(const map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/map	/^bool operator>(const multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/memory	/^bool operator>(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/memory	/^bool operator>(const shared_ptr<T>& lhs, std::nullptr_t rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/memory	/^bool operator>(std::nullptr_t lhs, const shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/queue	/^bool operator>(priority_queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/queue	/^bool operator>(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/set	/^bool operator>(const multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/set	/^bool operator>(const set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/stack	/^bool operator>(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/string	/^bool operator>(const CharT* lhs, const basic_string<CharT, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/string	/^bool operator>(const basic_string<CharT, Traits, Alloc>& lhs, const CharT* rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/string	/^bool operator>(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/thread	/^bool operator>(thread::id lhs, thread::id rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/tuple	/^bool operator>(const tuple<TTypes...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/typeindex	/^    bool operator> (const type_index& rhs) const;$/;"	p	class:std::type_index	typeref:typename:bool	file:
operator >	std-headers/utility	/^bool operator>(const T& lhs, const T& rhs);$/;"	p	namespace:std::rel_ops	typeref:typename:bool	file:
operator >	std-headers/utility	/^bool operator>(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >	std-headers/valarray	/^valarray<bool> operator>(const T& lhsv, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator >	std-headers/valarray	/^valarray<bool> operator>(const valarray<T>& lhs, const T& rhsv);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator >	std-headers/valarray	/^valarray<bool> operator>(const valarray<T>& lhs, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator >	std-headers/vector	/^bool operator>(const vector<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/array	/^bool operator>=(const array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/chrono	/^bool operator>=(const time_point<Clock, Dur1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator >=	std-headers/chrono	/^constexpr bool operator>=(const duration<Rep1, Period1>& lhs,$/;"	p	namespace:std::chrono	typeref:typename:bool	file:
operator >=	std-headers/complex	/^bool operator>=(const complex<T>& lhs, const complex<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/deque	/^bool operator>=(const deque<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/forward_list	/^bool operator>=(const forward_list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/iterator	/^bool operator>=(const move_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/iterator	/^bool operator>=(const reverse_iterator<Iterator1>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/list	/^bool operator>=(const list<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/map	/^bool operator>=(const map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/map	/^bool operator>=(const multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/memory	/^bool operator>=(const shared_ptr<T>& lhs, const shared_ptr<U>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/memory	/^bool operator>=(const shared_ptr<T>& lhs, std::nullptr_t rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/memory	/^bool operator>=(std::nullptr_t lhs, const shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/queue	/^bool operator>=(priority_queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/queue	/^bool operator>=(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/set	/^bool operator>=(const multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/set	/^bool operator>=(const set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/stack	/^bool operator>=(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/string	/^bool operator>=(const CharT* lhs, const basic_string<CharT, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/string	/^bool operator>=(const basic_string<CharT, Traits, Alloc>& lhs, const CharT* rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/string	/^bool operator>=(const basic_string<CharT, Traits, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/thread	/^bool operator>=(thread::id lhs, thread::id rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/tuple	/^bool operator>=(const tuple<TTypes...>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/typeindex	/^    bool operator>=(const type_index& rhs) const;$/;"	p	class:std::type_index	typeref:typename:bool	file:
operator >=	std-headers/utility	/^bool operator>=(const T& lhs, const T& rhs);$/;"	p	namespace:std::rel_ops	typeref:typename:bool	file:
operator >=	std-headers/utility	/^bool operator>=(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:bool	file:
operator >=	std-headers/valarray	/^valarray<bool> operator>=(const T& lhsv, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator >=	std-headers/valarray	/^valarray<bool> operator>=(const valarray<T>& lhs, const T& rhsv);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator >=	std-headers/valarray	/^valarray<bool> operator>=(const valarray<T>& lhs, const valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:valarray<bool>	file:
operator >=	std-headers/vector	/^bool operator>=(const vector<T, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:bool	file:
operator >>	std-headers/bitset	/^    bitset<N> operator>>(std::size_t pos) const;$/;"	p	class:std::bitset	typeref:typename:bitset<N>	file:
operator >>	std-headers/bitset	/^std::basic_istream<CharT, Traits>& operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
operator >>	std-headers/complex	/^operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(basic_istream& st,$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(bool& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(double& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(float& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(int& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(long double& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(long long& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(long& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(short& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(unsigned int& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(unsigned long long& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(unsigned long& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(unsigned short& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^    basic_istream& operator>>(void*& value);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
operator >>	std-headers/istream	/^basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& st, CharT& ch);$/;"	p	namespace:std	typeref:typename:basic_istream<CharT,Traits> &	file:
operator >>	std-headers/istream	/^basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& st, CharT* s);$/;"	p	namespace:std	typeref:typename:basic_istream<CharT,Traits> &	file:
operator >>	std-headers/istream	/^basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>&& st, T& value);$/;"	p	namespace:std	typeref:typename:basic_istream<CharT,Traits> &	file:
operator >>	std-headers/istream	/^basic_istream<char, Traits>& operator>>(basic_istream<char, Traits>& st, signed char& ch);$/;"	p	namespace:std	typeref:typename:basic_istream<char,Traits> &	file:
operator >>	std-headers/istream	/^basic_istream<char, Traits>& operator>>(basic_istream<char, Traits>& st, signed char* s);$/;"	p	namespace:std	typeref:typename:basic_istream<char,Traits> &	file:
operator >>	std-headers/istream	/^basic_istream<char, Traits>& operator>>(basic_istream<char, Traits>& st, unsigned char& ch);$/;"	p	namespace:std	typeref:typename:basic_istream<char,Traits> &	file:
operator >>	std-headers/istream	/^basic_istream<char, Traits>& operator>>(basic_istream<char, Traits>& st, unsigned char* s);$/;"	p	namespace:std	typeref:typename:basic_istream<char,Traits> &	file:
operator >>	std-headers/random	/^operator>>(std::basic_istream<CharT, Traits>& ist,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
operator >>	std-headers/random	/^std::basic_istream<CharT, Traits>& operator>>(std::basic_istream<CharT, Traits>& ist,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
operator >>	std-headers/string	/^operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
operator >>	std-headers/valarray	/^template <class T> std::valarray<T> operator>> (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator >>	std-headers/valarray	/^template <class T> std::valarray<T> operator>> (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator >>	std-headers/valarray	/^template <class T> std::valarray<T> operator>> (const std::valarray<T>& lhs, const std::valarray/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator >>=	std-headers/bitset	/^    bitset<N>& operator>>=(std::size_t pos);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
operator >>=	std-headers/valarray	/^    valarray<T> operator>>=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator >>=	std-headers/valarray	/^    valarray<T> operator>>=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator >>=	std-headers/valarray	/^    void operator>>=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator >>=	std-headers/valarray	/^    void operator>>=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator >>=	std-headers/valarray	/^    void operator>>=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator >>=	std-headers/valarray	/^    void operator>>=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator []	std-headers/array	/^    const_reference operator[](size_type n) const;$/;"	p	class:std::array	typeref:typename:const_reference	file:
operator []	std-headers/array	/^    reference       operator[](size_type n);$/;"	p	class:std::array	typeref:typename:reference	file:
operator []	std-headers/bitset	/^    bool operator[](std::size_t pos) const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
operator []	std-headers/bitset	/^    constexpr bool operator[](std::size_t pos) const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
operator []	std-headers/bitset	/^    reference operator[](std::size_t pos);$/;"	p	class:std::bitset	typeref:typename:reference	file:
operator []	std-headers/deque	/^    const_reference operator[](size_type n) const;$/;"	p	class:std::deque	typeref:typename:const_reference	file:
operator []	std-headers/deque	/^    reference       operator[](size_type n);$/;"	p	class:std::deque	typeref:typename:reference	file:
operator []	std-headers/iterator	/^    reference operator[](difference_type n) const; \/\/ actually unspecified$/;"	p	class:std::move_iterator	typeref:typename:reference	file:
operator []	std-headers/iterator	/^    reference operator[](difference_type n) const; \/\/ actually unspecified$/;"	p	class:std::reverse_iterator	typeref:typename:reference	file:
operator []	std-headers/map	/^    T& operator[](Key&& key);$/;"	p	class:std::map	typeref:typename:T &	file:
operator []	std-headers/map	/^    T& operator[](const Key& key);$/;"	p	class:std::map	typeref:typename:T &	file:
operator []	std-headers/memory	/^    T& operator[](size_t i) const;$/;"	p	class:std::unique_ptr	typeref:typename:T &	file:
operator []	std-headers/regex	/^    const_reference operator[](size_type n) const;$/;"	p	class:std::match_results	typeref:typename:const_reference	file:
operator []	std-headers/string	/^    const_reference operator[](size_type n) const;$/;"	p	class:std::basic_string	typeref:typename:const_reference	file:
operator []	std-headers/string	/^    reference       operator[](size_type n);$/;"	p	class:std::basic_string	typeref:typename:reference	file:
operator []	std-headers/unordered_map	/^    T& operator[](Key&& key);$/;"	p	class:std::unordered_map	typeref:typename:T &	file:
operator []	std-headers/unordered_map	/^    T& operator[](const Key& key);$/;"	p	class:std::unordered_map	typeref:typename:T &	file:
operator []	std-headers/valarray	/^    T                      operator[](std::size_t pos) const;$/;"	p	class:std::valarray	typeref:typename:T	file:
operator []	std-headers/valarray	/^    T&                     operator[](std::size_t pos);$/;"	p	class:std::valarray	typeref:typename:T &	file:
operator []	std-headers/valarray	/^    const T&               operator[](std::size_t pos) const;$/;"	p	class:std::valarray	typeref:typename:const T &	file:
operator []	std-headers/valarray	/^    std::gslice_array<T>   operator[](const std::gslice& gslicearr);$/;"	p	class:std::valarray	typeref:typename:std::gslice_array<T>	file:
operator []	std-headers/valarray	/^    std::indirect_array<T> operator[](const valarray<std::size_t>& indarr);$/;"	p	class:std::valarray	typeref:typename:std::indirect_array<T>	file:
operator []	std-headers/valarray	/^    std::mask_array<T>     operator[](const valarray<bool>& boolarr);$/;"	p	class:std::valarray	typeref:typename:std::mask_array<T>	file:
operator []	std-headers/valarray	/^    std::slice_array<T>    operator[](std::slice slicearr);$/;"	p	class:std::valarray	typeref:typename:std::slice_array<T>	file:
operator []	std-headers/valarray	/^    std::valarray<T>       operator[](const std::gslice& gslicearr) const;$/;"	p	class:std::valarray	typeref:typename:std::valarray<T>	file:
operator []	std-headers/valarray	/^    std::valarray<T>       operator[](const valarray<bool>& boolarr) const;$/;"	p	class:std::valarray	typeref:typename:std::valarray<T>	file:
operator []	std-headers/valarray	/^    std::valarray<T>       operator[](const valarray<std::size_t>& indarr) const;$/;"	p	class:std::valarray	typeref:typename:std::valarray<T>	file:
operator []	std-headers/valarray	/^    std::valarray<T>       operator[](std::slice slicearr) const;$/;"	p	class:std::valarray	typeref:typename:std::valarray<T>	file:
operator []	std-headers/vector	/^    const_reference operator[](size_type n) const;$/;"	p	class:std::vector	typeref:typename:const_reference	file:
operator []	std-headers/vector	/^    reference       operator[](size_type n);$/;"	p	class:std::vector	typeref:typename:reference	file:
operator ^	std-headers/bitset	/^bitset<N> operator^(const bitset<N>& lhs, const bitset<N>& rhs);$/;"	p	namespace:std	typeref:typename:bitset<N>	file:
operator ^	std-headers/valarray	/^template <class T> std::valarray<T> operator^ (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator ^	std-headers/valarray	/^template <class T> std::valarray<T> operator^ (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator ^	std-headers/valarray	/^template <class T> std::valarray<T> operator^ (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator ^=	std-headers/atomic	/^    T operator^=(T arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator ^=	std-headers/atomic	/^    T operator^=(T arg);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator ^=	std-headers/bitset	/^    bitset<N>& operator^=(const bitset<N>& other);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
operator ^=	std-headers/valarray	/^    valarray<T> operator^=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator ^=	std-headers/valarray	/^    valarray<T> operator^=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator ^=	std-headers/valarray	/^    void operator^=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator ^=	std-headers/valarray	/^    void operator^=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator ^=	std-headers/valarray	/^    void operator^=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator ^=	std-headers/valarray	/^    void operator^=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator |	std-headers/bitset	/^bitset<N> operator|(const bitset<N>& lhs, const bitset<N>& rhs);$/;"	p	namespace:std	typeref:typename:bitset<N>	file:
operator |	std-headers/valarray	/^template <class T> std::valarray<T> operator| (const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator |	std-headers/valarray	/^template <class T> std::valarray<T> operator| (const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator |	std-headers/valarray	/^template <class T> std::valarray<T> operator| (const std::valarray<T>& lhs, const std::valarray</;"	p	namespace:std	typeref:typename:std::valarray<T>	file:
operator |=	std-headers/atomic	/^    T operator|=(T arg) volatile;$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator |=	std-headers/atomic	/^    T operator|=(T arg);$/;"	p	struct:std::atomic	typeref:typename:T	file:
operator |=	std-headers/bitset	/^    bitset<N>& operator|=(const bitset<N>& other);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
operator |=	std-headers/valarray	/^    valarray<T> operator|=(const T& val);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator |=	std-headers/valarray	/^    valarray<T> operator|=(const valarray<T>& v);$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
operator |=	std-headers/valarray	/^    void operator|=(const std::valarray<T>& other);$/;"	p	class:std::gslice_array	typeref:typename:void	file:
operator |=	std-headers/valarray	/^    void operator|=(const std::valarray<T>& other);$/;"	p	class:std::indirect_array	typeref:typename:void	file:
operator |=	std-headers/valarray	/^    void operator|=(const std::valarray<T>& other);$/;"	p	class:std::mask_array	typeref:typename:void	file:
operator |=	std-headers/valarray	/^    void operator|=(const std::valarray<T>& other);$/;"	p	class:std::slice_array	typeref:typename:void	file:
operator ||	std-headers/valarray	/^template <class T> std::valarray<bool> operator||(const T& val, const std::valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:std::valarray<bool>	file:
operator ||	std-headers/valarray	/^template <class T> std::valarray<bool> operator||(const std::valarray<T>& lhs, const T& val);$/;"	p	namespace:std	typeref:typename:std::valarray<bool>	file:
operator ||	std-headers/valarray	/^template <class T> std::valarray<bool> operator||(const std::valarray<T>& lhs, const std::valarr/;"	p	namespace:std	typeref:typename:std::valarray<bool>	file:
operator ~	std-headers/bitset	/^        bool operator~() const;$/;"	p	class:std::bitset::reference	typeref:typename:bool	file:
operator ~	std-headers/bitset	/^    bitset<N>& operator~() const;$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
operator ~	std-headers/valarray	/^    valarray<T> operator~() const;$/;"	p	class:std::valarray	typeref:typename:valarray<T>	file:
optimize	std-headers/regex	/^constexpr syntax_option_type optimize;$/;"	v	namespace:std::regex_constants	typeref:typename:syntax_option_type
ostream	std-headers/iosfwd	/^typedef basic_ostream<char> ostream;$/;"	t	namespace:std	typeref:typename:basic_ostream<char>	file:
ostream	std-headers/ostream	/^typedef basic_ostream<char> ostream;$/;"	t	namespace:std	typeref:typename:basic_ostream<char>	file:
ostream_iterator	std-headers/iterator	/^    ostream_iterator(ostream_type& stream);$/;"	p	class:std::ostream_iterator	file:
ostream_iterator	std-headers/iterator	/^    ostream_iterator(ostream_type& stream, const CharT* delim);$/;"	p	class:std::ostream_iterator	file:
ostream_iterator	std-headers/iterator	/^class ostream_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
ostream_type	std-headers/iterator	/^    typedef std::basic_ostream<CharT, Traits> ostream_type;$/;"	t	class:std::ostream_iterator	typeref:typename:std::basic_ostream<CharT,Traits>	file:
ostream_type	std-headers/iterator	/^    typedef std::basic_ostream<CharT, Traits> ostream_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:std::basic_ostream<CharT,Traits>	file:
ostreambuf_iterator	std-headers/iterator	/^    ostreambuf_iterator(ostream_type& stream);$/;"	p	class:std::ostreambuf_iterator	file:
ostreambuf_iterator	std-headers/iterator	/^    ostreambuf_iterator(streambuf_type* buffer);$/;"	p	class:std::ostreambuf_iterator	file:
ostreambuf_iterator	std-headers/iterator	/^class ostreambuf_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
ostringstream	std-headers/iosfwd	/^typedef basic_ostringstream<char> ostringstream;$/;"	t	namespace:std	typeref:typename:basic_ostringstream<char>	file:
ostringstream	std-headers/sstream	/^typedef basic_ostringstream<char> ostringstream;$/;"	t	namespace:std	typeref:typename:basic_ostringstream<char>	file:
other	std-headers/memory	/^        typedef allocator<U> other;$/;"	t	struct:std::allocator::rebind	typeref:typename:allocator<U>	file:
other	std-headers/scoped_allocator	/^        typedef OuterAlloc other; \/\/ SIMPLIFIED$/;"	t	struct:std::scoped_allocator_adaptor::rebind	typeref:typename:OuterAlloc	file:
out	std-headers/ios	/^    static constexpr openmode out;$/;"	m	class:std::ios_base	typeref:typename:openmode	file:
out	std-headers/locale	/^    result out(StateT& state,$/;"	p	class:std::codecvt	typeref:typename:result	file:
out_of_range	std-headers/stdexcept	/^    explicit out_of_range(const char* what_arg);$/;"	p	class:std::out_of_range	file:
out_of_range	std-headers/stdexcept	/^    explicit out_of_range(const string& what_arg);$/;"	p	class:std::out_of_range	file:
out_of_range	std-headers/stdexcept	/^class out_of_range : public logic_error {$/;"	c	namespace:std	file:
outer_allocator	std-headers/scoped_allocator	/^    const outer_allocator_type& outer_allocator() const;$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:const outer_allocator_type &	file:
outer_allocator	std-headers/scoped_allocator	/^    outer_allocator_type& outer_allocator();$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:outer_allocator_type &	file:
outer_allocator_type	std-headers/scoped_allocator	/^    typedef OuterAlloc outer_allocator_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc	file:
output_iterator_tag	std-headers/iterator	/^struct output_iterator_tag { };$/;"	s	namespace:std	file:
overflow	std-headers/fstream	/^    virtual int_type overflow(int_type c = Traits_type::eof());$/;"	p	class:std::basic_filebuf	typeref:typename:int_type	file:
overflow	std-headers/sstream	/^    virtual int_type overflow(int_type c = Traits_type::eof());$/;"	p	class:std::basic_stringbuf	typeref:typename:int_type	file:
overflow	std-headers/streambuf	/^    virtual int_type overflow(int_type c = traits_type::eof());$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
overflow_error	std-headers/stdexcept	/^    explicit overflow_error(const char* what_arg);$/;"	p	class:std::overflow_error	file:
overflow_error	std-headers/stdexcept	/^    explicit overflow_error(const string& what_arg);$/;"	p	class:std::overflow_error	file:
overflow_error	std-headers/stdexcept	/^class overflow_error : public runtime_error {$/;"	c	namespace:std	file:
owner_before	std-headers/memory	/^    bool owner_before(const shared_ptr<Y>& other) const;$/;"	p	class:std::shared_ptr	typeref:typename:bool	file:
owner_before	std-headers/memory	/^    bool owner_before(const std::shared_ptr<Y>& other) const;$/;"	p	class:std::weak_ptr	typeref:typename:bool	file:
owner_before	std-headers/memory	/^    bool owner_before(const std::weak_ptr<Y>& other) const;$/;"	p	class:std::shared_ptr	typeref:typename:bool	file:
owner_before	std-headers/memory	/^    bool owner_before(const weak_ptr<Y>& other) const;$/;"	p	class:std::weak_ptr	typeref:typename:bool	file:
owner_dead	std-headers/system_error	/^    owner_dead,                         \/\/  EOWNERDEAD$/;"	e	enum:std::errc	file:
owner_less	std-headers/memory	/^struct owner_less {$/;"	s	namespace:std	file:
owns_lock	std-headers/mutex	/^    bool owns_lock() const;$/;"	p	class:std::unique_lock	typeref:typename:bool	file:
owns_lock	std-headers/shared_mutex	/^    bool owns_lock() const;$/;"	p	class:std::shared_lock	typeref:typename:bool	file:
p	std-headers/random	/^    double p() const;$/;"	p	class:std::bernoulli_distribution	typeref:typename:double	file:
p	std-headers/random	/^    double p() const;$/;"	p	class:std::binomial_distribution	typeref:typename:double	file:
p	std-headers/random	/^    double p() const;$/;"	p	class:std::geometric_distribution	typeref:typename:double	file:
p	std-headers/random	/^    double p() const;$/;"	p	class:std::negative_binomial_distribution	typeref:typename:double	file:
p_cs_precedes	std-headers/clocale	/^    char p_cs_precedes;$/;"	m	struct:std::lconv	typeref:typename:char	file:
p_sep_by_space	std-headers/clocale	/^    char p_sep_by_space;$/;"	m	struct:std::lconv	typeref:typename:char	file:
p_sign_posn	std-headers/clocale	/^    char p_sign_posn;$/;"	m	struct:std::lconv	typeref:typename:char	file:
packaged_task	std-headers/future	/^    explicit packaged_task(F&& f);$/;"	p	class:std::packaged_task	file:
packaged_task	std-headers/future	/^    explicit packaged_task(std::allocator_arg_t, const Allocator& a, F&& f);$/;"	p	class:std::packaged_task	file:
packaged_task	std-headers/future	/^    packaged_task();$/;"	p	class:std::packaged_task	file:
packaged_task	std-headers/future	/^    packaged_task(const packaged_task&) = delete;$/;"	p	class:std::packaged_task	file:
packaged_task	std-headers/future	/^    packaged_task(packaged_task&& rhs);$/;"	p	class:std::packaged_task	file:
packaged_task	std-headers/future	/^class packaged_task<R(Args...)> {$/;"	c	namespace:std	file:
pair	std-headers/utility	/^    > struct pair {$/;"	s	namespace:std	file:
pair	std-headers/utility	/^    pair();$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(U1&& x, U2&& y);$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(const T1& x, const T2& y);$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(const pair& p);$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(const pair<U1, U2>& p);$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(pair&& p);$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(pair<U1, U2>&& p);$/;"	p	struct:std::pair	file:
pair	std-headers/utility	/^    pair(std::piecewise_construct_t,$/;"	p	struct:std::pair	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::bernoulli_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::binomial_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::cauchy_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::chi_squared_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::discrete_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::exponential_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::extreme_value_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::fisher_f_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::gamma_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::geometric_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::lognormal_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::negative_binomial_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::normal_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::poisson_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::student_t_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::uniform_int_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::uniform_real_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    param_type param() const;$/;"	p	class:std::weibull_distribution	typeref:typename:param_type	file:
param	std-headers/random	/^    void param(OutputIt dest) const;$/;"	p	class:std::seed_seq	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::bernoulli_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::binomial_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::cauchy_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::chi_squared_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::discrete_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::exponential_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::extreme_value_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::fisher_f_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::gamma_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::geometric_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::lognormal_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::negative_binomial_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::normal_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::poisson_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::student_t_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::uniform_int_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::uniform_real_distribution	typeref:typename:void	file:
param	std-headers/random	/^    void param(const param_type& params);$/;"	p	class:std::weibull_distribution	typeref:typename:void	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::bernoulli_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::binomial_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::cauchy_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::chi_squared_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::discrete_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::exponential_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::extreme_value_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::fisher_f_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::gamma_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::geometric_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::lognormal_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::negative_binomial_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::normal_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::piecewise_constant_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::piecewise_linear_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::poisson_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::student_t_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::uniform_int_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::uniform_real_distribution	typeref:typename:void *	file:
param_type	std-headers/random	/^    typedef void* param_type; \/\/ TODO$/;"	t	class:std::weibull_distribution	typeref:typename:void *	file:
part	std-headers/locale	/^    enum part {$/;"	g	class:std::money_base	file:
partial	std-headers/locale	/^        partial,$/;"	e	enum:std::codecvt_base::result	file:
partial_sort	std-headers/algorithm	/^void partial_sort(RandomIt first, RandomIt middle, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
partial_sort	std-headers/algorithm	/^void partial_sort(RandomIt first, RandomIt middle, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
partial_sort_copy	std-headers/algorithm	/^RandomIt partial_sort_copy(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:RandomIt	file:
partial_sum	std-headers/numeric	/^OutputIt partial_sum(InputIt first, InputIt last, OutputIt d_first);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
partial_sum	std-headers/numeric	/^OutputIt partial_sum(InputIt first, InputIt last, OutputIt d_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
partition	std-headers/algorithm	/^BidirIt partition(BidirIt first, BidirIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:BidirIt	file:
partition	std-headers/algorithm	/^ForwardIt partition(ForwardIt first, ForwardIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
partition_copy	std-headers/algorithm	/^partition_copy(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:std::pair<OutputIt1,OutputIt2>	file:
partition_point	std-headers/algorithm	/^ForwardIt partition_point(ForwardIt first, ForwardIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
pattern	std-headers/locale	/^    struct pattern {$/;"	s	class:std::money_base	file:
pattern	std-headers/locale	/^    typedef typename money_base::pattern pattern;$/;"	t	class:std::moneypunct	typeref:typename:money_base::pattern	file:
pattern	std-headers/locale	/^    typedef typename money_base::pattern pattern;$/;"	t	class:std::moneypunct_byname	typeref:typename:money_base::pattern	file:
pbackfail	std-headers/fstream	/^    virtual int_type pbackfail(int_type c = Traits_type::eof());$/;"	p	class:std::basic_filebuf	typeref:typename:int_type	file:
pbackfail	std-headers/sstream	/^    virtual int_type pbackfail(int_type c = Traits_type::eof());$/;"	p	class:std::basic_stringbuf	typeref:typename:int_type	file:
pbackfail	std-headers/streambuf	/^    virtual int_type pbackfail(int_type c = traits_type::eof());$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
pbase	std-headers/streambuf	/^    char_type* pbase() const;$/;"	p	class:std::basic_streambuf	typeref:typename:char_type *	file:
pbump	std-headers/streambuf	/^    void pbump(int n);$/;"	p	class:std::basic_streambuf	typeref:typename:void	file:
peek	std-headers/istream	/^    int_type peek();$/;"	p	class:std::basic_istream	typeref:typename:int_type	file:
period	std-headers/chrono	/^    typedef ratio<1> period;$/;"	t	class:std::chrono::time_point	typeref:typename:ratio<1>	file:
period	std-headers/chrono	/^    typedef std::ratio<1> period; \/\/ SIMPLIFIED: actually unspecified$/;"	t	class:std::chrono::high_resolution_clock	typeref:typename:std::ratio<1>	file:
period	std-headers/chrono	/^    typedef std::ratio<1> period; \/\/ SIMPLIFIED: actually unspecified$/;"	t	class:std::chrono::steady_clock	typeref:typename:std::ratio<1>	file:
period	std-headers/chrono	/^    typedef std::ratio<1> period; \/\/ SIMPLIFIED: actually unspecified$/;"	t	class:std::chrono::system_clock	typeref:typename:std::ratio<1>	file:
permission_denied	std-headers/system_error	/^    permission_denied,                  \/\/  EACCES$/;"	e	enum:std::errc	file:
perror	std-headers/cstdio	/^void perror(const char* s);$/;"	p	namespace:std	typeref:typename:void	file:
peta	std-headers/ratio	/^typedef ratio<         1000000000000000, 1> peta;$/;"	t	namespace:std	typeref:typename:ratio<1000000000000000,1>	file:
pico	std-headers/ratio	/^typedef ratio<1,             1000000000000> pico;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000000000>	file:
piecewise_constant_distribution	std-headers/random	/^    explicit piecewise_constant_distribution(const param_type& parm);$/;"	p	class:std::piecewise_constant_distribution	file:
piecewise_constant_distribution	std-headers/random	/^    piecewise_constant_distribution();$/;"	p	class:std::piecewise_constant_distribution	file:
piecewise_constant_distribution	std-headers/random	/^    piecewise_constant_distribution(InputIt1 first_i, InputIt1 last_i,$/;"	p	class:std::piecewise_constant_distribution	file:
piecewise_constant_distribution	std-headers/random	/^    piecewise_constant_distribution(std::initializer_list<RealType> bl,$/;"	p	class:std::piecewise_constant_distribution	file:
piecewise_constant_distribution	std-headers/random	/^    piecewise_constant_distribution(std::size_t nw,$/;"	p	class:std::piecewise_constant_distribution	file:
piecewise_constant_distribution	std-headers/random	/^class piecewise_constant_distribution {$/;"	c	namespace:std	file:
piecewise_construct	std-headers/utility	/^constexpr piecewise_construct_t piecewise_construct;$/;"	v	namespace:std	typeref:typename:piecewise_construct_t
piecewise_construct_t	std-headers/utility	/^struct piecewise_construct_t { };$/;"	s	namespace:std	file:
piecewise_linear_distribution	std-headers/random	/^    explicit piecewise_linear_distribution(const param_type& parm);$/;"	p	class:std::piecewise_linear_distribution	file:
piecewise_linear_distribution	std-headers/random	/^    piecewise_linear_distribution();$/;"	p	class:std::piecewise_linear_distribution	file:
piecewise_linear_distribution	std-headers/random	/^    piecewise_linear_distribution(InputIt1 first_i, InputIt1 last_i,$/;"	p	class:std::piecewise_linear_distribution	file:
piecewise_linear_distribution	std-headers/random	/^    piecewise_linear_distribution(std::initializer_list<RealType> ilist,$/;"	p	class:std::piecewise_linear_distribution	file:
piecewise_linear_distribution	std-headers/random	/^    piecewise_linear_distribution(std::size_t nw,$/;"	p	class:std::piecewise_linear_distribution	file:
piecewise_linear_distribution	std-headers/random	/^class piecewise_linear_distribution {$/;"	c	namespace:std	file:
placeholders	std-headers/functional	/^namespace placeholders { \/\/ SIMPLIFIED: the actual type is unspecified$/;"	n	namespace:std	file:
plus	std-headers/functional	/^struct plus {$/;"	s	namespace:std	file:
pointer	std-headers/array	/^    typedef T* pointer;$/;"	t	class:std::array	typeref:typename:T *	file:
pointer	std-headers/array	/^    typedef value_type* pointer;$/;"	t	class:std::array	typeref:typename:value_type *	file:
pointer	std-headers/deque	/^    typedef T* pointer;$/;"	t	class:std::deque	typeref:typename:T *	file:
pointer	std-headers/deque	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::deque	typeref:typename:Allocator::pointer	file:
pointer	std-headers/deque	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::deque	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/forward_list	/^    typedef T* pointer;$/;"	t	class:std::forward_list	typeref:typename:T *	file:
pointer	std-headers/forward_list	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::forward_list	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/iterator	/^    typedef Iterator pointer;$/;"	t	class:std::move_iterator	typeref:typename:Iterator	file:
pointer	std-headers/iterator	/^    typedef Pointer pointer;$/;"	t	struct:std::iterator	typeref:typename:Pointer	file:
pointer	std-headers/iterator	/^    typedef T* pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:T *	file:
pointer	std-headers/iterator	/^    typedef const T* pointer;$/;"	t	class:std::istream_iterator	typeref:typename:const T *	file:
pointer	std-headers/iterator	/^    typedef const T* pointer;$/;"	t	class:std::istreambuf_iterator	typeref:typename:const T *	file:
pointer	std-headers/iterator	/^    typedef typename Iterator::pointer pointer;$/;"	t	class:std::reverse_iterator	typeref:typename:Iterator::pointer	file:
pointer	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::pointer pointer;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<Iterator>::pointer	file:
pointer	std-headers/iterator	/^    typedef void pointer;$/;"	t	class:std::back_insert_iterator	typeref:typename:void	file:
pointer	std-headers/iterator	/^    typedef void pointer;$/;"	t	class:std::front_insert_iterator	typeref:typename:void	file:
pointer	std-headers/iterator	/^    typedef void pointer;$/;"	t	class:std::insert_iterator	typeref:typename:void	file:
pointer	std-headers/iterator	/^    typedef void pointer;$/;"	t	class:std::ostream_iterator	typeref:typename:void	file:
pointer	std-headers/iterator	/^    typedef void pointer;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:void	file:
pointer	std-headers/list	/^    typedef T* pointer;$/;"	t	class:std::list	typeref:typename:T *	file:
pointer	std-headers/list	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::list	typeref:typename:Allocator::pointer	file:
pointer	std-headers/list	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::list	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/map	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::map	typeref:typename:Allocator::pointer	file:
pointer	std-headers/map	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::multimap	typeref:typename:Allocator::pointer	file:
pointer	std-headers/map	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::map	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/map	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::multimap	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/map	/^    typedef value_type* pointer;$/;"	t	class:std::map	typeref:typename:value_type *	file:
pointer	std-headers/map	/^    typedef value_type* pointer;$/;"	t	class:std::multimap	typeref:typename:value_type *	file:
pointer	std-headers/memory	/^    typedef Ptr pointer;$/;"	t	struct:std::pointer_traits	typeref:typename:Ptr	file:
pointer	std-headers/memory	/^    typedef T* pointer;$/;"	t	class:std::unique_ptr	typeref:typename:T *	file:
pointer	std-headers/memory	/^    typedef T* pointer;$/;"	t	struct:std::allocator	typeref:typename:T *	file:
pointer	std-headers/memory	/^    typedef value_type* pointer;$/;"	t	struct:std::allocator_traits	typeref:typename:value_type *	file:
pointer	std-headers/memory	/^    typedef void pointer;$/;"	t	class:std::raw_storage_iterator	typeref:typename:void	file:
pointer	std-headers/regex	/^    typedef const value_type* pointer;$/;"	t	class:std::regex_iterator	typeref:typename:const value_type *	file:
pointer	std-headers/regex	/^    typedef const value_type* pointer;$/;"	t	class:std::regex_token_iterator	typeref:typename:const value_type *	file:
pointer	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::pointer pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::pointer	file:
pointer	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::pointer pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::pointer	file:
pointer	std-headers/set	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::multiset	typeref:typename:Allocator::pointer	file:
pointer	std-headers/set	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::set	typeref:typename:Allocator::pointer	file:
pointer	std-headers/set	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::multiset	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/set	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::set	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/set	/^    typedef value_type* pointer;$/;"	t	class:std::multiset	typeref:typename:value_type *	file:
pointer	std-headers/set	/^    typedef value_type* pointer;$/;"	t	class:std::set	typeref:typename:value_type *	file:
pointer	std-headers/string	/^    typedef CharT* pointer;$/;"	t	class:std::basic_string	typeref:typename:CharT *	file:
pointer	std-headers/string	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::basic_string	typeref:typename:Allocator::pointer	file:
pointer	std-headers/string	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::basic_string	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/unordered_map	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::unordered_map	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/unordered_map	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::unordered_multimap	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/unordered_map	/^    typedef value_type* pointer;$/;"	t	class:std::unordered_map	typeref:typename:value_type *	file:
pointer	std-headers/unordered_map	/^    typedef value_type* pointer;$/;"	t	class:std::unordered_multimap	typeref:typename:value_type *	file:
pointer	std-headers/unordered_set	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::unordered_multiset	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/unordered_set	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::unordered_set	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer	std-headers/unordered_set	/^    typedef value_type* pointer;$/;"	t	class:std::unordered_multiset	typeref:typename:value_type *	file:
pointer	std-headers/unordered_set	/^    typedef value_type* pointer;$/;"	t	class:std::unordered_set	typeref:typename:value_type *	file:
pointer	std-headers/vector	/^    typedef T* pointer;$/;"	t	class:std::vector	typeref:typename:T *	file:
pointer	std-headers/vector	/^    typedef typename Allocator::pointer pointer;$/;"	t	class:std::vector	typeref:typename:Allocator::pointer	file:
pointer	std-headers/vector	/^    typedef typename std::allocator_traits<Allocator>::pointer pointer;$/;"	t	class:std::vector	typeref:typename:std::allocator_traits<Allocator>::pointer	file:
pointer_safety	std-headers/memory	/^enum class pointer_safety {$/;"	g	namespace:std	file:
pointer_to	std-headers/memory	/^    static pointer pointer_to(element_type& r);$/;"	p	struct:std::pointer_traits	typeref:typename:pointer	file:
pointer_traits	std-headers/memory	/^struct pointer_traits {$/;"	s	namespace:std	file:
poisson_distribution	std-headers/random	/^    explicit poisson_distribution(const param_type& params);$/;"	p	class:std::poisson_distribution	file:
poisson_distribution	std-headers/random	/^    explicit poisson_distribution(double mean = 1.0);$/;"	p	class:std::poisson_distribution	file:
poisson_distribution	std-headers/random	/^class poisson_distribution {$/;"	c	namespace:std	file:
polar	std-headers/complex	/^complex<T> polar(const T& r, const T& theta = 0);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
pop	std-headers/queue	/^    void pop();$/;"	p	class:std::priority_queue	typeref:typename:void	file:
pop	std-headers/queue	/^    void pop();$/;"	p	class:std::queue	typeref:typename:void	file:
pop	std-headers/stack	/^    void pop();$/;"	p	class:std::stack	typeref:typename:void	file:
pop_back	std-headers/deque	/^    void pop_back();$/;"	p	class:std::deque	typeref:typename:void	file:
pop_back	std-headers/list	/^    void pop_back();$/;"	p	class:std::list	typeref:typename:void	file:
pop_back	std-headers/string	/^    void pop_back();$/;"	p	class:std::basic_string	typeref:typename:void	file:
pop_back	std-headers/vector	/^    void pop_back();$/;"	p	class:std::vector	typeref:typename:void	file:
pop_front	std-headers/deque	/^    void pop_front();$/;"	p	class:std::deque	typeref:typename:void	file:
pop_front	std-headers/forward_list	/^    void pop_front();$/;"	p	class:std::forward_list	typeref:typename:void	file:
pop_front	std-headers/list	/^    void pop_front();$/;"	p	class:std::list	typeref:typename:void	file:
pop_heap	std-headers/algorithm	/^void pop_heap(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
pop_heap	std-headers/algorithm	/^void pop_heap(RandomIt first, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
pos_format	std-headers/locale	/^    pattern pos_format() const;$/;"	p	class:std::moneypunct	typeref:typename:pattern	file:
pos_type	std-headers/ios	/^    typedef typename Traits::pos_type pos_type;$/;"	t	class:std::basic_ios	typeref:typename:Traits::pos_type	file:
pos_type	std-headers/streambuf	/^    typedef typename traits_type::pos_type pos_type;$/;"	t	class:std::basic_streambuf	typeref:typename:traits_type::pos_type	file:
pos_type	std-headers/string	/^    typedef streampos pos_type; \/\/ actually impl-defined$/;"	t	class:std::char_traits	typeref:typename:streampos	file:
position	std-headers/regex	/^    difference_type position(size_type sub = 0) const;$/;"	p	class:std::match_results	typeref:typename:difference_type	file:
positive_sign	std-headers/clocale	/^    char* positive_sign;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
positive_sign	std-headers/locale	/^    string_type positive_sign() const;$/;"	p	class:std::moneypunct	typeref:typename:string_type	file:
pow	std-headers/cmath	/^double      pow(double base, double exp);$/;"	p	namespace:std	typeref:typename:double	file:
pow	std-headers/cmath	/^double      pow(double base, int iexp);$/;"	p	namespace:std	typeref:typename:double	file:
pow	std-headers/cmath	/^float       pow(float base, float exp);$/;"	p	namespace:std	typeref:typename:float	file:
pow	std-headers/cmath	/^float       pow(float base, int iexp);$/;"	p	namespace:std	typeref:typename:float	file:
pow	std-headers/cmath	/^long double pow(long double base, int iexp);$/;"	p	namespace:std	typeref:typename:long double	file:
pow	std-headers/cmath	/^long double pow(long double base, long double exp);$/;"	p	namespace:std	typeref:typename:long double	file:
pow	std-headers/complex	/^complex<T> pow(const T& x, const complex<T>& y);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
pow	std-headers/complex	/^complex<T> pow(const complex<T>& x, const T& y);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
pow	std-headers/complex	/^complex<T> pow(const complex<T>& x, const complex<T>& y);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
pow	std-headers/valarray	/^valarray<T> pow(const T& vbase, const valarray<T>& exp);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
pow	std-headers/valarray	/^valarray<T> pow(const valarray<T>& base, const T& vexp);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
pow	std-headers/valarray	/^valarray<T> pow(const valarray<T>& base, const valarray<T>& exp);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
pptr	std-headers/streambuf	/^    char_type* pptr() const;$/;"	p	class:std::basic_streambuf	typeref:typename:char_type *	file:
precision	std-headers/ios	/^    streamsize precision() const;$/;"	p	class:std::ios_base	typeref:typename:streamsize	file:
precision	std-headers/ios	/^    streamsize precision(streamsize new_precision);$/;"	p	class:std::ios_base	typeref:typename:streamsize	file:
preferred	std-headers/memory	/^    preferred,$/;"	e	enum:std::pointer_safety	file:
prefix	std-headers/regex	/^    const_reference prefix() const;$/;"	p	class:std::match_results	typeref:typename:const_reference	file:
prev	std-headers/iterator	/^BidirIt prev(BidirIt it,$/;"	p	namespace:std	typeref:typename:BidirIt	file:
prev_permutation	std-headers/algorithm	/^bool prev_permutation(BidirIt first, BidirIt last);$/;"	p	namespace:std	typeref:typename:bool	file:
prev_permutation	std-headers/algorithm	/^bool prev_permutation(BidirIt first, BidirIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:bool	file:
print	std-headers/locale	/^    static const mask print;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
printf	std-headers/cstdio	/^int printf(const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
priority_queue	std-headers/queue	/^    > class priority_queue {$/;"	c	namespace:std	file:
priority_queue	std-headers/queue	/^    explicit priority_queue(const Alloc& alloc);$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    explicit priority_queue(const Compare& compare = Compare(),$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(InputIt first, InputIt last,$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(const Compare& compare, Container&& cont,$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(const Compare& compare, const Alloc& alloc);$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(const Compare& compare, const Container& cont);$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(const Compare& compare, const Container& cont,$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(const priority_queue& other);$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(const priority_queue& other, const Alloc& alloc);$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(priority_queue&& other);$/;"	p	class:std::priority_queue	file:
priority_queue	std-headers/queue	/^    priority_queue(priority_queue&& other, const Alloc& alloc);$/;"	p	class:std::priority_queue	file:
probabilities	std-headers/random	/^    std::vector<double> probabilities() const;$/;"	p	class:std::discrete_distribution	typeref:typename:std::vector<double>	file:
proj	std-headers/complex	/^complex<T> proj(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
promise	std-headers/future	/^    promise();$/;"	p	class:std::promise	file:
promise	std-headers/future	/^    promise(const promise& other) = delete;$/;"	p	class:std::promise	file:
promise	std-headers/future	/^    promise(promise&& other);$/;"	p	class:std::promise	file:
promise	std-headers/future	/^    promise(std::allocator_arg_t, const Alloc& alloc);$/;"	p	class:std::promise	file:
promise	std-headers/future	/^class promise { \/\/ SIMPLIFIED: removed R& and void specializations$/;"	c	namespace:std	file:
promise_already_satisfied	std-headers/future	/^    promise_already_satisfied,$/;"	e	enum:std::future_errc	file:
propagate_on_container_copy_assignment	std-headers/memory	/^    typedef false_type propagate_on_container_copy_assignment;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	file:
propagate_on_container_copy_assignment	std-headers/scoped_allocator	/^    typedef std::true_type propagate_on_container_copy_assignment;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::true_type	file:
propagate_on_container_move_assignment	std-headers/memory	/^    typedef false_type propagate_on_container_move_assignment;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	file:
propagate_on_container_move_assignment	std-headers/memory	/^    typedef true_type propagate_on_container_move_assignment;$/;"	t	struct:std::allocator	typeref:typename:true_type	file:
propagate_on_container_move_assignment	std-headers/scoped_allocator	/^    typedef std::true_type propagate_on_container_move_assignment;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::true_type	file:
propagate_on_container_swap	std-headers/memory	/^    typedef false_type propagate_on_container_swap;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	file:
propagate_on_container_swap	std-headers/scoped_allocator	/^    typedef std::true_type propagate_on_container_swap;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::true_type	file:
protocol_error	std-headers/system_error	/^    protocol_error,                     \/\/  EPROTO$/;"	e	enum:std::errc	file:
protocol_not_supported	std-headers/system_error	/^    protocol_not_supported,             \/\/  EPROTONOSUPPORT$/;"	e	enum:std::errc	file:
ptrdiff_t	std-headers/cstddef	/^typedef long long ptrdiff_t;$/;"	t	namespace:std::std	typeref:typename:long long	file:
pubimbue	std-headers/streambuf	/^    locale pubimbue(const locale& loc);$/;"	p	class:std::basic_streambuf	typeref:typename:locale	file:
pubseekoff	std-headers/streambuf	/^    pos_type pubseekoff(off_type off, ios_base::seekdir dir,$/;"	p	class:std::basic_streambuf	typeref:typename:pos_type	file:
pubseekpos	std-headers/streambuf	/^    pos_type pubseekpos(pos_type pos,$/;"	p	class:std::basic_streambuf	typeref:typename:pos_type	file:
pubsetbuf	std-headers/streambuf	/^    basic_streambuf* pubsetbuf(char_type* s, streamsize n);$/;"	p	class:std::basic_streambuf	typeref:typename:basic_streambuf *	file:
pubsync	std-headers/streambuf	/^    int pubsync();$/;"	p	class:std::basic_streambuf	typeref:typename:int	file:
punct	std-headers/locale	/^    static const mask punct;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
push	std-headers/queue	/^    void push(T&& value);$/;"	p	class:std::priority_queue	typeref:typename:void	file:
push	std-headers/queue	/^    void push(T&& value);$/;"	p	class:std::queue	typeref:typename:void	file:
push	std-headers/queue	/^    void push(const T& value);$/;"	p	class:std::priority_queue	typeref:typename:void	file:
push	std-headers/queue	/^    void push(const T& value);$/;"	p	class:std::queue	typeref:typename:void	file:
push	std-headers/stack	/^    void push(T&& value);$/;"	p	class:std::stack	typeref:typename:void	file:
push	std-headers/stack	/^    void push(const T& value);$/;"	p	class:std::stack	typeref:typename:void	file:
push_back	std-headers/deque	/^    void push_back(T&& value);$/;"	p	class:std::deque	typeref:typename:void	file:
push_back	std-headers/deque	/^    void push_back(const T& value);$/;"	p	class:std::deque	typeref:typename:void	file:
push_back	std-headers/list	/^    void push_back(T&& value);$/;"	p	class:std::list	typeref:typename:void	file:
push_back	std-headers/list	/^    void push_back(const T& value);$/;"	p	class:std::list	typeref:typename:void	file:
push_back	std-headers/string	/^    void push_back(CharT ch);$/;"	p	class:std::basic_string	typeref:typename:void	file:
push_back	std-headers/vector	/^    void push_back(T&& value);$/;"	p	class:std::vector	typeref:typename:void	file:
push_back	std-headers/vector	/^    void push_back(const T& value);$/;"	p	class:std::vector	typeref:typename:void	file:
push_front	std-headers/deque	/^    void push_front(T&& value);$/;"	p	class:std::deque	typeref:typename:void	file:
push_front	std-headers/deque	/^    void push_front(const T& value);$/;"	p	class:std::deque	typeref:typename:void	file:
push_front	std-headers/forward_list	/^    void push_front(T&& value);$/;"	p	class:std::forward_list	typeref:typename:void	file:
push_front	std-headers/forward_list	/^    void push_front(const T& value);$/;"	p	class:std::forward_list	typeref:typename:void	file:
push_front	std-headers/list	/^    void push_front(T&& value);$/;"	p	class:std::list	typeref:typename:void	file:
push_front	std-headers/list	/^    void push_front(const T& value);$/;"	p	class:std::list	typeref:typename:void	file:
push_heap	std-headers/algorithm	/^void push_heap(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
push_heap	std-headers/algorithm	/^void push_heap(RandomIt first, RandomIt last,$/;"	p	namespace:std	typeref:typename:void	file:
put	std-headers/locale	/^    iter_type put(iter_type out, bool intl, std::ios_base& f,$/;"	p	class:std::money_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, bool v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, const void* v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, double v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, long double v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, long long v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, long v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, unsigned long long v) const/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str, char_type fill, unsigned long v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	file:
put	std-headers/locale	/^    iter_type put(iter_type out, std::ios_base& str,$/;"	p	class:std::time_put	typeref:typename:iter_type	file:
put	std-headers/ostream	/^    basic_ostream& put(char_type ch);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
put_money	std-headers/iomanip	/^__unspecified put_money(const MoneyT& mon, bool intl = false);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
put_time	std-headers/iomanip	/^__unspecified put_time(const std::tm* tmb, const CharT* fmt);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
putback	std-headers/istream	/^    basic_istream& putback(char_type ch);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
putc	std-headers/cstdio	/^int putc(int ch, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
putchar	std-headers/cstdio	/^int putchar(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
puts	std-headers/cstdio	/^int puts(const char* str);$/;"	p	namespace:std	typeref:typename:int	file:
putwc	std-headers/cwchar	/^wint_t putwc(wchar_t ch, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:wint_t	file:
putwchar	std-headers/cwchar	/^wint_t putwchar(wchar_t ch);$/;"	p	namespace:std	typeref:typename:wint_t	file:
pword	std-headers/ios	/^    void*& pword(int index);$/;"	p	class:std::ios_base	typeref:typename:void * &	file:
qsort	std-headers/cstdlib	/^void qsort(void* ptr, std::size_t count, std::size_t size,$/;"	p	namespace:std	typeref:typename:void	file:
queue	std-headers/queue	/^    > class queue {$/;"	c	namespace:std	file:
queue	std-headers/queue	/^    explicit queue(Container&& cont = Container());$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    explicit queue(const Alloc& alloc);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    explicit queue(const Container& cont = Container());$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    explicit queue(const Container& cont);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    queue(Container&& cont, const Alloc& alloc);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    queue(const Container& cont, const Alloc& alloc);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    queue(const queue& other);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    queue(const queue& other, const Alloc& alloc);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    queue(queue&& other);$/;"	p	class:std::queue	file:
queue	std-headers/queue	/^    queue(queue&& other, const Alloc& alloc);$/;"	p	class:std::queue	file:
quick_exit	std-headers/cstdlib	/^void quick_exit(int exit_code);$/;"	p	namespace:std	typeref:typename:void	file:
quiet_NaN	std-headers/limits	/^    static T quiet_NaN();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
quot	std-headers/cinttypes	/^    std::intmax_t quot;$/;"	m	struct:std::imaxdiv_t	typeref:typename:std::intmax_t	file:
quot	std-headers/cstdlib	/^    int quot;$/;"	m	struct:std::div_t	typeref:typename:int	file:
quot	std-headers/cstdlib	/^    long long quot;$/;"	m	struct:std::lldiv_t	typeref:typename:long long	file:
quot	std-headers/cstdlib	/^    long quot;$/;"	m	struct:std::ldiv_t	typeref:typename:long	file:
quoted	std-headers/iomanip	/^__unspecified quoted(const CharT* s,$/;"	p	namespace:std	typeref:typename:__unspecified	file:
quoted	std-headers/iomanip	/^__unspecified quoted(const std::basic_string<CharT, Traits, Allocator>& s,$/;"	p	namespace:std	typeref:typename:__unspecified	file:
quoted	std-headers/iomanip	/^__unspecified quoted(std::basic_string<CharT, Traits, Allocator>& s,$/;"	p	namespace:std	typeref:typename:__unspecified	file:
radix	std-headers/limits	/^    static const int  radix;$/;"	m	class:std::numeric_limits	typeref:typename:const int	file:
raise	std-headers/csignal	/^int raise(int sig);$/;"	p	namespace:std	typeref:typename:int	file:
rand	std-headers/cstdlib	/^int rand();$/;"	p	namespace:std	typeref:typename:int	file:
randex24	std-headers/random	/^typedef std::discard_block_engine<std::ranlux24_base, 223, 23> randex24;$/;"	t	namespace:std	typeref:typename:std::discard_block_engine<std::ranlux24_base,223,23>	file:
randex48	std-headers/random	/^typedef std::discard_block_engine<std::ranlux48_base, 389, 11> randex48;$/;"	t	namespace:std	typeref:typename:std::discard_block_engine<std::ranlux48_base,389,11>	file:
random_access_iterator_tag	std-headers/iterator	/^struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	file:
random_device	std-headers/random	/^    explicit random_device(const std::string& token = "");$/;"	p	class:std::random_device	file:
random_device	std-headers/random	/^    random_device(const random_device&) = delete;$/;"	p	class:std::random_device	file:
random_device	std-headers/random	/^class random_device {$/;"	c	namespace:std	file:
random_shuffle	std-headers/algorithm	/^void random_shuffle(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
random_shuffle	std-headers/algorithm	/^void random_shuffle(RandomIt first, RandomIt last, RandomFunc& r);$/;"	p	namespace:std	typeref:typename:void	file:
random_shuffle	std-headers/algorithm	/^void random_shuffle(RandomIt first, RandomIt last, RandomFunc&& r);$/;"	p	namespace:std	typeref:typename:void	file:
range_error	std-headers/stdexcept	/^    explicit range_error(const char* what_arg);$/;"	p	class:std::range_error	file:
range_error	std-headers/stdexcept	/^    explicit range_error(const string& what_arg);$/;"	p	class:std::range_error	file:
range_error	std-headers/stdexcept	/^class range_error : public runtime_error {$/;"	c	namespace:std	file:
rank	std-headers/type_traits	/^template<class T> struct rank : integral_constant<size_t, 0> {};$/;"	s	namespace:std	file:
ranlex48_base	std-headers/random	/^typedef std::subtract_with_carry_engine<std::uint_fast64_t, 48, 5, 12> ranlex48_base;$/;"	t	namespace:std	typeref:typename:std::subtract_with_carry_engine<std::uint_fast64_t,48,5,12>	file:
ranlux24_base	std-headers/random	/^typedef std::subtract_with_carry_engine<std::uint_fast32_t, 24, 10, 24> ranlux24_base;$/;"	t	namespace:std	typeref:typename:std::subtract_with_carry_engine<std::uint_fast32_t,24,10,24>	file:
ratio	std-headers/ratio	/^struct ratio {$/;"	s	namespace:std	file:
ratio_add	std-headers/ratio	/^class ratio_add : public ratio<1, 1> {};$/;"	c	namespace:std	file:
ratio_divide	std-headers/ratio	/^class ratio_divide : public ratio<1, 1> {};$/;"	c	namespace:std	file:
ratio_equal	std-headers/ratio	/^struct ratio_equal : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
ratio_greater	std-headers/ratio	/^struct ratio_greater : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
ratio_greater_equal	std-headers/ratio	/^struct ratio_greater_equal : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
ratio_less	std-headers/ratio	/^struct ratio_less : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
ratio_less_equal	std-headers/ratio	/^struct ratio_less_equal : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
ratio_multiply	std-headers/ratio	/^class ratio_multiply : public ratio<1, 1> {};$/;"	c	namespace:std	file:
ratio_not_equal	std-headers/ratio	/^struct ratio_not_equal : std::integral_constant<bool, true> {};$/;"	s	namespace:std	file:
ratio_subtract	std-headers/ratio	/^class ratio_subtract : public ratio<1, 1> {};$/;"	c	namespace:std	file:
raw_storage_iterator	std-headers/memory	/^    explicit raw_storage_iterator(OutputIt it);$/;"	p	class:std::raw_storage_iterator	file:
raw_storage_iterator	std-headers/memory	/^class raw_storage_iterator {$/;"	c	namespace:std	file:
rbegin	std-headers/array	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::array	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/array	/^    reverse_iterator       rbegin();$/;"	p	class:std::array	typeref:typename:reverse_iterator	file:
rbegin	std-headers/deque	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::deque	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/deque	/^    reverse_iterator       rbegin();$/;"	p	class:std::deque	typeref:typename:reverse_iterator	file:
rbegin	std-headers/iterator	/^auto rbegin(C& c) -> decltype(c.rbegin());$/;"	p	namespace:std	typeref:typename:decltype (c.rbegin ())	file:
rbegin	std-headers/iterator	/^auto rbegin(const C& c) -> decltype(c.rbegin());$/;"	p	namespace:std	typeref:typename:decltype (c.rbegin ())	file:
rbegin	std-headers/iterator	/^reverse_iterator<T*> rbegin(T(&array)[N]);$/;"	p	namespace:std	typeref:typename:reverse_iterator<T * >	file:
rbegin	std-headers/list	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::list	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/list	/^    reverse_iterator       rbegin();$/;"	p	class:std::list	typeref:typename:reverse_iterator	file:
rbegin	std-headers/map	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::map	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/map	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::multimap	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/map	/^    reverse_iterator       rbegin();$/;"	p	class:std::map	typeref:typename:reverse_iterator	file:
rbegin	std-headers/map	/^    reverse_iterator       rbegin();$/;"	p	class:std::multimap	typeref:typename:reverse_iterator	file:
rbegin	std-headers/set	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::multiset	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/set	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::set	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/set	/^    reverse_iterator       rbegin();$/;"	p	class:std::multiset	typeref:typename:reverse_iterator	file:
rbegin	std-headers/set	/^    reverse_iterator       rbegin();$/;"	p	class:std::set	typeref:typename:reverse_iterator	file:
rbegin	std-headers/string	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::basic_string	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/string	/^    reverse_iterator       rbegin();$/;"	p	class:std::basic_string	typeref:typename:reverse_iterator	file:
rbegin	std-headers/unordered_map	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::unordered_map	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/unordered_map	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/unordered_map	/^    reverse_iterator       rbegin();$/;"	p	class:std::unordered_map	typeref:typename:reverse_iterator	file:
rbegin	std-headers/unordered_map	/^    reverse_iterator       rbegin();$/;"	p	class:std::unordered_multimap	typeref:typename:reverse_iterator	file:
rbegin	std-headers/vector	/^    const_reverse_iterator rbegin() const;$/;"	p	class:std::vector	typeref:typename:const_reverse_iterator	file:
rbegin	std-headers/vector	/^    reverse_iterator       rbegin();$/;"	p	class:std::vector	typeref:typename:reverse_iterator	file:
rdbuf	std-headers/fstream	/^    std::basic_filebuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_fstream	typeref:typename:std::basic_filebuf<CharT,Traits> *	file:
rdbuf	std-headers/fstream	/^    std::basic_filebuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_ifstream	typeref:typename:std::basic_filebuf<CharT,Traits> *	file:
rdbuf	std-headers/fstream	/^    std::basic_filebuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_ofstream	typeref:typename:std::basic_filebuf<CharT,Traits> *	file:
rdbuf	std-headers/ios	/^    basic_streambuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_ios	typeref:typename:basic_streambuf<CharT,Traits> *	file:
rdbuf	std-headers/ios	/^    basic_streambuf<CharT, Traits>* rdbuf(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_ios	typeref:typename:basic_streambuf<CharT,Traits> *	file:
rdbuf	std-headers/locale	/^    std::streambuf* rdbuf() const;$/;"	p	class:std::wbuffer_convert	typeref:typename:std::streambuf *	file:
rdbuf	std-headers/locale	/^    std::streambuf* rdbuf(std::streambuf* bytebuf);$/;"	p	class:std::wbuffer_convert	typeref:typename:std::streambuf *	file:
rdbuf	std-headers/sstream	/^    std::basic_stringbuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_istringstream	typeref:typename:std::basic_stringbuf<CharT,Traits> *	file:
rdbuf	std-headers/sstream	/^    std::basic_stringbuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_ostringstream	typeref:typename:std::basic_stringbuf<CharT,Traits> *	file:
rdbuf	std-headers/sstream	/^    std::basic_stringbuf<CharT, Traits>* rdbuf() const;$/;"	p	class:std::basic_stringstream	typeref:typename:std::basic_stringbuf<CharT,Traits> *	file:
rdstate	std-headers/ios	/^    iostate rdstate() const;$/;"	p	class:std::basic_ios	typeref:typename:iostate	file:
read	std-headers/istream	/^    basic_istream& read(char_type* s, std::streamsize count);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
read_only_file_system	std-headers/system_error	/^    read_only_file_system,              \/\/  EROFS$/;"	e	enum:std::errc	file:
readsome	std-headers/istream	/^    std::streamsize readsome(char_type* s, std::streamsize count);$/;"	p	class:std::basic_istream	typeref:typename:std::streamsize	file:
ready	std-headers/future	/^    ready,$/;"	e	enum:std::future_status	file:
ready	std-headers/regex	/^    bool ready() const;$/;"	p	class:std::match_results	typeref:typename:bool	file:
real	std-headers/complex	/^    T real() const;$/;"	p	class:std::complex	typeref:typename:T	file:
real	std-headers/complex	/^    void real(T value);$/;"	p	class:std::complex	typeref:typename:void	file:
real	std-headers/complex	/^T real(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:T	file:
realloc	std-headers/cstdlib	/^void* realloc(void* ptr, std::size_t new_size);$/;"	p	namespace:std	typeref:typename:void *	file:
rebind	std-headers/memory	/^    template<class U> struct rebind {$/;"	s	struct:std::allocator	file:
rebind	std-headers/memory	/^    using rebind = U* ;$/;"	t	struct:std::pointer_traits	typeref:typename:U *	file:
rebind	std-headers/scoped_allocator	/^    struct rebind {$/;"	s	class:std::scoped_allocator_adaptor	file:
rebind_alloc	std-headers/memory	/^    class rebind_alloc<T> : public Alloc {};$/;"	c	struct:std::allocator_traits	file:
rebind_traits	std-headers/memory	/^    class rebind_traits<T> : public allocator_traits<rebind_alloc<T>> {};$/;"	c	struct:std::allocator_traits	file:
recursive_mutex	std-headers/mutex	/^    recursive_mutex();$/;"	p	class:std::recursive_mutex	file:
recursive_mutex	std-headers/mutex	/^    recursive_mutex(const recursive_mutex&) = delete;$/;"	p	class:std::recursive_mutex	file:
recursive_mutex	std-headers/mutex	/^class recursive_mutex {$/;"	c	namespace:std	file:
recursive_timed_mutex	std-headers/mutex	/^    recursive_timed_mutex();$/;"	p	class:std::recursive_timed_mutex	file:
recursive_timed_mutex	std-headers/mutex	/^    recursive_timed_mutex(const recursive_timed_mutex&) = delete;$/;"	p	class:std::recursive_timed_mutex	file:
recursive_timed_mutex	std-headers/mutex	/^class recursive_timed_mutex {$/;"	c	namespace:std	file:
reduced	std-headers/README.md	/^   typedefs being exposed. Usage of various traits is greatly reduced; the $/;"	t	file:
ref	std-headers/functional	/^std::reference_wrapper<T> ref(T& t);$/;"	p	namespace:std	typeref:typename:std::reference_wrapper<T>	file:
ref	std-headers/functional	/^std::reference_wrapper<T> ref(std::reference_wrapper<T> t);$/;"	p	namespace:std	typeref:typename:std::reference_wrapper<T>	file:
ref	std-headers/functional	/^void ref(const T&&) = delete;$/;"	p	namespace:std	typeref:typename:void	file:
reference	std-headers/array	/^    typedef T& reference;$/;"	t	class:std::array	typeref:typename:T &	file:
reference	std-headers/array	/^    typedef value_type& reference;$/;"	t	class:std::array	typeref:typename:value_type &	file:
reference	std-headers/bitset	/^        reference();$/;"	p	class:std::bitset::reference	file:
reference	std-headers/bitset	/^    class reference {$/;"	c	class:std::bitset	file:
reference	std-headers/deque	/^    typedef T& reference;$/;"	t	class:std::deque	typeref:typename:T &	file:
reference	std-headers/deque	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::deque	typeref:typename:Allocator::reference	file:
reference	std-headers/deque	/^    typedef value_type& reference;$/;"	t	class:std::deque	typeref:typename:value_type &	file:
reference	std-headers/forward_list	/^    typedef T& reference;$/;"	t	class:std::forward_list	typeref:typename:T &	file:
reference	std-headers/forward_list	/^    typedef value_type& reference;$/;"	t	class:std::forward_list	typeref:typename:value_type &	file:
reference	std-headers/initializer_list	/^    typedef const T& reference;$/;"	t	class:std::initializer_list	typeref:typename:const T &	file:
reference	std-headers/iterator	/^    typedef Reference reference;$/;"	t	struct:std::iterator	typeref:typename:Reference	file:
reference	std-headers/iterator	/^    typedef T& reference;$/;"	t	struct:std::iterator_traits	typeref:typename:T &	file:
reference	std-headers/iterator	/^    typedef const T& reference;$/;"	t	class:std::istream_iterator	typeref:typename:const T &	file:
reference	std-headers/iterator	/^    typedef const T& reference;$/;"	t	class:std::istreambuf_iterator	typeref:typename:const T &	file:
reference	std-headers/iterator	/^    typedef typename Iterator::reference reference;$/;"	t	class:std::reverse_iterator	typeref:typename:Iterator::reference	file:
reference	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::reference reference;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<Iterator>::reference	file:
reference	std-headers/iterator	/^    typedef value_type&& reference;$/;"	t	class:std::move_iterator	typeref:typename:value_type &&	file:
reference	std-headers/iterator	/^    typedef void reference;$/;"	t	class:std::back_insert_iterator	typeref:typename:void	file:
reference	std-headers/iterator	/^    typedef void reference;$/;"	t	class:std::front_insert_iterator	typeref:typename:void	file:
reference	std-headers/iterator	/^    typedef void reference;$/;"	t	class:std::insert_iterator	typeref:typename:void	file:
reference	std-headers/iterator	/^    typedef void reference;$/;"	t	class:std::ostream_iterator	typeref:typename:void	file:
reference	std-headers/iterator	/^    typedef void reference;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:void	file:
reference	std-headers/list	/^    typedef T& reference;$/;"	t	class:std::list	typeref:typename:T &	file:
reference	std-headers/list	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::list	typeref:typename:Allocator::reference	file:
reference	std-headers/list	/^    typedef value_type& reference;$/;"	t	class:std::list	typeref:typename:value_type &	file:
reference	std-headers/map	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::map	typeref:typename:Allocator::reference	file:
reference	std-headers/map	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::multimap	typeref:typename:Allocator::reference	file:
reference	std-headers/map	/^    typedef value_type& reference;$/;"	t	class:std::map	typeref:typename:value_type &	file:
reference	std-headers/map	/^    typedef value_type& reference;$/;"	t	class:std::multimap	typeref:typename:value_type &	file:
reference	std-headers/memory	/^    typedef T& reference;$/;"	t	struct:std::allocator	typeref:typename:T &	file:
reference	std-headers/memory	/^    typedef void reference;$/;"	t	class:std::raw_storage_iterator	typeref:typename:void	file:
reference	std-headers/queue	/^    typedef typename Container::reference reference;$/;"	t	class:std::priority_queue	typeref:typename:Container::reference	file:
reference	std-headers/queue	/^    typedef typename Container::reference reference;$/;"	t	class:std::queue	typeref:typename:Container::reference	file:
reference	std-headers/regex	/^    typedef const value_type& reference;$/;"	t	class:std::regex_iterator	typeref:typename:const value_type &	file:
reference	std-headers/regex	/^    typedef const value_type& reference;$/;"	t	class:std::regex_token_iterator	typeref:typename:const value_type &	file:
reference	std-headers/regex	/^    typedef value_type& reference;$/;"	t	class:std::match_results	typeref:typename:value_type &	file:
reference	std-headers/set	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::multiset	typeref:typename:Allocator::reference	file:
reference	std-headers/set	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::set	typeref:typename:Allocator::reference	file:
reference	std-headers/set	/^    typedef value_type& reference;$/;"	t	class:std::multiset	typeref:typename:value_type &	file:
reference	std-headers/set	/^    typedef value_type& reference;$/;"	t	class:std::set	typeref:typename:value_type &	file:
reference	std-headers/stack	/^    typedef typename Container::reference reference;$/;"	t	class:std::stack	typeref:typename:Container::reference	file:
reference	std-headers/string	/^    typedef CharT& reference;$/;"	t	class:std::basic_string	typeref:typename:CharT &	file:
reference	std-headers/string	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::basic_string	typeref:typename:Allocator::reference	file:
reference	std-headers/string	/^    typedef value_type& reference;$/;"	t	class:std::basic_string	typeref:typename:value_type &	file:
reference	std-headers/unordered_map	/^    typedef value_type& reference;$/;"	t	class:std::unordered_map	typeref:typename:value_type &	file:
reference	std-headers/unordered_map	/^    typedef value_type& reference;$/;"	t	class:std::unordered_multimap	typeref:typename:value_type &	file:
reference	std-headers/unordered_set	/^    typedef value_type& reference;$/;"	t	class:std::unordered_multiset	typeref:typename:value_type &	file:
reference	std-headers/unordered_set	/^    typedef value_type& reference;$/;"	t	class:std::unordered_set	typeref:typename:value_type &	file:
reference	std-headers/vector	/^    typedef T& reference;$/;"	t	class:std::vector	typeref:typename:T &	file:
reference	std-headers/vector	/^    typedef typename Allocator::reference reference;$/;"	t	class:std::vector	typeref:typename:Allocator::reference	file:
reference	std-headers/vector	/^    typedef value_type& reference;$/;"	t	class:std::vector	typeref:typename:value_type &	file:
reference_wrapper	std-headers/functional	/^    reference_wrapper(T& x);$/;"	p	class:std::reference_wrapper	file:
reference_wrapper	std-headers/functional	/^    reference_wrapper(T&& x) = delete;$/;"	p	class:std::reference_wrapper	file:
reference_wrapper	std-headers/functional	/^    reference_wrapper(const reference_wrapper<T>& other);$/;"	p	class:std::reference_wrapper	file:
reference_wrapper	std-headers/functional	/^class reference_wrapper {$/;"	c	namespace:std	file:
regex	std-headers/regex	/^typedef basic_regex<char> regex;$/;"	t	namespace:std	typeref:typename:basic_regex<char>	file:
regex_constants	std-headers/regex	/^namespace regex_constants {$/;"	n	namespace:std	file:
regex_error	std-headers/regex	/^    explicit regex_error(std::regex_constants::error_type ecode);$/;"	p	class:std::regex_error	file:
regex_error	std-headers/regex	/^class regex_error : public std::runtime_error {$/;"	c	namespace:std	file:
regex_iterator	std-headers/regex	/^    > class regex_iterator {$/;"	c	namespace:std	file:
regex_iterator	std-headers/regex	/^    regex_iterator();$/;"	p	class:std::regex_iterator	file:
regex_iterator	std-headers/regex	/^    regex_iterator(BidirIt a, BidirIt b,$/;"	p	class:std::regex_iterator	file:
regex_iterator	std-headers/regex	/^    regex_iterator(BidirIt, BidirIt,$/;"	p	class:std::regex_iterator	file:
regex_iterator	std-headers/regex	/^    regex_iterator(const regex_iterator& other);$/;"	p	class:std::regex_iterator	file:
regex_match	std-headers/regex	/^bool regex_match(BidirIt first, BidirIt last,$/;"	p	namespace:std	typeref:typename:bool	file:
regex_match	std-headers/regex	/^bool regex_match(const CharT* str,$/;"	p	namespace:std	typeref:typename:bool	file:
regex_match	std-headers/regex	/^bool regex_match(const std::basic_string<CharT, STraits, SAlloc>& s,$/;"	p	namespace:std	typeref:typename:bool	file:
regex_replace	std-headers/regex	/^OutputIt regex_replace(OutputIt out, BidirIt first, BidirIt last,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
regex_replace	std-headers/regex	/^regex_replace(const CharT* s,$/;"	p	namespace:std	typeref:typename:std::basic_string<CharT>	file:
regex_replace	std-headers/regex	/^regex_replace(const std::basic_string<CharT, STraits, SAlloc>& s,$/;"	p	namespace:std	typeref:typename:std::basic_string<CharT,STraits,SAlloc>	file:
regex_search	std-headers/regex	/^bool regex_search(BidirIt first, BidirIt last,$/;"	p	namespace:std	typeref:typename:bool	file:
regex_search	std-headers/regex	/^bool regex_search(const CharT* str,$/;"	p	namespace:std	typeref:typename:bool	file:
regex_search	std-headers/regex	/^bool regex_search(const std::basic_string<CharT, STraits, SAlloc>& s,$/;"	p	namespace:std	typeref:typename:bool	file:
regex_token_iterator	std-headers/regex	/^    > class regex_token_iterator {$/;"	c	namespace:std	file:
regex_token_iterator	std-headers/regex	/^    regex_token_iterator();$/;"	p	class:std::regex_token_iterator	file:
regex_token_iterator	std-headers/regex	/^    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,$/;"	p	class:std::regex_token_iterator	file:
regex_token_iterator	std-headers/regex	/^    regex_token_iterator(const regex_token_iterator& other);$/;"	p	class:std::regex_token_iterator	file:
regex_traits	std-headers/regex	/^    regex_traits();$/;"	p	class:std::regex_traits	file:
regex_traits	std-headers/regex	/^class regex_traits {$/;"	c	namespace:std	file:
regex_type	std-headers/regex	/^    typedef basic_regex<CharT, Traits> regex_type;$/;"	t	class:std::regex_iterator	typeref:typename:basic_regex<CharT,Traits>	file:
regex_type	std-headers/regex	/^    typedef basic_regex<CharT, Traits> regex_type;$/;"	t	class:std::regex_token_iterator	typeref:typename:basic_regex<CharT,Traits>	file:
register_callback	std-headers/ios	/^    void register_callback(event_callback function, int index);$/;"	p	class:std::ios_base	typeref:typename:void	file:
rehash	std-headers/unordered_map	/^    void rehash(size_type count);$/;"	p	class:std::unordered_map	typeref:typename:void	file:
rehash	std-headers/unordered_map	/^    void rehash(size_type count);$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
rehash	std-headers/unordered_set	/^    void rehash(size_type count);$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
rehash	std-headers/unordered_set	/^    void rehash(size_type count);$/;"	p	class:std::unordered_set	typeref:typename:void	file:
rel_ops	std-headers/utility	/^namespace rel_ops {$/;"	n	namespace:std	file:
relaxed	std-headers/memory	/^    relaxed,$/;"	e	enum:std::pointer_safety	file:
release	std-headers/memory	/^    T* release();$/;"	p	class:std::auto_ptr	typeref:typename:T *	file:
release	std-headers/memory	/^    pointer release();$/;"	p	class:std::unique_ptr	typeref:typename:pointer	file:
release	std-headers/mutex	/^    mutex_type* release();$/;"	p	class:std::unique_lock	typeref:typename:mutex_type *	file:
release	std-headers/shared_mutex	/^    mutex_type* release();$/;"	p	class:std::shared_lock	typeref:typename:mutex_type *	file:
rem	std-headers/cinttypes	/^    std::intmax_t rem;$/;"	m	struct:std::imaxdiv_t	typeref:typename:std::intmax_t	file:
rem	std-headers/cstdlib	/^    int rem;$/;"	m	struct:std::div_t	typeref:typename:int	file:
rem	std-headers/cstdlib	/^    long long rem;$/;"	m	struct:std::lldiv_t	typeref:typename:long long	file:
rem	std-headers/cstdlib	/^    long rem;$/;"	m	struct:std::ldiv_t	typeref:typename:long	file:
remainder	std-headers/cmath	/^double      remainder(double x, double y);$/;"	p	namespace:std	typeref:typename:double	file:
remainder	std-headers/cmath	/^float       remainder(float x, float y);$/;"	p	namespace:std	typeref:typename:float	file:
remainder	std-headers/cmath	/^long double remainder(long double x, long double y);$/;"	p	namespace:std	typeref:typename:long double	file:
remove	std-headers/algorithm	/^ForwardIt remove(ForwardIt first, ForwardIt last, const T& value);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
remove	std-headers/cstdio	/^int remove(const char* fname);$/;"	p	namespace:std	typeref:typename:int	file:
remove	std-headers/forward_list	/^    void remove(const T& value);$/;"	p	class:std::forward_list	typeref:typename:void	file:
remove	std-headers/list	/^    void remove(const T& value);$/;"	p	class:std::list	typeref:typename:void	file:
remove_all_extents	std-headers/type_traits	/^template<class T> struct remove_all_extents {$/;"	s	namespace:std	file:
remove_const	std-headers/type_traits	/^template<class T> struct remove_const {$/;"	s	namespace:std	file:
remove_copy	std-headers/algorithm	/^OutputIt remove_copy(InputIt first, InputIt last, OutputIt d_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
remove_copy_if	std-headers/algorithm	/^OutputIt remove_copy_if(InputIt first, InputIt last, OutputIt d_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
remove_cv	std-headers/type_traits	/^template<class T> struct remove_cv {$/;"	s	namespace:std	file:
remove_extent	std-headers/type_traits	/^template<class T> struct remove_extent {$/;"	s	namespace:std	file:
remove_if	std-headers/algorithm	/^ForwardIt remove_if(ForwardIt first, ForwardIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
remove_if	std-headers/forward_list	/^    void remove_if(UnaryPredicate p);$/;"	p	class:std::forward_list	typeref:typename:void	file:
remove_if	std-headers/list	/^    void remove_if(UnaryPredicate p);$/;"	p	class:std::list	typeref:typename:void	file:
remove_pointer	std-headers/type_traits	/^template<class T> struct remove_pointer {$/;"	s	namespace:std	file:
remove_reference	std-headers/type_traits	/^template<class T> struct remove_reference {$/;"	s	namespace:std	file:
remove_volatile	std-headers/type_traits	/^template<class T> struct remove_volatile {$/;"	s	namespace:std	file:
remquo	std-headers/cmath	/^double      remquo(double x, double y, int* quo);$/;"	p	namespace:std	typeref:typename:double	file:
remquo	std-headers/cmath	/^float       remquo(float x, float y, int* quo);$/;"	p	namespace:std	typeref:typename:float	file:
remquo	std-headers/cmath	/^long double remquo(long double x, long double y, int* quo);$/;"	p	namespace:std	typeref:typename:long double	file:
rename	std-headers/cstdio	/^int rename(const char* old_filename, const char* new_filename);$/;"	p	namespace:std	typeref:typename:int	file:
rend	std-headers/array	/^    const_reverse_iterator rend() const;$/;"	p	class:std::array	typeref:typename:const_reverse_iterator	file:
rend	std-headers/array	/^    reverse_iterator       rend();$/;"	p	class:std::array	typeref:typename:reverse_iterator	file:
rend	std-headers/deque	/^    const_reverse_iterator rend() const;$/;"	p	class:std::deque	typeref:typename:const_reverse_iterator	file:
rend	std-headers/deque	/^    reverse_iterator       rend();$/;"	p	class:std::deque	typeref:typename:reverse_iterator	file:
rend	std-headers/iterator	/^auto rend(C& c) -> decltype(c.rend());$/;"	p	namespace:std	typeref:typename:decltype (c.rend ())	file:
rend	std-headers/iterator	/^auto rend(const C& c) -> decltype(c.rend());$/;"	p	namespace:std	typeref:typename:decltype (c.rend ())	file:
rend	std-headers/iterator	/^reverse_iterator<T*> rend(T(&array)[N]);$/;"	p	namespace:std	typeref:typename:reverse_iterator<T * >	file:
rend	std-headers/list	/^    const_reverse_iterator rend() const;$/;"	p	class:std::list	typeref:typename:const_reverse_iterator	file:
rend	std-headers/list	/^    reverse_iterator       rend();$/;"	p	class:std::list	typeref:typename:reverse_iterator	file:
rend	std-headers/map	/^    const_reverse_iterator rend() const;$/;"	p	class:std::map	typeref:typename:const_reverse_iterator	file:
rend	std-headers/map	/^    const_reverse_iterator rend() const;$/;"	p	class:std::multimap	typeref:typename:const_reverse_iterator	file:
rend	std-headers/map	/^    reverse_iterator       rend();$/;"	p	class:std::map	typeref:typename:reverse_iterator	file:
rend	std-headers/map	/^    reverse_iterator       rend();$/;"	p	class:std::multimap	typeref:typename:reverse_iterator	file:
rend	std-headers/set	/^    const_reverse_iterator rend() const;$/;"	p	class:std::multiset	typeref:typename:const_reverse_iterator	file:
rend	std-headers/set	/^    const_reverse_iterator rend() const;$/;"	p	class:std::set	typeref:typename:const_reverse_iterator	file:
rend	std-headers/set	/^    reverse_iterator       rend();$/;"	p	class:std::multiset	typeref:typename:reverse_iterator	file:
rend	std-headers/set	/^    reverse_iterator       rend();$/;"	p	class:std::set	typeref:typename:reverse_iterator	file:
rend	std-headers/string	/^    const_reverse_iterator rend() const;$/;"	p	class:std::basic_string	typeref:typename:const_reverse_iterator	file:
rend	std-headers/string	/^    reverse_iterator       rend();$/;"	p	class:std::basic_string	typeref:typename:reverse_iterator	file:
rend	std-headers/unordered_map	/^    const_reverse_iterator rend() const;$/;"	p	class:std::unordered_map	typeref:typename:const_reverse_iterator	file:
rend	std-headers/unordered_map	/^    const_reverse_iterator rend() const;$/;"	p	class:std::unordered_multimap	typeref:typename:const_reverse_iterator	file:
rend	std-headers/unordered_map	/^    reverse_iterator       rend();$/;"	p	class:std::unordered_map	typeref:typename:reverse_iterator	file:
rend	std-headers/unordered_map	/^    reverse_iterator       rend();$/;"	p	class:std::unordered_multimap	typeref:typename:reverse_iterator	file:
rend	std-headers/vector	/^    const_reverse_iterator rend() const;$/;"	p	class:std::vector	typeref:typename:const_reverse_iterator	file:
rend	std-headers/vector	/^    reverse_iterator       rend();$/;"	p	class:std::vector	typeref:typename:reverse_iterator	file:
rep	std-headers/chrono	/^    typedef int rep; \/\/ SIMPLIFIED: actually unspecified$/;"	t	class:std::chrono::high_resolution_clock	typeref:typename:int	file:
rep	std-headers/chrono	/^    typedef int rep; \/\/ SIMPLIFIED: actually unspecified$/;"	t	class:std::chrono::steady_clock	typeref:typename:int	file:
rep	std-headers/chrono	/^    typedef int rep; \/\/ SIMPLIFIED: actually unspecified$/;"	t	class:std::chrono::system_clock	typeref:typename:int	file:
rep	std-headers/chrono	/^    typedef int rep;$/;"	t	class:std::chrono::time_point	typeref:typename:int	file:
replace	std-headers/string	/^    basic_string& replace(const_iterator first, const_iterator last,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
replace	std-headers/string	/^    basic_string& replace(size_type pos, size_type count,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	file:
replace_copy	std-headers/algorithm	/^OutputIt replace_copy(InputIt first, InputIt last, OutputIt d_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
replace_copy_if	std-headers/algorithm	/^OutputIt replace_copy_if(InputIt first, InputIt last, OutputIt d_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
replace_if	std-headers/algorithm	/^void replace_if(ForwardIt first, ForwardIt last,$/;"	p	namespace:std	typeref:typename:void	file:
reserve	std-headers/deque	/^    void reserve(size_type n);$/;"	p	class:std::deque	typeref:typename:void	file:
reserve	std-headers/string	/^    void reserve(size_type new_cap = 0);$/;"	p	class:std::basic_string	typeref:typename:void	file:
reserve	std-headers/unordered_map	/^    void reserve(size_type count);$/;"	p	class:std::unordered_map	typeref:typename:void	file:
reserve	std-headers/unordered_map	/^    void reserve(size_type count);$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
reserve	std-headers/unordered_set	/^    void reserve(size_type count);$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
reserve	std-headers/unordered_set	/^    void reserve(size_type count);$/;"	p	class:std::unordered_set	typeref:typename:void	file:
reserve	std-headers/vector	/^    void reserve(size_type n);$/;"	p	class:std::vector	typeref:typename:void	file:
reset	std-headers/bitset	/^    bitset<N>& reset();$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
reset	std-headers/bitset	/^    bitset<N>& reset(size_t pos);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
reset	std-headers/future	/^    void reset();$/;"	p	class:std::packaged_task	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset();$/;"	p	class:std::shared_ptr	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset();$/;"	p	class:std::weak_ptr	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset(T* p = 0);$/;"	p	class:std::auto_ptr	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset(Y* ptr);$/;"	p	class:std::shared_ptr	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset(Y* ptr, Deleter d);$/;"	p	class:std::shared_ptr	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset(Y* ptr, Deleter d, Alloc alloc);$/;"	p	class:std::shared_ptr	typeref:typename:void	file:
reset	std-headers/memory	/^    void reset(pointer ptr = pointer());$/;"	p	class:std::unique_ptr	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::bernoulli_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::binomial_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::cauchy_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::chi_squared_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::discrete_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::exponential_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::extreme_value_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::fisher_f_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::gamma_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::geometric_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::lognormal_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::negative_binomial_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::normal_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::piecewise_constant_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::piecewise_linear_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::poisson_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::student_t_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::uniform_int_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::uniform_real_distribution	typeref:typename:void	file:
reset	std-headers/random	/^    void reset();$/;"	p	class:std::weibull_distribution	typeref:typename:void	file:
resetiosflags	std-headers/iomanip	/^__unspecified resetiosflags(std::ios_base::fmtflags mask);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
resize	std-headers/deque	/^    void resize(size_type count);$/;"	p	class:std::deque	typeref:typename:void	file:
resize	std-headers/deque	/^    void resize(size_type count, T value = T());$/;"	p	class:std::deque	typeref:typename:void	file:
resize	std-headers/deque	/^    void resize(size_type count, const value_type& value);$/;"	p	class:std::deque	typeref:typename:void	file:
resize	std-headers/forward_list	/^    void resize(size_type count);$/;"	p	class:std::forward_list	typeref:typename:void	file:
resize	std-headers/forward_list	/^    void resize(size_type count, const value_type& value);$/;"	p	class:std::forward_list	typeref:typename:void	file:
resize	std-headers/list	/^    void resize(size_type count);$/;"	p	class:std::list	typeref:typename:void	file:
resize	std-headers/list	/^    void resize(size_type count, T value = T());$/;"	p	class:std::list	typeref:typename:void	file:
resize	std-headers/list	/^    void resize(size_type count, const value_type& value);$/;"	p	class:std::list	typeref:typename:void	file:
resize	std-headers/string	/^    void resize(size_type count);$/;"	p	class:std::basic_string	typeref:typename:void	file:
resize	std-headers/string	/^    void resize(size_type count, T value = T());$/;"	p	class:std::basic_string	typeref:typename:void	file:
resize	std-headers/string	/^    void resize(size_type count, const value_type& value);$/;"	p	class:std::basic_string	typeref:typename:void	file:
resize	std-headers/valarray	/^    void resize(std::size_t count, T value = T());$/;"	p	class:std::valarray	typeref:typename:void	file:
resize	std-headers/vector	/^    void resize(size_type count);$/;"	p	class:std::vector	typeref:typename:void	file:
resize	std-headers/vector	/^    void resize(size_type count, T value = T());$/;"	p	class:std::vector	typeref:typename:void	file:
resize	std-headers/vector	/^    void resize(size_type count, const value_type& value);$/;"	p	class:std::vector	typeref:typename:void	file:
resource_deadlock_would_occur	std-headers/system_error	/^    resource_deadlock_would_occur,      \/\/  EDEADLK$/;"	e	enum:std::errc	file:
resource_unavailable_try_again	std-headers/system_error	/^    resource_unavailable_try_again,     \/\/  EAGAIN$/;"	e	enum:std::errc	file:
result	std-headers/locale	/^    enum result {$/;"	g	class:std::codecvt_base	file:
result_of	std-headers/type_traits	/^template<class... ArgTypes> class result_of {$/;"	c	namespace:std	file:
result_out_of_range	std-headers/system_error	/^    result_out_of_range,                \/\/  ERANGE$/;"	e	enum:std::errc	file:
result_type	std-headers/functional	/^    typedef R result_type;$/;"	t	class:std::function	typeref:typename:R	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::bit_and	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::bit_not	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::bit_or	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::bit_xor	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::divides	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::minus	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::modulus	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::multiplies	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::negate	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef T result_type;$/;"	t	struct:std::plus	typeref:typename:T	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::binary_negate	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::equal_to	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::greater	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::greater_equal	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::less	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::less_equal	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::logical_and	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::logical_not	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::logical_or	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::not_equal_to	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef bool result_type;$/;"	t	struct:std::unary_negate	typeref:typename:bool	file:
result_type	std-headers/functional	/^    typedef std::size_t result_type;$/;"	t	struct:std::hash	typeref:typename:std::size_t	file:
result_type	std-headers/functional	/^    typedef void result_type;$/;"	t	class:std::reference_wrapper	typeref:typename:void	file:
result_type	std-headers/map	/^        typedef bool result_type;$/;"	t	class:std::map::value_compare	typeref:typename:bool	file:
result_type	std-headers/map	/^        typedef bool result_type;$/;"	t	class:std::multimap::value_compare	typeref:typename:bool	file:
result_type	std-headers/memory	/^    typedef bool result_type;$/;"	t	struct:std::owner_less	typeref:typename:bool	file:
result_type	std-headers/random	/^    typedef IntType result_type;$/;"	t	class:std::binomial_distribution	typeref:typename:IntType	file:
result_type	std-headers/random	/^    typedef IntType result_type;$/;"	t	class:std::discrete_distribution	typeref:typename:IntType	file:
result_type	std-headers/random	/^    typedef IntType result_type;$/;"	t	class:std::geometric_distribution	typeref:typename:IntType	file:
result_type	std-headers/random	/^    typedef IntType result_type;$/;"	t	class:std::negative_binomial_distribution	typeref:typename:IntType	file:
result_type	std-headers/random	/^    typedef IntType result_type;$/;"	t	class:std::poisson_distribution	typeref:typename:IntType	file:
result_type	std-headers/random	/^    typedef IntType result_type;$/;"	t	class:std::uniform_int_distribution	typeref:typename:IntType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::cauchy_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::chi_squared_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::exponential_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::extreme_value_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::fisher_f_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::gamma_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::lognormal_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::normal_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::piecewise_constant_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::piecewise_linear_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::student_t_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::uniform_real_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef RealType result_type;$/;"	t	class:std::weibull_distribution	typeref:typename:RealType	file:
result_type	std-headers/random	/^    typedef UIntType result_type;$/;"	t	class:std::linear_congruential_engine	typeref:typename:UIntType	file:
result_type	std-headers/random	/^    typedef UIntType result_type;$/;"	t	class:std::mersenne_twister_engine	typeref:typename:UIntType	file:
result_type	std-headers/random	/^    typedef UIntType result_type;$/;"	t	class:std::subtract_with_carry_engine	typeref:typename:UIntType	file:
result_type	std-headers/random	/^    typedef bool result_type;$/;"	t	class:std::bernoulli_distribution	typeref:typename:bool	file:
result_type	std-headers/random	/^    typedef std::uint_least32_t result_type;$/;"	t	class:std::seed_seq	typeref:typename:std::uint_least32_t	file:
result_type	std-headers/random	/^    typedef typename Engine::result_type result_type;$/;"	t	class:std::discard_block_engine	typeref:typename:Engine::result_type	file:
result_type	std-headers/random	/^    typedef typename Engine::result_type result_type;$/;"	t	class:std::independent_bits_engine	typeref:typename:Engine::result_type	file:
result_type	std-headers/random	/^    typedef typename Engine::result_type result_type;$/;"	t	class:std::shuffle_order_engine	typeref:typename:Engine::result_type	file:
result_type	std-headers/random	/^    typedef unsigned int result_type;$/;"	t	class:std::random_device	typeref:typename:unsigned int	file:
rethrow_if_nested	std-headers/exception	/^void rethrow_if_nested(const E& e);$/;"	p	namespace:std	typeref:typename:void	file:
rethrow_nested	std-headers/exception	/^    void rethrow_nested() const;$/;"	p	class:std::nested_exception	typeref:typename:void	file:
return_temporary_buffer	std-headers/memory	/^void return_temporary_buffer(T* p);$/;"	p	namespace:std	typeref:typename:void	file:
reverse	std-headers/algorithm	/^void reverse(BidirIt first, BidirIt last);$/;"	p	namespace:std	typeref:typename:void	file:
reverse	std-headers/forward_list	/^    void reverse();$/;"	p	class:std::forward_list	typeref:typename:void	file:
reverse	std-headers/list	/^    void reverse();$/;"	p	class:std::list	typeref:typename:void	file:
reverse_copy	std-headers/algorithm	/^OutputIt reverse_copy(BidirIt first, BidirIt last, OutputIt d_first);$/;"	p	namespace:std	typeref:typename:OutputIt	file:
reverse_iterator	std-headers/array	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::array	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/deque	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::deque	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/iterator	/^    explicit reverse_iterator(Iterator x);$/;"	p	class:std::reverse_iterator	file:
reverse_iterator	std-headers/iterator	/^    reverse_iterator();$/;"	p	class:std::reverse_iterator	file:
reverse_iterator	std-headers/iterator	/^    template <class U> reverse_iterator(const reverse_iterator<U>& other);$/;"	p	class:std::reverse_iterator	file:
reverse_iterator	std-headers/iterator	/^class reverse_iterator { \/\/ SIMPLIFIED: does not inherit iterator$/;"	c	namespace:std	file:
reverse_iterator	std-headers/list	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::list	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/map	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::map	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/map	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::multimap	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/set	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::multiset	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/set	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::set	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/string	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	file:
reverse_iterator	std-headers/vector	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::vector	typeref:typename:std::reverse_iterator<iterator>	file:
rewind	std-headers/cstdio	/^void rewind(std::FILE* stream);$/;"	p	namespace:std	typeref:typename:void	file:
rfind	std-headers/string	/^    size_type rfind(CharT ch, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
rfind	std-headers/string	/^    size_type rfind(const CharT* s, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
rfind	std-headers/string	/^    size_type rfind(const CharT* s, size_type pos, size_type count) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
rfind	std-headers/string	/^    size_type rfind(const basic_string& str, size_type pos = npos) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
right	std-headers/ios	/^    static constexpr fmtflags right;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
right	std-headers/ios	/^ios_base& right(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
rint	std-headers/cmath	/^double rint(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
rint	std-headers/cmath	/^float rint(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
rint	std-headers/cmath	/^long double rint(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
rotate	std-headers/algorithm	/^ForwardIt rotate(ForwardIt first, ForwardIt n_first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
rotate	std-headers/algorithm	/^void rotate(ForwardIt first, ForwardIt n_first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:void	file:
rotate_copy	std-headers/algorithm	/^OutputIt rotate_copy(ForwardIt first, ForwardIt n_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
round	std-headers/cmath	/^double round(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
round	std-headers/cmath	/^float round(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
round	std-headers/cmath	/^long double round(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
round_error	std-headers/limits	/^    static T round_error();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
round_indeterminate	std-headers/limits	/^    round_indeterminate       = -1,$/;"	e	enum:std::float_round_style	file:
round_style	std-headers/limits	/^    static const float_round_style round_style;$/;"	m	class:std::numeric_limits	typeref:typename:const float_round_style	file:
round_to_nearest	std-headers/limits	/^    round_to_nearest          = 1,$/;"	e	enum:std::float_round_style	file:
round_toward_infinity	std-headers/limits	/^    round_toward_infinity     = 2,$/;"	e	enum:std::float_round_style	file:
round_toward_neg_infinity	std-headers/limits	/^    round_toward_neg_infinity = 3$/;"	e	enum:std::float_round_style	file:
round_toward_zero	std-headers/limits	/^    round_toward_zero         = 0,$/;"	e	enum:std::float_round_style	file:
runtime_error	std-headers/stdexcept	/^    explicit runtime_error(const char* what_arg);$/;"	p	class:std::runtime_error	file:
runtime_error	std-headers/stdexcept	/^    explicit runtime_error(const string& what_arg);$/;"	p	class:std::runtime_error	file:
runtime_error	std-headers/stdexcept	/^class runtime_error : public exception {$/;"	c	namespace:std	file:
s	std-headers/random	/^    result_type s() const;$/;"	p	class:std::lognormal_distribution	typeref:typename:result_type	file:
sbumpc	std-headers/streambuf	/^    int_type sbumpc();$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
scalbln	std-headers/cmath	/^double      scalbln(double x, long exp);$/;"	p	namespace:std	typeref:typename:double	file:
scalbln	std-headers/cmath	/^float       scalbln(float x, long exp);$/;"	p	namespace:std	typeref:typename:float	file:
scalbln	std-headers/cmath	/^long double scalbln(long double x, long exp);$/;"	p	namespace:std	typeref:typename:long double	file:
scalbn	std-headers/cmath	/^double      scalbn(double x, int exp);$/;"	p	namespace:std	typeref:typename:double	file:
scalbn	std-headers/cmath	/^float       scalbn(float x, int exp);$/;"	p	namespace:std	typeref:typename:float	file:
scalbn	std-headers/cmath	/^long double scalbn(long double x, int exp);$/;"	p	namespace:std	typeref:typename:long double	file:
scan_is	std-headers/locale	/^    const CharT* scan_is(mask m, const CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
scan_not	std-headers/locale	/^    const CharT* scan_not(mask m, const CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
scanf	std-headers/cstdio	/^int scanf(const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
scientific	std-headers/ios	/^    static constexpr fmtflags scientific;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
scientific	std-headers/ios	/^ios_base& scientific(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^    scoped_allocator_adaptor();$/;"	p	class:std::scoped_allocator_adaptor	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^    scoped_allocator_adaptor(OuterA2&& outerAlloc, const InnerAllocs& ... innerAllocs);$/;"	p	class:std::scoped_allocator_adaptor	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^    scoped_allocator_adaptor(const scoped_allocator_adaptor& other);$/;"	p	class:std::scoped_allocator_adaptor	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^    scoped_allocator_adaptor(const scoped_allocator_adaptor<OuterA2, InnerAllocs...>& other);$/;"	p	class:std::scoped_allocator_adaptor	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^    scoped_allocator_adaptor(scoped_allocator_adaptor&& other);$/;"	p	class:std::scoped_allocator_adaptor	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^    scoped_allocator_adaptor(scoped_allocator_adaptor<OuterA2, InnerAllocs...>&& other);$/;"	p	class:std::scoped_allocator_adaptor	file:
scoped_allocator_adaptor	std-headers/scoped_allocator	/^class scoped_allocator_adaptor : public OuterAlloc {$/;"	c	namespace:std	file:
search	std-headers/algorithm	/^ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,$/;"	p	namespace:std	typeref:typename:ForwardIt1	file:
search_n	std-headers/algorithm	/^ForwardIt search_n(ForwardIt first, ForwardIt last, Size count, const T& value);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
search_n	std-headers/algorithm	/^ForwardIt search_n(ForwardIt first, ForwardIt last, Size count, const T& value,$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
second	std-headers/utility	/^    T2 second;$/;"	m	struct:std::pair	typeref:typename:T2	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::bit_and	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::bit_or	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::bit_xor	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::divides	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::equal_to	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::greater	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::greater_equal	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::less	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::less_equal	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::logical_and	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::logical_or	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::minus	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::modulus	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::multiplies	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::not_equal_to	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef T second_argument_type;$/;"	t	struct:std::plus	typeref:typename:T	file:
second_argument_type	std-headers/functional	/^    typedef typename Predicate::second_argument_type second_argument_type;$/;"	t	struct:std::binary_negate	typeref:typename:Predicate::second_argument_type	file:
second_argument_type	std-headers/functional	/^    typedef void second_argument_type;$/;"	t	class:std::reference_wrapper	typeref:typename:void	file:
second_argument_type	std-headers/memory	/^    typedef void second_argument_type; \/\/ actually ether shared_ptr<T> or weak_ptr<T>$/;"	t	struct:std::owner_less	typeref:typename:void	file:
second_type	std-headers/utility	/^    typedef T2 second_type;$/;"	t	struct:std::pair	typeref:typename:T2	file:
seconds	std-headers/chrono	/^typedef duration<int> seconds;$/;"	t	namespace:std::chrono	typeref:typename:duration<int>	file:
seed	std-headers/random	/^    void seed();$/;"	p	class:std::discard_block_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed();$/;"	p	class:std::independent_bits_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed();$/;"	p	class:std::shuffle_order_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(Sseq& seq);$/;"	p	class:std::discard_block_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(Sseq& seq);$/;"	p	class:std::independent_bits_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(Sseq& seq);$/;"	p	class:std::linear_congruential_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(Sseq& seq);$/;"	p	class:std::mersenne_twister_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(Sseq& seq);$/;"	p	class:std::shuffle_order_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(Sseq& seq);$/;"	p	class:std::subtract_with_carry_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(result_type value = default_seed);$/;"	p	class:std::linear_congruential_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(result_type value = default_seed);$/;"	p	class:std::mersenne_twister_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(result_type value = default_seed);$/;"	p	class:std::subtract_with_carry_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(result_type value);$/;"	p	class:std::discard_block_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(result_type value);$/;"	p	class:std::independent_bits_engine	typeref:typename:void	file:
seed	std-headers/random	/^    void seed(result_type value);$/;"	p	class:std::shuffle_order_engine	typeref:typename:void	file:
seed_seq	std-headers/random	/^    seed_seq();$/;"	p	class:std::seed_seq	file:
seed_seq	std-headers/random	/^    seed_seq(InputIt begin, InputIt end);$/;"	p	class:std::seed_seq	file:
seed_seq	std-headers/random	/^    seed_seq(const seed_seq&) = delete;$/;"	p	class:std::seed_seq	file:
seed_seq	std-headers/random	/^    seed_seq(std::initializer_list<T> il);$/;"	p	class:std::seed_seq	file:
seed_seq	std-headers/random	/^class seed_seq {$/;"	c	namespace:std	file:
seekdir	std-headers/ios	/^    typedef int seekdir; \/\/ actually impl-defined$/;"	t	class:std::ios_base	typeref:typename:int	file:
seekg	std-headers/istream	/^    basic_istream& seekg(off_type off, std::ios_base::seekdir dir);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
seekg	std-headers/istream	/^    basic_istream& seekg(pos_type pos);$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
seekoff	std-headers/fstream	/^    virtual pos_type seekoff(off_type off, ios_base::seekdir dir,$/;"	p	class:std::basic_filebuf	typeref:typename:pos_type	file:
seekoff	std-headers/sstream	/^    virtual pos_type seekoff(off_type off, ios_base::seekdir dir,$/;"	p	class:std::basic_stringbuf	typeref:typename:pos_type	file:
seekoff	std-headers/streambuf	/^    virtual pos_type seekoff(off_type off, ios_base::seekdir dir,$/;"	p	class:std::basic_streambuf	typeref:typename:pos_type	file:
seekp	std-headers/ostream	/^    basic_ostream& seekp(off_type off, std::ios_base::seekdir dir);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
seekp	std-headers/ostream	/^    basic_ostream& seekp(pos_type pos);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
seekpos	std-headers/fstream	/^    virtual pos_type seekpos(pos_type pos,$/;"	p	class:std::basic_filebuf	typeref:typename:pos_type	file:
seekpos	std-headers/sstream	/^    virtual pos_type seekpos(pos_type pos,$/;"	p	class:std::basic_stringbuf	typeref:typename:pos_type	file:
seekpos	std-headers/streambuf	/^    virtual pos_type seekpos(pos_type pos,$/;"	p	class:std::basic_streambuf	typeref:typename:pos_type	file:
select_on_container_copy_construction	std-headers/memory	/^    static Alloc select_on_container_copy_construction(const Alloc& a);$/;"	p	struct:std::allocator_traits	typeref:typename:Alloc	file:
select_on_container_copy_construction	std-headers/scoped_allocator	/^    scoped_allocator_adaptor select_on_container_copy_construction() const;$/;"	p	class:std::scoped_allocator_adaptor	typeref:typename:scoped_allocator_adaptor	file:
sentry	std-headers/istream	/^        explicit sentry(std::basic_istream<CharT, Traits>& is, bool noskipws = false);$/;"	p	class:std::basic_istream::sentry	file:
sentry	std-headers/istream	/^    class sentry {$/;"	c	class:std::basic_istream	file:
sentry	std-headers/ostream	/^        explicit sentry(std::basic_ostream<CharT, Traits>& is, bool noskipws = false);$/;"	p	class:std::basic_ostream::sentry	file:
sentry	std-headers/ostream	/^    class sentry {$/;"	c	class:std::basic_ostream	file:
set	std-headers/bitset	/^    bitset<N>& set();$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
set	std-headers/bitset	/^    bitset<N>& set(size_t pos, bool value = true);$/;"	p	class:std::bitset	typeref:typename:bitset<N> &	file:
set	std-headers/set	/^    > class set {$/;"	c	namespace:std	file:
set	std-headers/set	/^    explicit set(const Allocator& alloc);$/;"	p	class:std::set	file:
set	std-headers/set	/^    explicit set(const Compare& comp = Compare(),$/;"	p	class:std::set	file:
set	std-headers/set	/^    explicit set(const Compare& comp,$/;"	p	class:std::set	file:
set	std-headers/set	/^    set();$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(InputIt first, InputIt last, const Allocator& alloc);$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(InputIt first, InputIt last,$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(const set& other);$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(const set& other, const Allocator& alloc);$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(set&& other);$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(set&& other, const Allocator& alloc);$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::set	file:
set	std-headers/set	/^    set(std::initializer_list<value_type> init,$/;"	p	class:std::set	file:
set_difference	std-headers/algorithm	/^OutputIt set_difference(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
set_exception	std-headers/future	/^    void set_exception(std::exception_ptr p);$/;"	p	class:std::promise	typeref:typename:void	file:
set_exception_at_thread_exit	std-headers/future	/^    void set_exception_at_thread_exit(std::exception_ptr p);$/;"	p	class:std::promise	typeref:typename:void	file:
set_intersection	std-headers/algorithm	/^OutputIt set_intersection(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
set_new_handler	std-headers/new	/^std::new_handler set_new_handler(std::new_handler new_p);$/;"	p	namespace:std	typeref:typename:std::new_handler	file:
set_rdbuf	std-headers/ios	/^    void set_rdbuf(std::basic_streambuf<CharT, Traits>* sb);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
set_symmetric_difference	std-headers/algorithm	/^OutputIt set_symmetric_difference(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
set_terminate	std-headers/exception	/^std::terminate_handler set_terminate(std::terminate_handler f);$/;"	p	namespace:std	typeref:typename:std::terminate_handler	file:
set_unexpected	std-headers/exception	/^std::unexpected_handler set_unexpected(std::unexpected_handler f);$/;"	p	namespace:std	typeref:typename:std::unexpected_handler	file:
set_union	std-headers/algorithm	/^OutputIt set_union(InputIt1 first1, InputIt1 last1,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
set_value	std-headers/future	/^    void set_value(); \/\/ member of void specialization$/;"	p	class:std::promise	typeref:typename:void	file:
set_value	std-headers/future	/^    void set_value(R& value);   \/\/ member of R& specialization$/;"	p	class:std::promise	typeref:typename:void	file:
set_value	std-headers/future	/^    void set_value(R&& value);$/;"	p	class:std::promise	typeref:typename:void	file:
set_value	std-headers/future	/^    void set_value(const R& value);$/;"	p	class:std::promise	typeref:typename:void	file:
set_value_at_thread_exit	std-headers/future	/^    void set_value_at_thread_exit(); \/\/ member of void specialization$/;"	p	class:std::promise	typeref:typename:void	file:
set_value_at_thread_exit	std-headers/future	/^    void set_value_at_thread_exit(R& value);   \/\/ member of R& specialization$/;"	p	class:std::promise	typeref:typename:void	file:
set_value_at_thread_exit	std-headers/future	/^    void set_value_at_thread_exit(R&& value);$/;"	p	class:std::promise	typeref:typename:void	file:
set_value_at_thread_exit	std-headers/future	/^    void set_value_at_thread_exit(const R& value);$/;"	p	class:std::promise	typeref:typename:void	file:
setbase	std-headers/iomanip	/^__unspecified setbase(int base);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
setbuf	std-headers/cstdio	/^void setbuf(std::FILE* stream, char* buffer);$/;"	p	namespace:std	typeref:typename:void	file:
setbuf	std-headers/fstream	/^    virtual basic_streambuf<CharT, Traits>* setbuf(char_type* s, streamsize n);$/;"	p	class:std::basic_filebuf	typeref:typename:basic_streambuf<CharT,Traits> *	file:
setbuf	std-headers/sstream	/^    virtual basic_streambuf<CharT, Traits>* setbuf(char_type* s, streamsize n);$/;"	p	class:std::basic_stringbuf	typeref:typename:basic_streambuf<CharT,Traits> *	file:
setbuf	std-headers/streambuf	/^    virtual basic_streambuf* setbuf(char_type* s, streamsize n);$/;"	p	class:std::basic_streambuf	typeref:typename:basic_streambuf *	file:
setf	std-headers/ios	/^    fmtflags setf(fmtflags flags);$/;"	p	class:std::ios_base	typeref:typename:fmtflags	file:
setf	std-headers/ios	/^    fmtflags setf(fmtflags flags, fmtflags mask);$/;"	p	class:std::ios_base	typeref:typename:fmtflags	file:
setfill	std-headers/iomanip	/^__unspecified setfill(CharT c);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
setg	std-headers/streambuf	/^    void setg(char_type* gbeg, char_type* gnext, char_type* gend);$/;"	p	class:std::basic_streambuf	typeref:typename:void	file:
setiosflags	std-headers/iomanip	/^__unspecified setiosflags(std::ios_base::fmtflags mask);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
setjmp	std-headers/csetjmp	/^void setjmp(jmp_buf buf); \/\/ actually a macro$/;"	p	typeref:typename:void	file:
setlocale	std-headers/clocale	/^char* setlocale(int category, const char* locale);$/;"	p	namespace:std	typeref:typename:char *	file:
setp	std-headers/streambuf	/^    void setp(char_type* pbeg, char_type* pend);$/;"	p	class:std::basic_streambuf	typeref:typename:void	file:
setprecision	std-headers/iomanip	/^__unspecified setprecision(int n);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
setstate	std-headers/ios	/^    void setstate(iostate state);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
setvbuf	std-headers/cstdio	/^int setvbuf(std::FILE* stream, char* buffer, int mode, std::size_t size);$/;"	p	namespace:std	typeref:typename:int	file:
setw	std-headers/iomanip	/^__unspecified setw(int n);$/;"	p	namespace:std	typeref:typename:__unspecified	file:
sgetc	std-headers/streambuf	/^    int_type sgetc();$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
sgetn	std-headers/streambuf	/^    streamsize sgetn(char_type* s, streamsize n);$/;"	p	class:std::basic_streambuf	typeref:typename:streamsize	file:
share	std-headers/future	/^    std::shared_future<T> share();$/;"	p	class:std::future	typeref:typename:std::shared_future<T>	file:
shared_from_this	std-headers/memory	/^    shared_ptr<T const> shared_from_this() const;$/;"	p	class:std::enable_shared_from_this	typeref:typename:shared_ptr<T const>	file:
shared_from_this	std-headers/memory	/^    shared_ptr<T> shared_from_this();$/;"	p	class:std::enable_shared_from_this	typeref:typename:shared_ptr<T>	file:
shared_future	std-headers/future	/^    shared_future();$/;"	p	class:std::shared_future	file:
shared_future	std-headers/future	/^    shared_future(const shared_future& other);$/;"	p	class:std::shared_future	file:
shared_future	std-headers/future	/^    shared_future(shared_future&& other);$/;"	p	class:std::shared_future	file:
shared_future	std-headers/future	/^    shared_future(std::future<T>&& other);$/;"	p	class:std::shared_future	file:
shared_future	std-headers/future	/^class shared_future { \/\/ SIMPLIFIED: removed T& and void specializations$/;"	c	namespace:std	file:
shared_lock	std-headers/shared_mutex	/^    explicit shared_lock(mutex_type& m);$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^    shared_lock();$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^    shared_lock(mutex_type& m, std::adopt_lock_t t);$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^    shared_lock(mutex_type& m, std::defer_lock_t t);$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^    shared_lock(mutex_type& m, std::try_to_lock_t t);$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^    shared_lock(mutex_type& m,$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^    shared_lock(shared_lock&& other);$/;"	p	class:std::shared_lock	file:
shared_lock	std-headers/shared_mutex	/^class shared_lock {$/;"	c	namespace:std	file:
shared_mutex	std-headers/shared_mutex	/^    shared_mutex();$/;"	p	class:std::shared_mutex	file:
shared_mutex	std-headers/shared_mutex	/^    shared_mutex(const shared_mutex&) = delete;$/;"	p	class:std::shared_mutex	file:
shared_mutex	std-headers/shared_mutex	/^class shared_mutex {$/;"	c	namespace:std	file:
shared_ptr	std-headers/memory	/^    constexpr shared_ptr();$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    constexpr shared_ptr(std::nullptr_t);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    explicit shared_ptr(Y* ptr);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    explicit shared_ptr(const std::weak_ptr<Y>& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(Y* ptr, Deleter d);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(Y* ptr, Deleter d, Alloc alloc);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(const shared_ptr& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(const shared_ptr<Y>& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(const shared_ptr<Y>& r, T* ptr);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(shared_ptr&& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(shared_ptr<Y>&& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(std::auto_ptr<Y>&& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(std::nullptr_t, Deleter d);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(std::nullptr_t, Deleter d, Alloc alloc);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^    shared_ptr(std::unique_ptr<Y, Deleter>&& r);$/;"	p	class:std::shared_ptr	file:
shared_ptr	std-headers/memory	/^template<class T> class shared_ptr {$/;"	c	namespace:std	file:
shared_timed_mutex	std-headers/shared_mutex	/^    shared_timed_mutex();$/;"	p	class:std::shared_timed_mutex	file:
shared_timed_mutex	std-headers/shared_mutex	/^    shared_timed_mutex(const shared_timed_mutex&) = delete;$/;"	p	class:std::shared_timed_mutex	file:
shared_timed_mutex	std-headers/shared_mutex	/^class shared_timed_mutex {$/;"	c	namespace:std	file:
shift	std-headers/valarray	/^    valarray shift(int count) const;$/;"	p	class:std::valarray	typeref:typename:valarray	file:
shift_size	std-headers/random	/^    static constexpr size_t shift_size;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
short_lag	std-headers/random	/^    static constexpr size_t short_lag;$/;"	m	class:std::subtract_with_carry_engine	typeref:typename:size_t	file:
showbase	std-headers/ios	/^    static constexpr fmtflags showbase;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
showbase	std-headers/ios	/^ios_base& showbase(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
showmanyc	std-headers/fstream	/^    virtual streamsize showmanyc();$/;"	p	class:std::basic_filebuf	typeref:typename:streamsize	file:
showmanyc	std-headers/streambuf	/^    virtual streamsize showmanyc();$/;"	p	class:std::basic_streambuf	typeref:typename:streamsize	file:
showpoint	std-headers/ios	/^    static constexpr fmtflags showpoint;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
showpoint	std-headers/ios	/^ios_base& showpoint(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
showpos	std-headers/ios	/^    static constexpr fmtflags showpos;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
showpos	std-headers/ios	/^ios_base& showpos(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
shrink_to_fit	std-headers/deque	/^    void shrink_to_fit();$/;"	p	class:std::deque	typeref:typename:void	file:
shrink_to_fit	std-headers/string	/^    void shrink_to_fit();$/;"	p	class:std::basic_string	typeref:typename:void	file:
shrink_to_fit	std-headers/vector	/^    void shrink_to_fit();$/;"	p	class:std::vector	typeref:typename:void	file:
shuffle	std-headers/algorithm	/^void shuffle(RandomIt first, RandomIt last, URNG&& g);$/;"	p	namespace:std	typeref:typename:void	file:
shuffle_order_engine	std-headers/random	/^    > class shuffle_order_engine {$/;"	c	namespace:std	file:
shuffle_order_engine	std-headers/random	/^    explicit shuffle_order_engine(Engine&& e);$/;"	p	class:std::shuffle_order_engine	file:
shuffle_order_engine	std-headers/random	/^    explicit shuffle_order_engine(Sseq& seq);$/;"	p	class:std::shuffle_order_engine	file:
shuffle_order_engine	std-headers/random	/^    explicit shuffle_order_engine(const Engine& e);$/;"	p	class:std::shuffle_order_engine	file:
shuffle_order_engine	std-headers/random	/^    explicit shuffle_order_engine(result_type s);$/;"	p	class:std::shuffle_order_engine	file:
shuffle_order_engine	std-headers/random	/^    shuffle_order_engine();$/;"	p	class:std::shuffle_order_engine	file:
sig_atomic_t	std-headers/csignal	/^typedef int sig_atomic_t; \/\/ actually unspecified$/;"	t	namespace:std	typeref:typename:int	file:
sign	std-headers/locale	/^        none, space, symbol, sign, value$/;"	e	enum:std::money_base::part	file:
signal	std-headers/csignal	/^void (*signal(int sig, void (*handler)(int)))(int);$/;"	p	namespace:std	typeref:typename:void (*)(int)	file:
signaling_NaN	std-headers/limits	/^    static T signaling_NaN();$/;"	p	class:std::numeric_limits	typeref:typename:T	file:
signbit	std-headers/cmath	/^bool signbit(double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
signbit	std-headers/cmath	/^bool signbit(float arg);$/;"	p	namespace:std	typeref:typename:bool	file:
signbit	std-headers/cmath	/^bool signbit(long double arg);$/;"	p	namespace:std	typeref:typename:bool	file:
sin	std-headers/cmath	/^double      sin(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
sin	std-headers/cmath	/^float       sin(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
sin	std-headers/cmath	/^long double sin(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
sin	std-headers/complex	/^complex<T> sin(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
sin	std-headers/valarray	/^valarray<T> sin(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
sinh	std-headers/cmath	/^double      sinh(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
sinh	std-headers/cmath	/^float       sinh(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
sinh	std-headers/cmath	/^long double sinh(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
sinh	std-headers/complex	/^complex<T> sinh(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
sinh	std-headers/valarray	/^valarray<T> sinh(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
size	std-headers/array	/^    size_type size() const;$/;"	p	class:std::array	typeref:typename:size_type	file:
size	std-headers/bitset	/^    std::size_t size() const;$/;"	p	class:std::bitset	typeref:typename:std::size_t	file:
size	std-headers/deque	/^    size_type size() const;$/;"	p	class:std::deque	typeref:typename:size_type	file:
size	std-headers/initializer_list	/^    size_t size() const;$/;"	p	class:std::initializer_list	typeref:typename:size_t	file:
size	std-headers/list	/^    size_type size() const;$/;"	p	class:std::list	typeref:typename:size_type	file:
size	std-headers/map	/^    size_type size() const;$/;"	p	class:std::map	typeref:typename:size_type	file:
size	std-headers/map	/^    size_type size() const;$/;"	p	class:std::multimap	typeref:typename:size_type	file:
size	std-headers/queue	/^    size_type size() const;$/;"	p	class:std::priority_queue	typeref:typename:size_type	file:
size	std-headers/queue	/^    size_type size() const;$/;"	p	class:std::queue	typeref:typename:size_type	file:
size	std-headers/random	/^    std::size_t size() const;$/;"	p	class:std::seed_seq	typeref:typename:std::size_t	file:
size	std-headers/regex	/^    size_type size() const;$/;"	p	class:std::match_results	typeref:typename:size_type	file:
size	std-headers/set	/^    size_type size() const;$/;"	p	class:std::multiset	typeref:typename:size_type	file:
size	std-headers/set	/^    size_type size() const;$/;"	p	class:std::set	typeref:typename:size_type	file:
size	std-headers/stack	/^    size_type size() const;$/;"	p	class:std::stack	typeref:typename:size_type	file:
size	std-headers/string	/^    size_type size() const;$/;"	p	class:std::basic_string	typeref:typename:size_type	file:
size	std-headers/unordered_map	/^    size_type size() const;$/;"	p	class:std::unordered_map	typeref:typename:size_type	file:
size	std-headers/unordered_map	/^    size_type size() const;$/;"	p	class:std::unordered_multimap	typeref:typename:size_type	file:
size	std-headers/unordered_set	/^    size_type size() const;$/;"	p	class:std::unordered_multiset	typeref:typename:size_type	file:
size	std-headers/unordered_set	/^    size_type size() const;$/;"	p	class:std::unordered_set	typeref:typename:size_type	file:
size	std-headers/valarray	/^    size_t size() const;$/;"	p	class:std::slice	typeref:typename:size_t	file:
size	std-headers/valarray	/^    std::size_t size() const;$/;"	p	class:std::valarray	typeref:typename:std::size_t	file:
size	std-headers/valarray	/^    valarray<size_t> size()   const;$/;"	p	class:std::gslice	typeref:typename:valarray<size_t>	file:
size	std-headers/vector	/^    size_type size() const;$/;"	p	class:std::vector	typeref:typename:size_type	file:
size_t	std-headers/cstddef	/^typedef long long size_t;$/;"	t	namespace:std::std	typeref:typename:long long	file:
size_type	std-headers/array	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::array	typeref:typename:size_t	file:
size_type	std-headers/deque	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::deque	typeref:typename:size_t	file:
size_type	std-headers/forward_list	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::forward_list	typeref:typename:size_t	file:
size_type	std-headers/initializer_list	/^    typedef size_t size_type;$/;"	t	class:std::initializer_list	typeref:typename:size_t	file:
size_type	std-headers/list	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::list	typeref:typename:size_t	file:
size_type	std-headers/map	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::map	typeref:typename:size_t	file:
size_type	std-headers/map	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::multimap	typeref:typename:size_t	file:
size_type	std-headers/memory	/^    typedef size_t size_type;$/;"	t	struct:std::allocator	typeref:typename:size_t	file:
size_type	std-headers/memory	/^    typedef size_t size_type;$/;"	t	struct:std::allocator_traits	typeref:typename:size_t	file:
size_type	std-headers/queue	/^    typedef typename Container::size_type size_type;$/;"	t	class:std::priority_queue	typeref:typename:Container::size_type	file:
size_type	std-headers/queue	/^    typedef typename Container::size_type size_type;$/;"	t	class:std::queue	typeref:typename:Container::size_type	file:
size_type	std-headers/regex	/^    typedef typename std::allocator_traits<Alloc>::size_type size_type;$/;"	t	class:std::match_results	typeref:typename:std::allocator_traits<Alloc>::size_type	file:
size_type	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::size_type size_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::size_type	file:
size_type	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::size_type size_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::size_type	file:
size_type	std-headers/set	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::multiset	typeref:typename:size_t	file:
size_type	std-headers/set	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::set	typeref:typename:size_t	file:
size_type	std-headers/stack	/^    typedef typename Container::size_type size_type;$/;"	t	class:std::stack	typeref:typename:Container::size_type	file:
size_type	std-headers/string	/^    typedef size_t size_type;$/;"	t	class:std::basic_string	typeref:typename:size_t	file:
size_type	std-headers/string	/^    typedef typename Allocator::size_type size_type;$/;"	t	class:std::basic_string	typeref:typename:Allocator::size_type	file:
size_type	std-headers/string	/^    typedef typename std::allocator_traits<Allocator>::size_type size_type;$/;"	t	class:std::basic_string	typeref:typename:std::allocator_traits<Allocator>::size_type	file:
size_type	std-headers/unordered_map	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::unordered_map	typeref:typename:size_t	file:
size_type	std-headers/unordered_map	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::unordered_multimap	typeref:typename:size_t	file:
size_type	std-headers/unordered_set	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::unordered_multiset	typeref:typename:size_t	file:
size_type	std-headers/unordered_set	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::unordered_set	typeref:typename:size_t	file:
size_type	std-headers/vector	/^    typedef size_t size_type; \/\/ actual type unspecified$/;"	t	class:std::vector	typeref:typename:size_t	file:
skipws	std-headers/ios	/^    static constexpr fmtflags skipws;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
skipws	std-headers/ios	/^ios_base& skipws(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
sleep_for	std-headers/thread	/^void sleep_for(const std::chrono::duration<Rep, Period>& sleep_duration);$/;"	p	namespace:std::this_thread	typeref:typename:void	file:
sleep_until	std-headers/thread	/^void sleep_until(const std::chrono::time_point<Clock, Duration>& sleep_time);$/;"	p	namespace:std::this_thread	typeref:typename:void	file:
slice	std-headers/valarray	/^    slice();$/;"	p	class:std::slice	file:
slice	std-headers/valarray	/^    slice(const slice& other);$/;"	p	class:std::slice	file:
slice	std-headers/valarray	/^    slice(std::size_t start, std::size_t size, std::size_t stride);$/;"	p	class:std::slice	file:
slice	std-headers/valarray	/^class slice {$/;"	c	namespace:std	file:
slice_array	std-headers/valarray	/^    slice_array() = delete;$/;"	p	class:std::slice_array	file:
slice_array	std-headers/valarray	/^    slice_array(const slice_array& other);$/;"	p	class:std::slice_array	file:
slice_array	std-headers/valarray	/^class slice_array {$/;"	c	namespace:std	file:
smatch	std-headers/regex	/^typedef match_results<std::string::const_iterator> smatch;$/;"	t	namespace:std	typeref:typename:match_results<std::string::const_iterator>	file:
snextc	std-headers/streambuf	/^    int_type snextc();$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
snprintf	std-headers/cstdio	/^int snprintf(char* buffer, std::size_t buf_size, const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
sort	std-headers/algorithm	/^void sort(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
sort	std-headers/algorithm	/^void sort(RandomIt first, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
sort	std-headers/forward_list	/^    void sort();$/;"	p	class:std::forward_list	typeref:typename:void	file:
sort	std-headers/forward_list	/^    void sort(Compare comp);$/;"	p	class:std::forward_list	typeref:typename:void	file:
sort	std-headers/list	/^    void sort();$/;"	p	class:std::list	typeref:typename:void	file:
sort	std-headers/list	/^    void sort(Compare comp);$/;"	p	class:std::list	typeref:typename:void	file:
sort_heap	std-headers/algorithm	/^void sort_heap(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
sort_heap	std-headers/algorithm	/^void sort_heap(RandomIt first, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
space	std-headers/locale	/^        none, space, symbol, sign, value$/;"	e	enum:std::money_base::part	file:
space	std-headers/locale	/^    static const mask space;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
specifier	std-headers/README.md	/^widespread use of C++ 'auto' type specifier, because code completion of members$/;"	t	file:
splice	std-headers/list	/^    void splice(const_iterator pos, list& other);$/;"	p	class:std::list	typeref:typename:void	file:
splice	std-headers/list	/^    void splice(const_iterator pos, list& other, const_iterator it);$/;"	p	class:std::list	typeref:typename:void	file:
splice	std-headers/list	/^    void splice(const_iterator pos, list& other,$/;"	p	class:std::list	typeref:typename:void	file:
splice	std-headers/list	/^    void splice(const_iterator pos, list&& other);$/;"	p	class:std::list	typeref:typename:void	file:
splice	std-headers/list	/^    void splice(const_iterator pos, list&& other, const_iterator it);$/;"	p	class:std::list	typeref:typename:void	file:
splice	std-headers/list	/^    void splice(const_iterator pos, list&& other,$/;"	p	class:std::list	typeref:typename:void	file:
splice_after	std-headers/forward_list	/^    void splice_after(const_iterator pos, forward_list& other);$/;"	p	class:std::forward_list	typeref:typename:void	file:
splice_after	std-headers/forward_list	/^    void splice_after(const_iterator pos, forward_list& other, const_iterator it);$/;"	p	class:std::forward_list	typeref:typename:void	file:
splice_after	std-headers/forward_list	/^    void splice_after(const_iterator pos, forward_list& other,$/;"	p	class:std::forward_list	typeref:typename:void	file:
splice_after	std-headers/forward_list	/^    void splice_after(const_iterator pos, forward_list&& other);$/;"	p	class:std::forward_list	typeref:typename:void	file:
splice_after	std-headers/forward_list	/^    void splice_after(const_iterator pos, forward_list&& other, const_iterator it);$/;"	p	class:std::forward_list	typeref:typename:void	file:
splice_after	std-headers/forward_list	/^    void splice_after(const_iterator pos, forward_list&& other,$/;"	p	class:std::forward_list	typeref:typename:void	file:
sprintf	std-headers/cstdio	/^int sprintf(char* buffer, const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
sputbackc	std-headers/streambuf	/^    int_type sputbackc(char_type c);$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
sputc	std-headers/streambuf	/^    int_type sputc(char_type c);$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
sputn	std-headers/streambuf	/^    streamsize sputn(const char_type* s, streamsize n);$/;"	p	class:std::basic_streambuf	typeref:typename:streamsize	file:
sqrt	std-headers/cmath	/^double      sqrt(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
sqrt	std-headers/cmath	/^float       sqrt(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
sqrt	std-headers/cmath	/^long double sqrt(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
sqrt	std-headers/complex	/^complex<T> sqrt(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
sqrt	std-headers/valarray	/^valarray<T> sqrt(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
srand	std-headers/cstdlib	/^void srand(unsigned seed);$/;"	p	namespace:std	typeref:typename:void	file:
sregex_iterator	std-headers/regex	/^typedef regex_iterator<std::string::const_iterator> sregex_iterator;$/;"	t	namespace:std	typeref:typename:regex_iterator<std::string::const_iterator>	file:
sregex_token_iterator	std-headers/regex	/^typedef regex_token_iterator<std::string::const_iterator> sregex_token_iterator;$/;"	t	namespace:std	typeref:typename:regex_token_iterator<std::string::const_iterator>	file:
sscanf	std-headers/cstdio	/^int sscanf(const char* buffer, const char* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
ssub_match	std-headers/regex	/^typedef sub_match<std::string::const_iterator> ssub_match;$/;"	t	namespace:std	typeref:typename:sub_match<std::string::const_iterator>	file:
stable_partition	std-headers/algorithm	/^BidirIt stable_partition(BidirIt first, BidirIt last, UnaryPredicate p);$/;"	p	namespace:std	typeref:typename:BidirIt	file:
stable_sort	std-headers/algorithm	/^void stable_sort(RandomIt first, RandomIt last);$/;"	p	namespace:std	typeref:typename:void	file:
stable_sort	std-headers/algorithm	/^void stable_sort(RandomIt first, RandomIt last, Compare comp);$/;"	p	namespace:std	typeref:typename:void	file:
stack	std-headers/stack	/^    > class stack {$/;"	c	namespace:std	file:
stack	std-headers/stack	/^    explicit stack(Container&& cont = Container());$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    explicit stack(const Alloc& alloc);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    explicit stack(const Container& cont = Container());$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    explicit stack(const Container& cont);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    stack(Container&& cont, const Alloc& alloc);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    stack(const Container& cont, const Alloc& alloc);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    stack(const stack& other);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    stack(const stack& other, const Alloc& alloc);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    stack(stack&& other);$/;"	p	class:std::stack	file:
stack	std-headers/stack	/^    stack(stack&& other, const Alloc& alloc);$/;"	p	class:std::stack	file:
start	std-headers/valarray	/^    size_t           start()  const;$/;"	p	class:std::gslice	typeref:typename:size_t	file:
start	std-headers/valarray	/^    size_t start() const;$/;"	p	class:std::slice	typeref:typename:size_t	file:
state	std-headers/locale	/^    state_type state() const;$/;"	p	class:std::wbuffer_convert	typeref:typename:state_type	file:
state	std-headers/locale	/^    state_type state() const;$/;"	p	class:std::wstring_convert	typeref:typename:state_type	file:
state	std-headers/string	/^    State state() const;$/;"	p	class:std::fpos	typeref:typename:State	file:
state	std-headers/string	/^    void state(State st);$/;"	p	class:std::fpos	typeref:typename:void	file:
state_not_recoverable	std-headers/system_error	/^    state_not_recoverable,              \/\/  ENOTRECOVERABLE$/;"	e	enum:std::errc	file:
state_size	std-headers/random	/^    static constexpr size_t state_size;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
state_type	std-headers/locale	/^    typedef State state_type;$/;"	t	class:std::codecvt	typeref:typename:State	file:
state_type	std-headers/locale	/^    typedef typename Codecvt::state_type state_type;$/;"	t	class:std::wbuffer_convert	typeref:typename:Codecvt::state_type	file:
state_type	std-headers/string	/^    typedef mbstate_t state_type; \/\/ actually impl-defined$/;"	t	class:std::char_traits	typeref:typename:mbstate_t	file:
static_pointer_cast	std-headers/memory	/^std::shared_ptr<T> static_pointer_cast(const std::shared_ptr<U>& r);$/;"	p	namespace:std	typeref:typename:std::shared_ptr<T>	file:
std	std-headers/algorithm	/^namespace std {$/;"	n	file:
std	std-headers/array	/^namespace std {$/;"	n	file:
std	std-headers/atomic	/^namespace std {$/;"	n	file:
std	std-headers/bitset	/^namespace std {$/;"	n	file:
std	std-headers/cctype	/^namespace std {$/;"	n	file:
std	std-headers/cfenv	/^namespace std {$/;"	n	file:
std	std-headers/chrono	/^namespace std {$/;"	n	file:
std	std-headers/cinttypes	/^namespace std {$/;"	n	file:
std	std-headers/clocale	/^namespace std {$/;"	n	file:
std	std-headers/cmath	/^namespace std {$/;"	n	file:
std	std-headers/codecvt	/^namespace std {$/;"	n	file:
std	std-headers/complex	/^namespace std {$/;"	n	file:
std	std-headers/condition_variable	/^namespace std {$/;"	n	file:
std	std-headers/csetjmp	/^namespace std {$/;"	n	file:
std	std-headers/csignal	/^namespace std {$/;"	n	file:
std	std-headers/cstdarg	/^namespace std {$/;"	n	file:
std	std-headers/cstddef	/^namespace std {$/;"	n	file:
std	std-headers/cstddef	/^namespace std {$/;"	n	namespace:std	file:
std	std-headers/cstdint	/^namespace std {$/;"	n	file:
std	std-headers/cstdio	/^namespace std {$/;"	n	file:
std	std-headers/cstdlib	/^namespace std {$/;"	n	file:
std	std-headers/cstring	/^namespace std {$/;"	n	file:
std	std-headers/ctime	/^namespace std {$/;"	n	file:
std	std-headers/cuchar	/^namespace std {$/;"	n	file:
std	std-headers/cwchar	/^namespace std {$/;"	n	file:
std	std-headers/cwctype	/^namespace std {$/;"	n	file:
std	std-headers/deque	/^namespace std {$/;"	n	file:
std	std-headers/exception	/^namespace std {$/;"	n	file:
std	std-headers/forward_list	/^namespace std {$/;"	n	file:
std	std-headers/fstream	/^namespace std {$/;"	n	file:
std	std-headers/functional	/^namespace std {$/;"	n	file:
std	std-headers/future	/^namespace std {$/;"	n	file:
std	std-headers/initializer_list	/^namespace std {$/;"	n	file:
std	std-headers/iomanip	/^namespace std {$/;"	n	file:
std	std-headers/ios	/^namespace std {$/;"	n	file:
std	std-headers/iosfwd	/^namespace std {$/;"	n	file:
std	std-headers/iostream	/^namespace std {$/;"	n	file:
std	std-headers/istream	/^namespace std {$/;"	n	file:
std	std-headers/iterator	/^namespace std {$/;"	n	file:
std	std-headers/limits	/^namespace std {$/;"	n	file:
std	std-headers/list	/^namespace std {$/;"	n	file:
std	std-headers/locale	/^namespace std {$/;"	n	file:
std	std-headers/map	/^namespace std {$/;"	n	file:
std	std-headers/memory	/^namespace std {$/;"	n	file:
std	std-headers/mutex	/^namespace std {$/;"	n	file:
std	std-headers/new	/^namespace std {$/;"	n	file:
std	std-headers/numeric	/^namespace std {$/;"	n	file:
std	std-headers/ostream	/^namespace std {$/;"	n	file:
std	std-headers/queue	/^namespace std {$/;"	n	file:
std	std-headers/random	/^namespace std {$/;"	n	file:
std	std-headers/ratio	/^namespace std {$/;"	n	file:
std	std-headers/regex	/^namespace std {$/;"	n	file:
std	std-headers/scoped_allocator	/^namespace std {$/;"	n	file:
std	std-headers/set	/^namespace std {$/;"	n	file:
std	std-headers/shared_mutex	/^namespace std {$/;"	n	file:
std	std-headers/sstream	/^namespace std {$/;"	n	file:
std	std-headers/stack	/^namespace std {$/;"	n	file:
std	std-headers/stdexcept	/^namespace std {$/;"	n	file:
std	std-headers/streambuf	/^namespace std {$/;"	n	file:
std	std-headers/string	/^namespace std {$/;"	n	file:
std	std-headers/system_error	/^namespace std {$/;"	n	file:
std	std-headers/thread	/^namespace std {$/;"	n	file:
std	std-headers/tuple	/^namespace std {$/;"	n	file:
std	std-headers/type_traits	/^namespace std {$/;"	n	file:
std	std-headers/typeindex	/^namespace std {$/;"	n	file:
std	std-headers/typeinfo	/^namespace std {$/;"	n	file:
std	std-headers/unordered_map	/^namespace std {$/;"	n	file:
std	std-headers/unordered_set	/^namespace std {$/;"	n	file:
std	std-headers/utility	/^namespace std {$/;"	n	file:
std	std-headers/valarray	/^namespace std {$/;"	n	file:
std	std-headers/vector	/^namespace std {$/;"	n	file:
stddev	std-headers/random	/^    result_type stddev() const;$/;"	p	class:std::normal_distribution	typeref:typename:result_type	file:
stderr	std-headers/cstdio	/^#define stderr /;"	d	file:
stdin	std-headers/cstdio	/^#define stdin /;"	d	file:
stdout	std-headers/cstdio	/^#define stdout /;"	d	file:
steady_clock	std-headers/chrono	/^class steady_clock {$/;"	c	namespace:std::chrono	file:
stod	std-headers/string	/^double      stod(const std::string& str, std::size_t* pos = 0);$/;"	p	namespace:std	typeref:typename:double	file:
stod	std-headers/string	/^double      stod(const std::wstring& str, std::size_t* pos = 0);$/;"	p	namespace:std	typeref:typename:double	file:
stof	std-headers/string	/^float       stof(const std::string& str, std::size_t* pos = 0);$/;"	p	namespace:std	typeref:typename:float	file:
stof	std-headers/string	/^float       stof(const std::wstring& str, std::size_t* pos = 0);$/;"	p	namespace:std	typeref:typename:float	file:
stoi	std-headers/string	/^int       stoi(const std::string& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:int	file:
stoi	std-headers/string	/^int       stoi(const std::wstring& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:int	file:
stol	std-headers/string	/^long      stol(const std::string& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:long	file:
stol	std-headers/string	/^long      stol(const std::wstring& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:long	file:
stold	std-headers/string	/^long double stold(const std::string& str, std::size_t* pos = 0);$/;"	p	namespace:std	typeref:typename:long double	file:
stold	std-headers/string	/^long double stold(const std::wstring& str, std::size_t* pos = 0);$/;"	p	namespace:std	typeref:typename:long double	file:
stoll	std-headers/string	/^long long stoll(const std::string& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:long long	file:
stoll	std-headers/string	/^long long stoll(const std::wstring& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:long long	file:
store	std-headers/atomic	/^    void store(T desired, std::memory_order order = std::memory_order_seq_cst) volatile;$/;"	p	struct:std::atomic	typeref:typename:void	file:
store	std-headers/atomic	/^    void store(T desired, std::memory_order order = std::memory_order_seq_cst);$/;"	p	struct:std::atomic	typeref:typename:void	file:
stoul	std-headers/string	/^unsigned long      stoul(const std::string& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:unsigned long	file:
stoul	std-headers/string	/^unsigned long      stoul(const std::wstring& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:unsigned long	file:
stoull	std-headers/string	/^unsigned long long stoull(const std::string& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:unsigned long long	file:
stoull	std-headers/string	/^unsigned long long stoull(const std::wstring& str, std::size_t* pos = 0, int base = 10);$/;"	p	namespace:std	typeref:typename:unsigned long long	file:
str	std-headers/regex	/^    string_type str() const;$/;"	p	class:std::sub_match	typeref:typename:string_type	file:
str	std-headers/regex	/^    string_type str(size_type n = 0) const;$/;"	p	class:std::match_results	typeref:typename:string_type	file:
str	std-headers/sstream	/^    std::basic_string<CharT, Traits, Allocator> str() const;$/;"	p	class:std::basic_istringstream	typeref:typename:std::basic_string<CharT,Traits,Allocator>	file:
str	std-headers/sstream	/^    std::basic_string<CharT, Traits, Allocator> str() const;$/;"	p	class:std::basic_ostringstream	typeref:typename:std::basic_string<CharT,Traits,Allocator>	file:
str	std-headers/sstream	/^    std::basic_string<CharT, Traits, Allocator> str() const;$/;"	p	class:std::basic_stringbuf	typeref:typename:std::basic_string<CharT,Traits,Allocator>	file:
str	std-headers/sstream	/^    std::basic_string<CharT, Traits, Allocator> str() const;$/;"	p	class:std::basic_stringstream	typeref:typename:std::basic_string<CharT,Traits,Allocator>	file:
str	std-headers/sstream	/^    void str(const std::basic_string<CharT, Traits, Allocator>& new_str);$/;"	p	class:std::basic_istringstream	typeref:typename:void	file:
str	std-headers/sstream	/^    void str(const std::basic_string<CharT, Traits, Allocator>& new_str);$/;"	p	class:std::basic_ostringstream	typeref:typename:void	file:
str	std-headers/sstream	/^    void str(const std::basic_string<CharT, Traits, Allocator>& new_str);$/;"	p	class:std::basic_stringstream	typeref:typename:void	file:
str	std-headers/sstream	/^    void str(const std::basic_string<CharT, Traits, Allocator>& s);$/;"	p	class:std::basic_stringbuf	typeref:typename:void	file:
strcat	std-headers/cstring	/^char* strcat(char* dest, const char* src);$/;"	p	namespace:std	typeref:typename:char *	file:
strchr	std-headers/cstring	/^char* strchr(char* str, int ch);$/;"	p	namespace:std	typeref:typename:char *	file:
strchr	std-headers/cstring	/^const char* strchr(const char* str, int ch);$/;"	p	namespace:std	typeref:typename:const char *	file:
strcmp	std-headers/cstring	/^int strcmp(const char* lhs, const char* rhs);$/;"	p	namespace:std	typeref:typename:int	file:
strcoll	std-headers/cstring	/^int strcoll(const char* lhs, const char* rhs);$/;"	p	namespace:std	typeref:typename:int	file:
strcpy	std-headers/cstring	/^char* strcpy(char* dest, const char* src);$/;"	p	namespace:std	typeref:typename:char *	file:
strcspn	std-headers/cstring	/^size_t strcspn(const char* dest, const char* src);$/;"	p	namespace:std	typeref:typename:size_t	file:
stream	std-headers/ios	/^    stream$/;"	e	enum:std::io_errc	file:
stream_timeout	std-headers/system_error	/^    stream_timeout,                     \/\/  ETIME$/;"	e	enum:std::errc	file:
streambuf	std-headers/iosfwd	/^typedef basic_streambuf<char> streambuf;$/;"	t	namespace:std	typeref:typename:basic_streambuf<char>	file:
streambuf_type	std-headers/iterator	/^    typedef std::basic_streambuf<CharT, Traits> streambuf_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:std::basic_streambuf<CharT,Traits>	file:
streambuf_type	std-headers/iterator	/^    typedef std::basic_streambuf<CharT, Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:std::basic_streambuf<CharT,Traits>	file:
streamoff	std-headers/ios	/^typedef int streamoff;$/;"	t	namespace:std	typeref:typename:int	file:
streampos	std-headers/iosfwd	/^typedef fpos<char_traits<char>::state_type> streampos;$/;"	t	namespace:std	typeref:typename:fpos<char_traits<char>::state_type>	file:
streampos	std-headers/string	/^typedef fpos<char_traits<char>::state_type> streampos;$/;"	t	namespace:std	typeref:typename:fpos<char_traits<char>::state_type>	file:
streamsize	std-headers/ios	/^typedef int streamsize;$/;"	t	namespace:std	typeref:typename:int	file:
strerror	std-headers/cstring	/^char* strerror(int errnum);$/;"	p	namespace:std	typeref:typename:char *	file:
strftime	std-headers/ctime	/^std::size_t strftime(char* str, std::size_t count, const char* format, const std::tm* time);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
strict	std-headers/memory	/^    strict$/;"	e	enum:std::pointer_safety	file:
stride	std-headers/valarray	/^    size_t stride() const;$/;"	p	class:std::slice	typeref:typename:size_t	file:
stride	std-headers/valarray	/^    valarray<size_t> stride() const;$/;"	p	class:std::gslice	typeref:typename:valarray<size_t>	file:
string	std-headers/string	/^typedef std::basic_string<char> string;$/;"	t	namespace:std	typeref:typename:std::basic_string<char>	file:
string_type	std-headers/locale	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::collate	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/locale	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::messages	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/locale	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::money_get	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/locale	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::money_put	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/locale	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::moneypunct	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/locale	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::numpunct	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/regex	/^    typedef std::basic_string<CharT> string_type;$/;"	t	class:std::regex_traits	typeref:typename:std::basic_string<CharT>	file:
string_type	std-headers/regex	/^    typedef std::basic_string<char_type> string_type;$/;"	t	class:std::match_results	typeref:typename:std::basic_string<char_type>	file:
string_type	std-headers/regex	/^    typedef typename Traits::string_type string_type;$/;"	t	class:std::basic_regex	typeref:typename:Traits::string_type	file:
stringbuf	std-headers/iosfwd	/^typedef basic_stringbuf<char> stringbuf;$/;"	t	namespace:std	typeref:typename:basic_stringbuf<char>	file:
stringbuf	std-headers/sstream	/^typedef basic_stringbuf<char> stringbuf;$/;"	t	namespace:std	typeref:typename:basic_stringbuf<char>	file:
stringstream	std-headers/iosfwd	/^typedef basic_stringstream<char> stringstream;$/;"	t	namespace:std	typeref:typename:basic_stringstream<char>	file:
stringstream	std-headers/sstream	/^typedef basic_stringstream<char> stringstream;$/;"	t	namespace:std	typeref:typename:basic_stringstream<char>	file:
strlen	std-headers/cstring	/^std::size_t strlen(const char* str);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
strncat	std-headers/cstring	/^char* strncat(char* dest, const char* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:char *	file:
strncmp	std-headers/cstring	/^int strncmp(const char* lhs, const char* rhs, size_t count);$/;"	p	namespace:std	typeref:typename:int	file:
strncpy	std-headers/cstring	/^char* strncpy(char* dest, const char* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:char *	file:
strpbrk	std-headers/cstring	/^char* strpbrk(char* dest, const char* breakset);$/;"	p	namespace:std	typeref:typename:char *	file:
strpbrk	std-headers/cstring	/^const char* strpbrk(const char* dest, const char* breakset);$/;"	p	namespace:std	typeref:typename:const char *	file:
strrchr	std-headers/cstring	/^char* strrchr(char* str, int ch);$/;"	p	namespace:std	typeref:typename:char *	file:
strrchr	std-headers/cstring	/^const char* strrchr(const char* str, int ch);$/;"	p	namespace:std	typeref:typename:const char *	file:
strspn	std-headers/cstring	/^size_t strspn(const char* dest, const char* src);$/;"	p	namespace:std	typeref:typename:size_t	file:
strstr	std-headers/cstring	/^char* strstr(char* str, const char* target);$/;"	p	namespace:std	typeref:typename:char *	file:
strstr	std-headers/cstring	/^const char* strstr(const char* str, const char* target);$/;"	p	namespace:std	typeref:typename:const char *	file:
strtod	std-headers/cstdlib	/^double strtod(const char* nptr, char** endptr);$/;"	p	namespace:std	typeref:typename:double	file:
strtof	std-headers/cstdlib	/^float strtof(const char* nptr, char** endptr);$/;"	p	namespace:std	typeref:typename:float	file:
strtoimax	std-headers/cinttypes	/^std::intmax_t strtoimax(const char* nptr, char** endptr, int base);$/;"	p	namespace:std	typeref:typename:std::intmax_t	file:
strtok	std-headers/cstring	/^char* strtok(char* str, const char* delim);$/;"	p	namespace:std	typeref:typename:char *	file:
strtol	std-headers/cstdlib	/^long strtol(const char* nptr, char** endptr, int base);$/;"	p	namespace:std	typeref:typename:long	file:
strtold	std-headers/cstdlib	/^long double strtold(const char* nptr, char** endptr);$/;"	p	namespace:std	typeref:typename:long double	file:
strtoll	std-headers/cstdlib	/^long long strtoll(const char* nptr, char** endptr, int base);$/;"	p	namespace:std	typeref:typename:long long	file:
strtoul	std-headers/cstdlib	/^unsigned long strtoul(const char* nptr, char** endptr, int base);$/;"	p	namespace:std	typeref:typename:unsigned long	file:
strtoull	std-headers/cstdlib	/^unsigned long long strtoull(const char* nptr, char** endptr, int base);$/;"	p	namespace:std	typeref:typename:unsigned long long	file:
strtoumax	std-headers/cinttypes	/^std::uintmax_t strtoumax(const char* nptr, char** endptr, int base);$/;"	p	namespace:std	typeref:typename:std::uintmax_t	file:
strxfrm	std-headers/cstring	/^std::size_t strxfrm(char* dest, const char* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
strxfrm	std-headers/cwchar	/^std::size_t strxfrm(wchar_t* dest, const wchar_t* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
student_t_distribution	std-headers/random	/^    explicit student_t_distribution(RealType n = 1.0);$/;"	p	class:std::student_t_distribution	file:
student_t_distribution	std-headers/random	/^    explicit student_t_distribution(const param_type& params);$/;"	p	class:std::student_t_distribution	file:
student_t_distribution	std-headers/random	/^class student_t_distribution {$/;"	c	namespace:std	file:
sub_match	std-headers/regex	/^    constexpr sub_match();$/;"	p	class:std::sub_match	file:
sub_match	std-headers/regex	/^class sub_match : public pair<BidirIt, BidirIt> {$/;"	c	namespace:std	file:
substr	std-headers/string	/^    basic_string substr(size_type pos = 0,$/;"	p	class:std::basic_string	typeref:typename:basic_string	file:
subtract_with_carry_engine	std-headers/random	/^    > class subtract_with_carry_engine {$/;"	c	namespace:std	file:
subtract_with_carry_engine	std-headers/random	/^    explicit subtract_with_carry_engine(Sseq& s);$/;"	p	class:std::subtract_with_carry_engine	file:
subtract_with_carry_engine	std-headers/random	/^    explicit subtract_with_carry_engine(result_type value = default_seed);$/;"	p	class:std::subtract_with_carry_engine	file:
subtract_with_carry_engine	std-headers/random	/^    subtract_with_carry_engine(const subtract_with_carry_engine& other);$/;"	p	class:std::subtract_with_carry_engine	file:
suffix	std-headers/regex	/^    const_reference suffix() const;$/;"	p	class:std::match_results	typeref:typename:const_reference	file:
sum	std-headers/valarray	/^    T sum() const;$/;"	p	class:std::valarray	typeref:typename:T	file:
sungetc	std-headers/streambuf	/^    int_type sungetc();$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
swap	std-headers/algorithm	/^void swap(T& a, T& b);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/array	/^    void swap(array& other);$/;"	p	class:std::array	typeref:typename:void	file:
swap	std-headers/array	/^void swap(array<T, N>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/deque	/^    void swap(deque& other);$/;"	p	class:std::deque	typeref:typename:void	file:
swap	std-headers/forward_list	/^    void swap(forward_list& other);$/;"	p	class:std::forward_list	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(basic_fstream& other);$/;"	p	class:std::basic_fstream	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(basic_fstream<T>& lhs, basic_fstream<T>& rhs);$/;"	p	class:std::basic_fstream	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(basic_ifstream& other);$/;"	p	class:std::basic_ifstream	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(basic_ifstream<T>& lhs, basic_ifstream<T>& rhs);$/;"	p	class:std::basic_ifstream	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(basic_ofstream& other);$/;"	p	class:std::basic_ofstream	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(basic_ofstream<T>& lhs, basic_ofstream<T>& rhs);$/;"	p	class:std::basic_ofstream	typeref:typename:void	file:
swap	std-headers/fstream	/^    void swap(std::basic_filebuf& rhs);$/;"	p	class:std::basic_filebuf	typeref:typename:void	file:
swap	std-headers/functional	/^    void swap(function& other);$/;"	p	class:std::function	typeref:typename:void	file:
swap	std-headers/functional	/^void swap(function<R(Args...)>& lhs, function<R(Args...)>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/future	/^    void swap(packaged_task& other);$/;"	p	class:std::packaged_task	typeref:typename:void	file:
swap	std-headers/future	/^    void swap(promise& other);$/;"	p	class:std::promise	typeref:typename:void	file:
swap	std-headers/future	/^void swap(packaged_task<Function(Args...)>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/future	/^void swap(promise<R>& lhs, promise<R>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/ios	/^    void swap(basic_ios& other);$/;"	p	class:std::basic_ios	typeref:typename:void	file:
swap	std-headers/istream	/^    void swap(basic_iostream& rhs);$/;"	p	class:std::basic_iostream	typeref:typename:void	file:
swap	std-headers/istream	/^    void swap(basic_istream& rhs);$/;"	p	class:std::basic_istream	typeref:typename:void	file:
swap	std-headers/list	/^    void swap(list& other);$/;"	p	class:std::list	typeref:typename:void	file:
swap	std-headers/map	/^    void swap(map& other);$/;"	p	class:std::map	typeref:typename:void	file:
swap	std-headers/map	/^    void swap(multimap& other);$/;"	p	class:std::multimap	typeref:typename:void	file:
swap	std-headers/map	/^void swap(map<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/map	/^void swap(multimap<Key, T, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/memory	/^    void swap(shared_ptr& r);$/;"	p	class:std::shared_ptr	typeref:typename:void	file:
swap	std-headers/memory	/^    void swap(unique_ptr& other);$/;"	p	class:std::unique_ptr	typeref:typename:void	file:
swap	std-headers/memory	/^    void swap(weak_ptr& r);$/;"	p	class:std::weak_ptr	typeref:typename:void	file:
swap	std-headers/memory	/^void swap(shared_ptr<T>& lhs, shared_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/memory	/^void swap(unique_ptr<T, Deleter>& lhs, unique_ptr<T, Deleter>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/memory	/^void swap(weak_ptr<T>& lhs, weak_ptr<T>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/mutex	/^    void swap(unique_lock<Mutex>& other);$/;"	p	class:std::unique_lock	typeref:typename:void	file:
swap	std-headers/mutex	/^void swap(unique_lock<Mutex>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/ostream	/^    void swap(basic_ostream& rhs);$/;"	p	class:std::basic_ostream	typeref:typename:void	file:
swap	std-headers/queue	/^    void swap(priority_queue& other);$/;"	p	class:std::priority_queue	typeref:typename:void	file:
swap	std-headers/queue	/^    void swap(queue& other);$/;"	p	class:std::queue	typeref:typename:void	file:
swap	std-headers/queue	/^void swap(priority_queue<T, Container, Compare>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/queue	/^void swap(queue<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/regex	/^    void swap(basic_regex& other);$/;"	p	class:std::basic_regex	typeref:typename:void	file:
swap	std-headers/regex	/^    void swap(match_results& other);$/;"	p	class:std::match_results	typeref:typename:void	file:
swap	std-headers/regex	/^void swap(match_results<BidirIt, Alloc>& x1,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/set	/^    void swap(multiset& other);$/;"	p	class:std::multiset	typeref:typename:void	file:
swap	std-headers/set	/^    void swap(set& other);$/;"	p	class:std::set	typeref:typename:void	file:
swap	std-headers/set	/^void swap(multiset<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/set	/^void swap(set<Key, Compare, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/shared_mutex	/^    void swap(shared_lock<Mutex>& other);$/;"	p	class:std::shared_lock	typeref:typename:void	file:
swap	std-headers/shared_mutex	/^void swap(shared_lock<Mutex>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/sstream	/^    void swap(basic_istringstream& other);$/;"	p	class:std::basic_istringstream	typeref:typename:void	file:
swap	std-headers/sstream	/^    void swap(basic_ostringstream& other);$/;"	p	class:std::basic_ostringstream	typeref:typename:void	file:
swap	std-headers/sstream	/^    void swap(basic_stringstream& other);$/;"	p	class:std::basic_stringstream	typeref:typename:void	file:
swap	std-headers/sstream	/^    void swap(std::basic_stringbuf& rhs);$/;"	p	class:std::basic_stringbuf	typeref:typename:void	file:
swap	std-headers/sstream	/^void swap(std::basic_istringstream<CharT, Traits, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/sstream	/^void swap(std::basic_ostringstream<CharT, Traits, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/sstream	/^void swap(std::basic_stringbuf<CharT, Traits, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/sstream	/^void swap(std::basic_stringstream<CharT, Traits, Allocator>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/stack	/^    void swap(stack& other);$/;"	p	class:std::stack	typeref:typename:void	file:
swap	std-headers/stack	/^void swap(stack<T, Container>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/streambuf	/^    void swap(basic_streambuf& rhs);$/;"	p	class:std::basic_streambuf	typeref:typename:void	file:
swap	std-headers/string	/^    void swap(basic_string& other);$/;"	p	class:std::basic_string	typeref:typename:void	file:
swap	std-headers/string	/^void swap(basic_string<T, Traits, Alloc>& lhs, basic_string<T, Traits, Alloc>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/thread	/^    void swap(thread& t);$/;"	p	class:std::thread	typeref:typename:void	file:
swap	std-headers/thread	/^void swap(thread& lhs, thread& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/tuple	/^    void swap(tuple& other);$/;"	p	class:std::tuple	typeref:typename:void	file:
swap	std-headers/tuple	/^void swap(tuple<Types...>& lhs, tuple<Types...>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/unordered_map	/^    void swap(unordered_map& other);$/;"	p	class:std::unordered_map	typeref:typename:void	file:
swap	std-headers/unordered_map	/^    void swap(unordered_multimap& other);$/;"	p	class:std::unordered_multimap	typeref:typename:void	file:
swap	std-headers/unordered_map	/^void swap(unordered_map<Key, T, Hash, KeyEqual, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/unordered_map	/^void swap(unordered_multimap<Key, T, Hash, KeyEqual, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/unordered_set	/^    void swap(unordered_multiset& other);$/;"	p	class:std::unordered_multiset	typeref:typename:void	file:
swap	std-headers/unordered_set	/^    void swap(unordered_set& other);$/;"	p	class:std::unordered_set	typeref:typename:void	file:
swap	std-headers/unordered_set	/^void swap(unordered_multiset<Key, Hash, KeyEqual, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/unordered_set	/^void swap(unordered_set<Key, Hash, KeyEqual, Alloc>& lhs,$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/utility	/^    void swap(pair& other);$/;"	p	struct:std::pair	typeref:typename:void	file:
swap	std-headers/utility	/^void swap(T& a, T& b);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/utility	/^void swap(T2(&a)[N], T2(&b)[N]);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/utility	/^void swap(pair<T1, T2>& lhs, pair<T1, T2>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/valarray	/^    void swap(valarray& other);$/;"	p	class:std::valarray	typeref:typename:void	file:
swap	std-headers/valarray	/^void swap(valarray<T>& lhs, valarray<T>& rhs);$/;"	p	namespace:std	typeref:typename:void	file:
swap	std-headers/vector	/^    void swap(vector& other);$/;"	p	class:std::vector	typeref:typename:void	file:
swap_ranges	std-headers/algorithm	/^ForwardIt2 swap_ranges(ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2);$/;"	p	namespace:std	typeref:typename:ForwardIt2	file:
swprintf	std-headers/cwchar	/^int swprintf(wchar_t* buffer, std::size_t size, const wchar_t* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
swscanf	std-headers/cwchar	/^int swscanf(const wchar_t* buffer, const wchar_t* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
symbol	std-headers/locale	/^        none, space, symbol, sign, value$/;"	e	enum:std::money_base::part	file:
sync	std-headers/fstream	/^    virtual int sync();$/;"	p	class:std::basic_filebuf	typeref:typename:int	file:
sync	std-headers/istream	/^    int sync();$/;"	p	class:std::basic_istream	typeref:typename:int	file:
sync	std-headers/streambuf	/^    virtual int sync();$/;"	p	class:std::basic_streambuf	typeref:typename:int	file:
sync_with_stdio	std-headers/ios	/^    static bool sync_with_stdio(bool sync = true);$/;"	p	class:std::ios_base	typeref:typename:bool	file:
syntax_option_type	std-headers/regex	/^typedef int syntax_option_type; \/\/ actually unspecified$/;"	t	namespace:std::regex_constants	typeref:typename:int	file:
system	std-headers/cstdlib	/^int system(const char* command);$/;"	p	namespace:std	typeref:typename:int	file:
system_category	std-headers/system_error	/^const std::error_category& system_category();$/;"	p	namespace:std	typeref:typename:const std::error_category &	file:
system_clock	std-headers/chrono	/^class system_clock {$/;"	c	namespace:std::chrono	file:
system_error	std-headers/system_error	/^    system_error(int ev, const std::error_category& ecat);$/;"	p	class:std::system_error	file:
system_error	std-headers/system_error	/^    system_error(int ev, const std::error_category& ecat,$/;"	p	class:std::system_error	file:
system_error	std-headers/system_error	/^    system_error(std::error_code ec);$/;"	p	class:std::system_error	file:
system_error	std-headers/system_error	/^    system_error(std::error_code ec, const char* what_arg);$/;"	p	class:std::system_error	file:
system_error	std-headers/system_error	/^    system_error(std::error_code ec, const std::string& what_arg);$/;"	p	class:std::system_error	file:
system_error	std-headers/system_error	/^class system_error : public runtime_error {$/;"	c	namespace:std	file:
t	std-headers/random	/^    IntType t() const;$/;"	p	class:std::binomial_distribution	typeref:typename:IntType	file:
table	std-headers/locale	/^    const mask* table() const; \/\/ only in char specialization$/;"	p	class:std::ctype	typeref:typename:const mask *	file:
table_size	std-headers/random	/^    static constexpr size_t table_size;$/;"	m	class:std::shuffle_order_engine	typeref:typename:size_t	file:
tampering_b	std-headers/random	/^    static constexpr UIntType tampering_b;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:UIntType	file:
tampering_c	std-headers/random	/^    static constexpr UIntType tampering_c;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:UIntType	file:
tampering_d	std-headers/random	/^    static constexpr UIntType tampering_d;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:UIntType	file:
tampering_l	std-headers/random	/^    static constexpr size_t tampering_l;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
tampering_s	std-headers/random	/^    static constexpr size_t tampering_s;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
tampering_t	std-headers/random	/^    static constexpr size_t tampering_t;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
tampering_u	std-headers/random	/^    static constexpr size_t tampering_u;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
tan	std-headers/cmath	/^double      tan(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
tan	std-headers/cmath	/^float       tan(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
tan	std-headers/cmath	/^long double tan(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
tan	std-headers/complex	/^complex<T> tan(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
tan	std-headers/valarray	/^valarray<T> tan(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
tanh	std-headers/cmath	/^double      tanh(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
tanh	std-headers/cmath	/^float       tanh(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
tanh	std-headers/cmath	/^long double tanh(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
tanh	std-headers/complex	/^complex<T> tanh(const complex<T>& z);$/;"	p	namespace:std	typeref:typename:complex<T>	file:
tanh	std-headers/valarray	/^valarray<T> tanh(const valarray<T>& va);$/;"	p	namespace:std	typeref:typename:valarray<T>	file:
target	std-headers/functional	/^    T* target();$/;"	p	class:std::function	typeref:typename:T *	file:
target	std-headers/functional	/^    const T* target() const;$/;"	p	class:std::function	typeref:typename:const T *	file:
target_type	std-headers/functional	/^    const std::type_info& target_type() const;$/;"	p	class:std::function	typeref:typename:const std::type_info &	file:
tellg	std-headers/istream	/^    pos_type tellg();$/;"	p	class:std::basic_istream	typeref:typename:pos_type	file:
tellp	std-headers/ostream	/^    pos_type tellp();$/;"	p	class:std::basic_ostream	typeref:typename:pos_type	file:
tera	std-headers/ratio	/^typedef ratio<            1000000000000, 1> tera;$/;"	t	namespace:std	typeref:typename:ratio<1000000000000,1>	file:
terminate	std-headers/exception	/^void terminate();$/;"	p	namespace:std	typeref:typename:void	file:
terminate_handler	std-headers/exception	/^typedef void (*terminate_handler)();$/;"	t	namespace:std	typeref:typename:void (*)()	file:
test	std-headers/bitset	/^    bool test(size_t pos) const;$/;"	p	class:std::bitset	typeref:typename:bool	file:
test_and_set	std-headers/atomic	/^    bool test_and_set(std::memory_order order = std::memory_order_seq_cst) volatile;$/;"	p	class:std::atomic_flag	typeref:typename:bool	file:
test_and_set	std-headers/atomic	/^    bool test_and_set(std::memory_order order = std::memory_order_seq_cst);$/;"	p	class:std::atomic_flag	typeref:typename:bool	file:
text_file_busy	std-headers/system_error	/^    text_file_busy,                     \/\/  ETXTBSY$/;"	e	enum:std::errc	file:
tgamma	std-headers/cmath	/^double      tgamma(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
tgamma	std-headers/cmath	/^float       tgamma(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
tgamma	std-headers/cmath	/^long double tgamma(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
that	std-headers/README.md	/^make code completion more useful. In addition to that, descriptive parameter$/;"	t	file:
this_thread	std-headers/thread	/^namespace this_thread {$/;"	n	namespace:std	file:
thousands_sep	std-headers/clocale	/^    char* thousands_sep;$/;"	m	struct:std::lconv	typeref:typename:char *	file:
thousands_sep	std-headers/locale	/^    char_type thousands_sep() const;$/;"	p	class:std::moneypunct	typeref:typename:char_type	file:
thousands_sep	std-headers/locale	/^    char_type thousands_sep() const;$/;"	p	class:std::numpunct	typeref:typename:char_type	file:
thread	std-headers/thread	/^    explicit thread(Function&& f, Args&& ... args);$/;"	p	class:std::thread	file:
thread	std-headers/thread	/^    thread();$/;"	p	class:std::thread	file:
thread	std-headers/thread	/^    thread(const thread&) = delete;$/;"	p	class:std::thread	file:
thread	std-headers/thread	/^    thread(thread&& other);$/;"	p	class:std::thread	file:
thread	std-headers/thread	/^class thread {$/;"	c	namespace:std	file:
throw_with_nested	std-headers/exception	/^void throw_with_nested(T&& t);$/;"	p	namespace:std	typeref:typename:void	file:
tie	std-headers/ios	/^    std::basic_ostream<CharT, Traits>* tie() const;$/;"	p	class:std::basic_ios	typeref:typename:std::basic_ostream<CharT,Traits> *	file:
tie	std-headers/ios	/^    std::basic_ostream<CharT, Traits>* tie(std::basic_ostream<CharT, Traits>* str);$/;"	p	class:std::basic_ios	typeref:typename:std::basic_ostream<CharT,Traits> *	file:
tie	std-headers/tuple	/^tuple<Types& ...> tie(Types& ... args);$/;"	p	namespace:std	typeref:typename:tuple<Types &...>	file:
time	std-headers/ctime	/^std::time_t time(std::time_t* arg);$/;"	p	namespace:std	typeref:typename:std::time_t	file:
time	std-headers/locale	/^    static const category time;$/;"	m	class:std::locale	typeref:typename:const category	file:
time_base	std-headers/locale	/^class time_base {$/;"	c	namespace:std	file:
time_get	std-headers/locale	/^    > class time_get : public time_base, public locale::facet {$/;"	c	namespace:std	file:
time_get	std-headers/locale	/^    explicit time_get(std::size_t refs = 0);$/;"	p	class:std::time_get	file:
time_get_byname	std-headers/locale	/^    explicit time_get_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::time_get_byname	file:
time_get_byname	std-headers/locale	/^    explicit time_get_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::time_get_byname	file:
time_get_byname	std-headers/locale	/^class time_get_byname : public time_get<CharT, InputIt> {$/;"	c	namespace:std	file:
time_point	std-headers/chrono	/^    explicit time_point(const duration& d);$/;"	p	class:std::chrono::time_point	file:
time_point	std-headers/chrono	/^    time_point();$/;"	p	class:std::chrono::time_point	file:
time_point	std-headers/chrono	/^    time_point(const time_point<Clock, Duration2>& t);$/;"	p	class:std::chrono::time_point	file:
time_point	std-headers/chrono	/^    typedef time_point<high_resolution_clock> time_point;$/;"	t	class:std::chrono::high_resolution_clock	typeref:typename:time_point<high_resolution_clock>	file:
time_point	std-headers/chrono	/^    typedef time_point<steady_clock> time_point;$/;"	t	class:std::chrono::steady_clock	typeref:typename:time_point<steady_clock>	file:
time_point	std-headers/chrono	/^    typedef time_point<system_clock> time_point;$/;"	t	class:std::chrono::system_clock	typeref:typename:time_point<system_clock>	file:
time_point	std-headers/chrono	/^class time_point {$/;"	c	namespace:std::chrono	file:
time_point_cast	std-headers/chrono	/^time_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration>& t);$/;"	p	namespace:std::chrono	typeref:typename:time_point<Clock,ToDuration>	file:
time_put	std-headers/locale	/^    > class time_put : public time_base, public locale::facet {$/;"	c	namespace:std	file:
time_put	std-headers/locale	/^    explicit time_put(std::size_t refs = 0);$/;"	p	class:std::time_put	file:
time_put_byname	std-headers/locale	/^    explicit time_put_byname(const char* name, std::size_t refs = 0);$/;"	p	class:std::time_put_byname	file:
time_put_byname	std-headers/locale	/^    explicit time_put_byname(const std::string& name, std::size_t refs = 0);$/;"	p	class:std::time_put_byname	file:
time_put_byname	std-headers/locale	/^class time_put_byname : public time_put<CharT, OutputIt> {$/;"	c	namespace:std	file:
time_since_epoch	std-headers/chrono	/^    duration time_since_epoch() const;$/;"	p	class:std::chrono::time_point	typeref:typename:duration	file:
time_t	std-headers/ctime	/^typedef int time_t; \/\/ actually unspecified$/;"	t	namespace:std	typeref:typename:int	file:
timed_mutex	std-headers/mutex	/^    timed_mutex();$/;"	p	class:std::timed_mutex	file:
timed_mutex	std-headers/mutex	/^    timed_mutex(const timed_mutex&) = delete;$/;"	p	class:std::timed_mutex	file:
timed_mutex	std-headers/mutex	/^class timed_mutex {$/;"	c	namespace:std	file:
timed_out	std-headers/system_error	/^    timed_out,                          \/\/  ETIMEDOUT$/;"	e	enum:std::errc	file:
timeout	std-headers/condition_variable	/^    timeout$/;"	e	enum:std::cv_status	file:
timeout	std-headers/future	/^    timeout,$/;"	e	enum:std::future_status	file:
tinyness_before	std-headers/limits	/^    static const bool tinyness_before;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
tm	std-headers/ctime	/^struct tm {$/;"	s	namespace:std	file:
tm_hour	std-headers/ctime	/^    int tm_hour;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_isdst	std-headers/ctime	/^    int tm_isdst;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_mday	std-headers/ctime	/^    int tm_mday;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_min	std-headers/ctime	/^    int tm_min;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_mon	std-headers/ctime	/^    int tm_mon;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_sec	std-headers/ctime	/^    int tm_sec;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_wday	std-headers/ctime	/^    int tm_wday;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_yday	std-headers/ctime	/^    int tm_yday;$/;"	m	struct:std::tm	typeref:typename:int	file:
tm_year	std-headers/ctime	/^    int tm_year;$/;"	m	struct:std::tm	typeref:typename:int	file:
tmpfile	std-headers/cstdio	/^std::FILE* tmpfile();$/;"	p	namespace:std	typeref:typename:std::FILE *	file:
tmpnam	std-headers/cstdio	/^char* tmpnam(char* filename);$/;"	p	namespace:std	typeref:typename:char *	file:
to_bytes	std-headers/locale	/^    byte_string to_bytes(Elem wchar);$/;"	p	class:std::wstring_convert	typeref:typename:byte_string	file:
to_bytes	std-headers/locale	/^    byte_string to_bytes(const Elem* first, const Elem* last);$/;"	p	class:std::wstring_convert	typeref:typename:byte_string	file:
to_bytes	std-headers/locale	/^    byte_string to_bytes(const Elem* wptr);$/;"	p	class:std::wstring_convert	typeref:typename:byte_string	file:
to_bytes	std-headers/locale	/^    byte_string to_bytes(const wide_string& wstr);$/;"	p	class:std::wstring_convert	typeref:typename:byte_string	file:
to_char_type	std-headers/string	/^    static char_type to_char_type(int_type c);$/;"	p	class:std::char_traits	typeref:typename:char_type	file:
to_int_type	std-headers/string	/^    static int_type  to_int_type(char_type c);$/;"	p	class:std::char_traits	typeref:typename:int_type	file:
to_string	std-headers/bitset	/^    std::basic_string<CharT, Traits, Allocator> to_string() const;$/;"	p	class:std::bitset	typeref:typename:std::basic_string<CharT,Traits,Allocator>	file:
to_string	std-headers/string	/^std::string to_string(double value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(float value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(int value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(long double value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(long long value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(long value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(unsigned long long value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(unsigned long value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_string	std-headers/string	/^std::string to_string(unsigned value);$/;"	p	namespace:std	typeref:typename:std::string	file:
to_time_t	std-headers/chrono	/^    static std::time_t to_time_t(const time_point& t);$/;"	p	class:std::chrono::system_clock	typeref:typename:std::time_t	file:
to_ullong	std-headers/bitset	/^    unsigned long long to_ullong() const;$/;"	p	class:std::bitset	typeref:typename:unsigned long long	file:
to_ulong	std-headers/bitset	/^    unsigned long to_ulong() const;$/;"	p	class:std::bitset	typeref:typename:unsigned long	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(double value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(float value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(int value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(long double value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(long long value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(long value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(unsigned long long value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(unsigned long value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
to_wstring	std-headers/string	/^std::wstring to_wstring(unsigned value);$/;"	p	namespace:std	typeref:typename:std::wstring	file:
tolower	std-headers/cctype	/^int tolower(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
tolower	std-headers/locale	/^    CharT tolower(CharT c) const;$/;"	p	class:std::ctype	typeref:typename:CharT	file:
tolower	std-headers/locale	/^    const CharT* tolower(CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
tolower	std-headers/locale	/^template<class CharT> CharT tolower(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:CharT	file:
too_many_files_open	std-headers/system_error	/^    too_many_files_open,                \/\/  EMFILE$/;"	e	enum:std::errc	file:
too_many_files_open_in_system	std-headers/system_error	/^    too_many_files_open_in_system,      \/\/  ENFILE$/;"	e	enum:std::errc	file:
too_many_links	std-headers/system_error	/^    too_many_links,                     \/\/  EMLINK$/;"	e	enum:std::errc	file:
too_many_symbolic_link_levels	std-headers/system_error	/^    too_many_symbolic_link_levels,      \/\/  ELOOP$/;"	e	enum:std::errc	file:
top	std-headers/queue	/^    const_reference top() const;$/;"	p	class:std::priority_queue	typeref:typename:const_reference	file:
top	std-headers/stack	/^    const_reference top() const;$/;"	p	class:std::stack	typeref:typename:const_reference	file:
top	std-headers/stack	/^    reference top();$/;"	p	class:std::stack	typeref:typename:reference	file:
toupper	std-headers/cctype	/^int toupper(int ch);$/;"	p	namespace:std	typeref:typename:int	file:
toupper	std-headers/locale	/^    CharT toupper(CharT c) const;$/;"	p	class:std::ctype	typeref:typename:CharT	file:
toupper	std-headers/locale	/^    const CharT* toupper(CharT* beg, const CharT* end) const;$/;"	p	class:std::ctype	typeref:typename:const CharT *	file:
toupper	std-headers/locale	/^template<class CharT> CharT toupper(CharT c, const locale& loc);$/;"	p	namespace:std	typeref:typename:CharT	file:
towctrans	std-headers/cwctype	/^std::wint_t towctrans(std::wint_t wc, std::wctrans_t desc);$/;"	p	namespace:std	typeref:typename:std::wint_t	file:
towlower	std-headers/cwctype	/^int towlower(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
towupper	std-headers/cwctype	/^int towupper(std::wint_t ch);$/;"	p	namespace:std	typeref:typename:int	file:
traits_type	std-headers/ios	/^    typedef Traits traits_type;$/;"	t	class:std::basic_ios	typeref:typename:Traits	file:
traits_type	std-headers/istream	/^        typedef Traits traits_type;$/;"	t	class:std::basic_istream::sentry	typeref:typename:Traits	file:
traits_type	std-headers/iterator	/^    typedef Traits traits_type;$/;"	t	class:std::istream_iterator	typeref:typename:Traits	file:
traits_type	std-headers/iterator	/^    typedef Traits traits_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:Traits	file:
traits_type	std-headers/iterator	/^    typedef Traits traits_type;$/;"	t	class:std::ostream_iterator	typeref:typename:Traits	file:
traits_type	std-headers/iterator	/^    typedef Traits traits_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:Traits	file:
traits_type	std-headers/ostream	/^        typedef Traits traits_type;$/;"	t	class:std::basic_ostream::sentry	typeref:typename:Traits	file:
traits_type	std-headers/regex	/^    typedef Traits traits_type;$/;"	t	class:std::basic_regex	typeref:typename:Traits	file:
traits_type	std-headers/streambuf	/^    typedef Traits traits_type;$/;"	t	class:std::basic_streambuf	typeref:typename:Traits	file:
traits_type	std-headers/string	/^    typedef Traits traits_type;$/;"	t	class:std::basic_string	typeref:typename:Traits	file:
transform	std-headers/algorithm	/^OutputIt transform(InputIt first1, InputIt last1, OutputIt d_first,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
transform	std-headers/algorithm	/^OutputIt transform(InputIt1 first1, InputIt1 last1, InputIt2 first2,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
transform	std-headers/locale	/^    string_type transform(const CharT* low, const CharT* high) const;$/;"	p	class:std::collate	typeref:typename:string_type	file:
transform	std-headers/regex	/^    string_type transform(ForwardIt first, ForwardIt last) const;$/;"	p	class:std::regex_traits	typeref:typename:string_type	file:
transform_primary	std-headers/regex	/^    string_type transform_primary(ForwardIt first, ForwardIt last) const;$/;"	p	class:std::regex_traits	typeref:typename:string_type	file:
translate	std-headers/regex	/^    CharT translate(CharT c) const;$/;"	p	class:std::regex_traits	typeref:typename:CharT	file:
translate_nocase	std-headers/regex	/^    CharT translate_nocase(CharT c) const;$/;"	p	class:std::regex_traits	typeref:typename:CharT	file:
traps	std-headers/limits	/^    static const bool traps;$/;"	m	class:std::numeric_limits	typeref:typename:const bool	file:
treat_as_floating_point	std-headers/chrono	/^struct treat_as_floating_point : std::is_floating_point<Rep> {};$/;"	s	namespace:std::chrono	file:
true_type	std-headers/type_traits	/^typedef integral_constant<bool, true> true_type;$/;"	t	namespace:std	typeref:typename:integral_constant<bool,true>	file:
truename	std-headers/locale	/^    string_type truename() const;$/;"	p	class:std::numpunct	typeref:typename:string_type	file:
trunc	std-headers/cmath	/^double      trunc(double arg);$/;"	p	namespace:std	typeref:typename:double	file:
trunc	std-headers/cmath	/^float       trunc(float arg);$/;"	p	namespace:std	typeref:typename:float	file:
trunc	std-headers/cmath	/^long double trunc(long double arg);$/;"	p	namespace:std	typeref:typename:long double	file:
trunc	std-headers/ios	/^    static constexpr openmode trunc;$/;"	m	class:std::ios_base	typeref:typename:openmode	file:
try_lock	std-headers/mutex	/^    bool try_lock();$/;"	p	class:std::mutex	typeref:typename:bool	file:
try_lock	std-headers/mutex	/^    bool try_lock();$/;"	p	class:std::recursive_mutex	typeref:typename:bool	file:
try_lock	std-headers/mutex	/^    bool try_lock();$/;"	p	class:std::recursive_timed_mutex	typeref:typename:bool	file:
try_lock	std-headers/mutex	/^    bool try_lock();$/;"	p	class:std::timed_mutex	typeref:typename:bool	file:
try_lock	std-headers/mutex	/^    bool try_lock();$/;"	p	class:std::unique_lock	typeref:typename:bool	file:
try_lock	std-headers/mutex	/^int try_lock(Lockable1& lock1, Lockable2& lock2, LockableN& ... lockn);$/;"	p	namespace:std	typeref:typename:int	file:
try_lock	std-headers/shared_mutex	/^    bool try_lock();$/;"	p	class:std::shared_lock	typeref:typename:bool	file:
try_lock	std-headers/shared_mutex	/^    bool try_lock();$/;"	p	class:std::shared_mutex	typeref:typename:bool	file:
try_lock	std-headers/shared_mutex	/^    bool try_lock();$/;"	p	class:std::shared_timed_mutex	typeref:typename:bool	file:
try_lock_for	std-headers/mutex	/^    bool try_lock_for(const std::chrono::duration<Rep, Period>& timeout_duration);$/;"	p	class:std::recursive_timed_mutex	typeref:typename:bool	file:
try_lock_for	std-headers/mutex	/^    bool try_lock_for(const std::chrono::duration<Rep, Period>& timeout_duration);$/;"	p	class:std::timed_mutex	typeref:typename:bool	file:
try_lock_for	std-headers/mutex	/^    bool try_lock_for(const std::chrono::duration<Rep, Period>& timeout_duration);$/;"	p	class:std::unique_lock	typeref:typename:bool	file:
try_lock_for	std-headers/shared_mutex	/^    bool try_lock_for(const std::chrono::duration<Rep, Period>& timeout_duration);$/;"	p	class:std::shared_lock	typeref:typename:bool	file:
try_lock_for	std-headers/shared_mutex	/^    bool try_lock_for(const std::chrono::duration<Rep, Period>& timeout_duration);$/;"	p	class:std::shared_timed_mutex	typeref:typename:bool	file:
try_lock_shared	std-headers/shared_mutex	/^    bool try_lock_shared();$/;"	p	class:std::shared_mutex	typeref:typename:bool	file:
try_lock_shared	std-headers/shared_mutex	/^    bool try_lock_shared();$/;"	p	class:std::shared_timed_mutex	typeref:typename:bool	file:
try_lock_shared_for	std-headers/shared_mutex	/^    bool try_lock_shared_for(const std::chrono::duration<Rep, Period>& timeout_duration);$/;"	p	class:std::shared_timed_mutex	typeref:typename:bool	file:
try_lock_shared_until	std-headers/shared_mutex	/^    bool try_lock_shared_until(const std::chrono::time_point<Clock, Duration>& timeout_time);$/;"	p	class:std::shared_timed_mutex	typeref:typename:bool	file:
try_lock_until	std-headers/mutex	/^    bool try_lock_until(const std::chrono::time_point<Clock, Duration>& timeout_time);$/;"	p	class:std::recursive_timed_mutex	typeref:typename:bool	file:
try_lock_until	std-headers/mutex	/^    bool try_lock_until(const std::chrono::time_point<Clock, Duration>& timeout_time);$/;"	p	class:std::timed_mutex	typeref:typename:bool	file:
try_lock_until	std-headers/mutex	/^    bool try_lock_until(const std::chrono::time_point<Clock, Duration>& timeout_time);$/;"	p	class:std::unique_lock	typeref:typename:bool	file:
try_lock_until	std-headers/shared_mutex	/^    bool try_lock_until(const std::chrono::time_point<Clock, Duration>& timeout_time);$/;"	p	class:std::shared_lock	typeref:typename:bool	file:
try_lock_until	std-headers/shared_mutex	/^    bool try_lock_until(const std::chrono::time_point<Clock, Duration>& timeout_time);$/;"	p	class:std::shared_timed_mutex	typeref:typename:bool	file:
try_to_lock	std-headers/mutex	/^constexpr std::try_to_lock_t try_to_lock;$/;"	v	namespace:std	typeref:typename:std::try_to_lock_t
try_to_lock_t	std-headers/mutex	/^struct try_to_lock_t { };$/;"	s	namespace:std	file:
tuple	std-headers/tuple	/^    constexpr tuple();$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    explicit tuple(UTypes&& ... args);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(const pair<U1, U2>& p);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(const tuple& other) = default;$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(const tuple<UTypes...>& other);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(pair<U1, U2>&& p);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, UTypes&& ... args);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, const Types& ... args);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, const pair<U1, U2>& p);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, const tuple& other);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, const tuple<UTypes...>& other);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, pair<U1, U2>&& p);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, tuple&& other);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(std::allocator_arg_t, const Alloc& a, tuple<UTypes...>&& other);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(tuple&& other) = default;$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^    tuple(tuple<UTypes...>&& other);$/;"	p	class:std::tuple	file:
tuple	std-headers/tuple	/^class tuple {$/;"	c	namespace:std	file:
tuple_cat	std-headers/tuple	/^std::tuple<CTypes...> tuple_cat(Tuples&& ... args);$/;"	p	namespace:std	typeref:typename:std::tuple<CTypes...>	file:
tuple_element	std-headers/tuple	/^class tuple_element<I, tuple<Types...> > {$/;"	c	namespace:std	file:
tuple_size	std-headers/tuple	/^class tuple_size<std::tuple<Types...> > : public std::integral_constant<std::size_t, sizeof...(T/;"	c	namespace:std	file:
type	std-headers/functional	/^    typedef T type;$/;"	t	class:std::reference_wrapper	typeref:typename:T	file:
type	std-headers/ratio	/^    typedef ratio<Num, Denom> type;$/;"	t	struct:std::ratio	typeref:typename:ratio<Num,Denom>	file:
type	std-headers/tuple	/^    typedef void type;$/;"	t	class:std::tuple_element	typeref:typename:void	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::add_const	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::add_cv	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::add_lvalue_reference	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::add_pointer	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::add_rvalue_reference	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::add_volatile	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::make_signed	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::make_unsigned	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_all_extents	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_const	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_cv	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_extent	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_pointer	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_reference	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef T type;$/;"	t	struct:std::remove_volatile	typeref:typename:T	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	class:std::result_of	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::aligned_storage	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::aligned_union	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::common_type	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::conditional	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::decay	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::enable_if	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef int type;$/;"	t	struct:std::underlying_type	typeref:typename:int	file:
type	std-headers/type_traits	/^    typedef integral_constant<T, v> type;$/;"	t	struct:std::integral_constant	typeref:typename:integral_constant<T,v>	file:
type_index	std-headers/typeindex	/^    type_index(const type_info& info);$/;"	p	class:std::type_index	file:
type_index	std-headers/typeindex	/^class type_index {$/;"	c	namespace:std	file:
type_info	std-headers/typeinfo	/^class type_info {$/;"	c	namespace:std	file:
types	std-headers/README.md	/^return types, and thus being unable to provide code completion of class members $/;"	t	typeref:typename:result and function return	file:
u16streampos	std-headers/string	/^typedef fpos<char_traits<char16_t>::state_type> u16streampos;$/;"	t	namespace:std	typeref:typename:fpos<char_traits<char16_t>::state_type>	file:
u16string	std-headers/string	/^typedef std::basic_string<char16_t> u16string;$/;"	t	namespace:std	typeref:typename:std::basic_string<char16_t>	file:
u32streampos	std-headers/string	/^typedef fpos<char_traits<char32_t>::state_type> u32streampos;$/;"	t	namespace:std	typeref:typename:fpos<char_traits<char32_t>::state_type>	file:
u32string	std-headers/string	/^typedef std::basic_string<char32_t> u32string;$/;"	t	namespace:std	typeref:typename:std::basic_string<char32_t>	file:
uflow	std-headers/fstream	/^    virtual int_type uflow();$/;"	p	class:std::basic_filebuf	typeref:typename:int_type	file:
uflow	std-headers/streambuf	/^    virtual int_type uflow();$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
uint16_t	std-headers/cstdint	/^typedef unsigned short uint16_t;$/;"	t	namespace:std	typeref:typename:unsigned short	file:
uint32_t	std-headers/cstdint	/^typedef unsigned int uint32_t;$/;"	t	namespace:std	typeref:typename:unsigned int	file:
uint64_t	std-headers/cstdint	/^typedef unsigned long long uint64_t;$/;"	t	namespace:std	typeref:typename:unsigned long long	file:
uint8_t	std-headers/cstdint	/^typedef unsigned char uint8_t;$/;"	t	namespace:std	typeref:typename:unsigned char	file:
uint_fast16_t	std-headers/cstdint	/^typedef unsigned short uint_fast16_t;$/;"	t	namespace:std	typeref:typename:unsigned short	file:
uint_fast32_t	std-headers/cstdint	/^typedef unsigned int uint_fast32_t;$/;"	t	namespace:std	typeref:typename:unsigned int	file:
uint_fast64_t	std-headers/cstdint	/^typedef unsigned long long uint_fast64_t;$/;"	t	namespace:std	typeref:typename:unsigned long long	file:
uint_fast8_t	std-headers/cstdint	/^typedef unsigned char uint_fast8_t;$/;"	t	namespace:std	typeref:typename:unsigned char	file:
uint_least16_t	std-headers/cstdint	/^typedef unsigned short uint_least16_t;$/;"	t	namespace:std	typeref:typename:unsigned short	file:
uint_least32_t	std-headers/cstdint	/^typedef unsigned int uint_least32_t;$/;"	t	namespace:std	typeref:typename:unsigned int	file:
uint_least64_t	std-headers/cstdint	/^typedef unsigned long long uint_least64_t;$/;"	t	namespace:std	typeref:typename:unsigned long long	file:
uint_least8_t	std-headers/cstdint	/^typedef unsigned char uint_least8_t;$/;"	t	namespace:std	typeref:typename:unsigned char	file:
uintmax_t	std-headers/cstdint	/^typedef unsigned long long uintmax_t;$/;"	t	namespace:std	typeref:typename:unsigned long long	file:
uintptr_t	std-headers/cstdint	/^typedef unsigned long long uintptr_t;$/;"	t	namespace:std	typeref:typename:unsigned long long	file:
unary_negate	std-headers/functional	/^    explicit unary_negate(const Predicate& pred);$/;"	p	struct:std::unary_negate	file:
unary_negate	std-headers/functional	/^struct unary_negate {$/;"	s	namespace:std	file:
uncaught_exception	std-headers/exception	/^bool uncaught_exception();$/;"	p	namespace:std	typeref:typename:bool	file:
uncaught_exceptions	std-headers/exception	/^int uncaught_exceptions();$/;"	p	namespace:std	typeref:typename:int	file:
undeclare_no_pointers	std-headers/memory	/^void undeclare_no_pointers(char* p, std::size_t n);$/;"	p	namespace:std	typeref:typename:void	file:
undeclare_reachable	std-headers/memory	/^T* undeclare_reachable(T* p);$/;"	p	namespace:std	typeref:typename:T *	file:
underflow	std-headers/fstream	/^    virtual int_type underflow();$/;"	p	class:std::basic_filebuf	typeref:typename:int_type	file:
underflow	std-headers/sstream	/^    virtual int_type underflow();$/;"	p	class:std::basic_stringbuf	typeref:typename:int_type	file:
underflow	std-headers/streambuf	/^    virtual int_type underflow();$/;"	p	class:std::basic_streambuf	typeref:typename:int_type	file:
underflow_error	std-headers/stdexcept	/^    explicit underflow_error(const char* what_arg);$/;"	p	class:std::underflow_error	file:
underflow_error	std-headers/stdexcept	/^    explicit underflow_error(const string& what_arg);$/;"	p	class:std::underflow_error	file:
underflow_error	std-headers/stdexcept	/^class underflow_error : public runtime_error {$/;"	c	namespace:std	file:
underlying_type	std-headers/type_traits	/^template<class T> struct underlying_type {$/;"	s	namespace:std	file:
unexpected	std-headers/exception	/^void unexpected();$/;"	p	namespace:std	typeref:typename:void	file:
unexpected_handler	std-headers/exception	/^typedef void (*unexpected_handler)();$/;"	t	namespace:std	typeref:typename:void (*)()	file:
unget	std-headers/istream	/^    basic_istream& unget();$/;"	p	class:std::basic_istream	typeref:typename:basic_istream &	file:
ungetc	std-headers/cstdio	/^int ungetc(int ch, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:int	file:
ungetwc	std-headers/cwchar	/^wint_t ungetwc(wint_t ch, std::FILE* stream);$/;"	p	namespace:std	typeref:typename:wint_t	file:
uniform_int_distribution	std-headers/random	/^    explicit uniform_int_distribution(IntType a = 0,$/;"	p	class:std::uniform_int_distribution	file:
uniform_int_distribution	std-headers/random	/^    explicit uniform_int_distribution(const param_type& params);$/;"	p	class:std::uniform_int_distribution	file:
uniform_int_distribution	std-headers/random	/^class uniform_int_distribution {$/;"	c	namespace:std	file:
uniform_real_distribution	std-headers/random	/^    explicit uniform_real_distribution(RealType a = 0.0, RealType b = 1.0);$/;"	p	class:std::uniform_real_distribution	file:
uniform_real_distribution	std-headers/random	/^    explicit uniform_real_distribution(const param_type& params);$/;"	p	class:std::uniform_real_distribution	file:
uniform_real_distribution	std-headers/random	/^class uniform_real_distribution {$/;"	c	namespace:std	file:
uninitialized_copy	std-headers/memory	/^ForwardIt uninitialized_copy(InputIt first, InputIt last, ForwardIt d_first);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
uninitialized_copy_n	std-headers/memory	/^ForwardIt uninitialized_copy_n(InputIt first, Size count, ForwardIt d_first);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
uninitialized_fill	std-headers/memory	/^void uninitialized_fill(ForwardIt first, ForwardIt last, const T& value);$/;"	p	namespace:std	typeref:typename:void	file:
uninitialized_fill_n	std-headers/memory	/^ForwardIt uninitialized_fill_n(ForwardIt first, Size count, const T& value);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
uninitialized_fill_n	std-headers/memory	/^void uninitialized_fill_n(ForwardIt first, Size count, const T& value);$/;"	p	namespace:std	typeref:typename:void	file:
unique	std-headers/algorithm	/^ForwardIt unique(ForwardIt first, ForwardIt last);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
unique	std-headers/algorithm	/^ForwardIt unique(ForwardIt first, ForwardIt last, BinaryPredicate p);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
unique	std-headers/forward_list	/^    void unique();$/;"	p	class:std::forward_list	typeref:typename:void	file:
unique	std-headers/forward_list	/^    void unique(BinaryPredicate p);$/;"	p	class:std::forward_list	typeref:typename:void	file:
unique	std-headers/list	/^    void unique();$/;"	p	class:std::list	typeref:typename:void	file:
unique	std-headers/list	/^    void unique(BinaryPredicate p);$/;"	p	class:std::list	typeref:typename:void	file:
unique	std-headers/memory	/^    bool unique() const;$/;"	p	class:std::shared_ptr	typeref:typename:bool	file:
unique_copy	std-headers/algorithm	/^OutputIt unique_copy(InputIt first, InputIt last,$/;"	p	namespace:std	typeref:typename:OutputIt	file:
unique_lock	std-headers/mutex	/^    explicit unique_lock(mutex_type& m);$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^    unique_lock();$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^    unique_lock(mutex_type& m, std::adopt_lock_t t);$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^    unique_lock(mutex_type& m, std::defer_lock_t t);$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^    unique_lock(mutex_type& m, std::try_to_lock_t t);$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^    unique_lock(mutex_type& m,$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^    unique_lock(unique_lock&& other);$/;"	p	class:std::unique_lock	file:
unique_lock	std-headers/mutex	/^class unique_lock {$/;"	c	namespace:std	file:
unique_ptr	std-headers/memory	/^    > class unique_ptr {$/;"	c	namespace:std	file:
unique_ptr	std-headers/memory	/^    constexpr unique_ptr();$/;"	p	class:std::unique_ptr	file:
unique_ptr	std-headers/memory	/^    constexpr unique_ptr(nullptr_t);$/;"	p	class:std::unique_ptr	file:
unique_ptr	std-headers/memory	/^    explicit unique_ptr(pointer p);$/;"	p	class:std::unique_ptr	file:
unique_ptr	std-headers/memory	/^    unique_ptr(pointer p, Deleter&& d2);   \/\/ SIMPLIFIED$/;"	p	class:std::unique_ptr	file:
unique_ptr	std-headers/memory	/^    unique_ptr(pointer p, const Deleter& d1);   \/\/ SIMPLIFIED$/;"	p	class:std::unique_ptr	file:
unique_ptr	std-headers/memory	/^    unique_ptr(unique_ptr&& u);$/;"	p	class:std::unique_ptr	file:
unique_ptr	std-headers/memory	/^    unique_ptr(unique_ptr<U, E>&& u);$/;"	p	class:std::unique_ptr	file:
unitbuf	std-headers/ios	/^    static constexpr fmtflags unitbuf;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
unitbuf	std-headers/ios	/^ios_base& unitbuf(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
unlock	std-headers/mutex	/^    void unlock();$/;"	p	class:std::mutex	typeref:typename:void	file:
unlock	std-headers/mutex	/^    void unlock();$/;"	p	class:std::recursive_mutex	typeref:typename:void	file:
unlock	std-headers/mutex	/^    void unlock();$/;"	p	class:std::recursive_timed_mutex	typeref:typename:void	file:
unlock	std-headers/mutex	/^    void unlock();$/;"	p	class:std::timed_mutex	typeref:typename:void	file:
unlock	std-headers/mutex	/^    void unlock();$/;"	p	class:std::unique_lock	typeref:typename:void	file:
unlock	std-headers/shared_mutex	/^    void unlock();$/;"	p	class:std::shared_lock	typeref:typename:void	file:
unlock	std-headers/shared_mutex	/^    void unlock();$/;"	p	class:std::shared_mutex	typeref:typename:void	file:
unlock	std-headers/shared_mutex	/^    void unlock();$/;"	p	class:std::shared_timed_mutex	typeref:typename:void	file:
unlock_shared	std-headers/shared_mutex	/^    void unlock_shared();$/;"	p	class:std::shared_mutex	typeref:typename:void	file:
unlock_shared	std-headers/shared_mutex	/^    void unlock_shared();$/;"	p	class:std::shared_timed_mutex	typeref:typename:void	file:
unordered_map	std-headers/unordered_map	/^    > class unordered_map {$/;"	c	namespace:std	file:
unordered_map	std-headers/unordered_map	/^    explicit unordered_map(const Allocator& alloc);$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    explicit unordered_map(size_type bucket_count = 0 \/*implementation-defined*\/,$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    explicit unordered_map(size_type bucket_count,$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map();$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(InputIt first, InputIt last,$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(const unordered_map& other);$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(const unordered_map& other, const Allocator& alloc);$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(size_type bucket_count,$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(std::initializer_list<value_type> init,$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(unordered_map&& other);$/;"	p	class:std::unordered_map	file:
unordered_map	std-headers/unordered_map	/^    unordered_map(unordered_map&& other, const Allocator& alloc);$/;"	p	class:std::unordered_map	file:
unordered_multimap	std-headers/unordered_map	/^    > class unordered_multimap {$/;"	c	namespace:std	file:
unordered_multimap	std-headers/unordered_map	/^    explicit unordered_multimap(const Allocator& alloc);$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    explicit unordered_multimap(size_type bucket_count = 0 \/*implementation-defined*\/,$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    explicit unordered_multimap(size_type bucket_count,$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap();$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(InputIt first, InputIt last,$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(const unordered_multimap& other);$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(const unordered_multimap& other, const Allocator& alloc);$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(size_type bucket_count,$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(std::initializer_list<value_type> init,$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(unordered_multimap&& other);$/;"	p	class:std::unordered_multimap	file:
unordered_multimap	std-headers/unordered_map	/^    unordered_multimap(unordered_multimap&& other, const Allocator& alloc);$/;"	p	class:std::unordered_multimap	file:
unordered_multiset	std-headers/unordered_set	/^    > class unordered_multiset {$/;"	c	namespace:std	file:
unordered_multiset	std-headers/unordered_set	/^    explicit unordered_multiset(const Allocator& alloc);$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    explicit unordered_multiset(size_type bucket_count = 0 \/*implementation-defined*\/,$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    explicit unordered_multiset(size_type bucket_count,$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset();$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(InputIt first, InputIt last,$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(const unordered_multiset& other);$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(const unordered_multiset& other, const Allocator& alloc);$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(size_type bucket_count,$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(std::initializer_list<value_type> init,$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(unordered_multiset&& other);$/;"	p	class:std::unordered_multiset	file:
unordered_multiset	std-headers/unordered_set	/^    unordered_multiset(unordered_multiset&& other, const Allocator& alloc);$/;"	p	class:std::unordered_multiset	file:
unordered_set	std-headers/unordered_set	/^    > class unordered_set {$/;"	c	namespace:std	file:
unordered_set	std-headers/unordered_set	/^    explicit unordered_set(const Allocator& alloc);$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    explicit unordered_set(size_type bucket_count = 0 \/*implementation-defined*\/,$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    explicit unordered_set(size_type bucket_count,$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set();$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(InputIt first, InputIt last,$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(const unordered_set& other);$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(const unordered_set& other, const Allocator& alloc);$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(size_type bucket_count,$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(std::initializer_list<value_type> init, const Allocator& alloc);$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(std::initializer_list<value_type> init,$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(unordered_set&& other);$/;"	p	class:std::unordered_set	file:
unordered_set	std-headers/unordered_set	/^    unordered_set(unordered_set&& other, const Allocator& alloc);$/;"	p	class:std::unordered_set	file:
unsetf	std-headers/ios	/^    void unsetf(fmtflags flags);$/;"	p	class:std::ios_base	typeref:typename:void	file:
unshift	std-headers/locale	/^    result unshift(StateT& state,$/;"	p	class:std::codecvt	typeref:typename:result	file:
upper	std-headers/locale	/^    static const mask upper;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
upper_bound	std-headers/algorithm	/^ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
upper_bound	std-headers/algorithm	/^ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp);$/;"	p	namespace:std	typeref:typename:ForwardIt	file:
upper_bound	std-headers/map	/^    const_iterator upper_bound(const K& x) const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
upper_bound	std-headers/map	/^    const_iterator upper_bound(const K& x) const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
upper_bound	std-headers/map	/^    const_iterator upper_bound(const Key& key) const;$/;"	p	class:std::map	typeref:typename:const_iterator	file:
upper_bound	std-headers/map	/^    const_iterator upper_bound(const Key& key) const;$/;"	p	class:std::multimap	typeref:typename:const_iterator	file:
upper_bound	std-headers/map	/^    iterator upper_bound(const K& x);$/;"	p	class:std::map	typeref:typename:iterator	file:
upper_bound	std-headers/map	/^    iterator upper_bound(const K& x);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
upper_bound	std-headers/map	/^    iterator upper_bound(const Key& key);$/;"	p	class:std::map	typeref:typename:iterator	file:
upper_bound	std-headers/map	/^    iterator upper_bound(const Key& key);$/;"	p	class:std::multimap	typeref:typename:iterator	file:
upper_bound	std-headers/set	/^    const_iterator upper_bound(const K& x) const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
upper_bound	std-headers/set	/^    const_iterator upper_bound(const K& x) const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
upper_bound	std-headers/set	/^    const_iterator upper_bound(const Key& key) const;$/;"	p	class:std::multiset	typeref:typename:const_iterator	file:
upper_bound	std-headers/set	/^    const_iterator upper_bound(const Key& key) const;$/;"	p	class:std::set	typeref:typename:const_iterator	file:
upper_bound	std-headers/set	/^    iterator upper_bound(const K& x);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
upper_bound	std-headers/set	/^    iterator upper_bound(const K& x);$/;"	p	class:std::set	typeref:typename:iterator	file:
upper_bound	std-headers/set	/^    iterator upper_bound(const Key& key);$/;"	p	class:std::multiset	typeref:typename:iterator	file:
upper_bound	std-headers/set	/^    iterator upper_bound(const Key& key);$/;"	p	class:std::set	typeref:typename:iterator	file:
uppercase	std-headers/ios	/^    static constexpr fmtflags uppercase;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	file:
uppercase	std-headers/ios	/^ios_base& uppercase(ios_base& str);$/;"	p	namespace:std	typeref:typename:ios_base &	file:
use_count	std-headers/memory	/^    long use_count() const;$/;"	p	class:std::shared_ptr	typeref:typename:long	file:
use_count	std-headers/memory	/^    long use_count() const;$/;"	p	class:std::weak_ptr	typeref:typename:long	file:
use_facet	std-headers/locale	/^const Facet& use_facet(const locale& loc);$/;"	p	namespace:std	typeref:typename:const Facet &	file:
used_size	std-headers/random	/^    static constexpr size_t used_size;$/;"	m	class:std::discard_block_engine	typeref:typename:size_t	file:
uses_allocator	std-headers/memory	/^struct uses_allocator : public integral_constant<bool, false> {};$/;"	s	namespace:std	file:
va_arg	std-headers/cstdarg	/^#define va_arg(/;"	d	file:
va_copy	std-headers/cstdarg	/^void va_copy(std::va_list desc, std::va_list src); \/\/ actually a macro$/;"	p	typeref:typename:void	file:
va_end	std-headers/cstdarg	/^void va_end(std::va_list ap); \/\/ actually a macro$/;"	p	typeref:typename:void	file:
va_start	std-headers/cstdarg	/^void va_start(std::va_list ap, int parm_n); \/\/ actually a macro$/;"	p	typeref:typename:void	file:
valarray	std-headers/valarray	/^    explicit valarray(std::size_t count);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray();$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const T& val, std::size_t count);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const T* vals, std::size_t count);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const std::gslice_array<T>& array);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const std::indirect_array<T>& array);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const std::mask_array<T>& array);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const std::slice_array<T>& array);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(const valarray& other);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(std::initializer_list<T> ilist);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^    valarray(valarray&& other);$/;"	p	class:std::valarray	file:
valarray	std-headers/valarray	/^class valarray {$/;"	c	namespace:std	file:
valid	std-headers/future	/^    bool valid() const;$/;"	p	class:std::future	typeref:typename:bool	file:
valid	std-headers/future	/^    bool valid() const;$/;"	p	class:std::packaged_task	typeref:typename:bool	file:
valid	std-headers/future	/^    bool valid() const;$/;"	p	class:std::shared_future	typeref:typename:bool	file:
value	std-headers/locale	/^        none, space, symbol, sign, value$/;"	e	enum:std::money_base::part	file:
value	std-headers/regex	/^    int value(CharT ch, int radix) const;$/;"	p	class:std::regex_traits	typeref:typename:int	file:
value	std-headers/system_error	/^    int value() const;$/;"	p	class:std::error_code	typeref:typename:int	file:
value	std-headers/system_error	/^    int value() const;$/;"	p	class:std::error_condition	typeref:typename:int	file:
value	std-headers/type_traits	/^    static constexpr T value;$/;"	m	struct:std::integral_constant	typeref:typename:T	file:
value_comp	std-headers/map	/^    value_compare value_comp() const;$/;"	p	class:std::map	typeref:typename:value_compare	file:
value_comp	std-headers/map	/^    value_compare value_comp() const;$/;"	p	class:std::multimap	typeref:typename:value_compare	file:
value_comp	std-headers/set	/^    value_compare value_comp() const;$/;"	p	class:std::multiset	typeref:typename:value_compare	file:
value_comp	std-headers/set	/^    value_compare value_comp() const;$/;"	p	class:std::set	typeref:typename:value_compare	file:
value_compare	std-headers/map	/^        value_compare(Compare c);$/;"	p	class:std::map::value_compare	file:
value_compare	std-headers/map	/^        value_compare(Compare c);$/;"	p	class:std::multimap::value_compare	file:
value_compare	std-headers/map	/^    class value_compare {$/;"	c	class:std::map	file:
value_compare	std-headers/map	/^    class value_compare {$/;"	c	class:std::multimap	file:
value_compare	std-headers/map	/^    typedef Compare value_compare;$/;"	t	class:std::map	typeref:typename:Compare	file:
value_compare	std-headers/map	/^    typedef Compare value_compare;$/;"	t	class:std::multimap	typeref:typename:Compare	file:
value_compare	std-headers/set	/^    typedef Compare value_compare;$/;"	t	class:std::multiset	typeref:typename:Compare	file:
value_compare	std-headers/set	/^    typedef Compare value_compare;$/;"	t	class:std::set	typeref:typename:Compare	file:
value_too_large	std-headers/system_error	/^    value_too_large,                    \/\/  EOVERFLOW$/;"	e	enum:std::errc	file:
value_type	std-headers/array	/^    typedef T value_type;$/;"	t	class:std::array	typeref:typename:T	file:
value_type	std-headers/complex	/^    typedef T value_type;$/;"	t	class:std::complex	typeref:typename:T	file:
value_type	std-headers/deque	/^    typedef T value_type;$/;"	t	class:std::deque	typeref:typename:T	file:
value_type	std-headers/forward_list	/^    typedef T value_type;$/;"	t	class:std::forward_list	typeref:typename:T	file:
value_type	std-headers/initializer_list	/^    typedef T value_type;$/;"	t	class:std::initializer_list	typeref:typename:T	file:
value_type	std-headers/iterator	/^    typedef T value_type;$/;"	t	class:std::istream_iterator	typeref:typename:T	file:
value_type	std-headers/iterator	/^    typedef T value_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:T	file:
value_type	std-headers/iterator	/^    typedef T value_type;$/;"	t	struct:std::iterator	typeref:typename:T	file:
value_type	std-headers/iterator	/^    typedef T value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:T	file:
value_type	std-headers/iterator	/^    typedef typename Iterator::value_type value_type;$/;"	t	class:std::reverse_iterator	typeref:typename:Iterator::value_type	file:
value_type	std-headers/iterator	/^    typedef typename iterator_traits<Iterator>::value_type value_type;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<Iterator>::value_type	file:
value_type	std-headers/iterator	/^    typedef void value_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:void	file:
value_type	std-headers/iterator	/^    typedef void value_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:void	file:
value_type	std-headers/iterator	/^    typedef void value_type;$/;"	t	class:std::insert_iterator	typeref:typename:void	file:
value_type	std-headers/iterator	/^    typedef void value_type;$/;"	t	class:std::ostream_iterator	typeref:typename:void	file:
value_type	std-headers/iterator	/^    typedef void value_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:void	file:
value_type	std-headers/list	/^    typedef T value_type;$/;"	t	class:std::list	typeref:typename:T	file:
value_type	std-headers/map	/^        typedef first_argument_type value_type;$/;"	t	class:std::map::value_compare	typeref:typename:first_argument_type	file:
value_type	std-headers/map	/^        typedef first_argument_type value_type;$/;"	t	class:std::multimap::value_compare	typeref:typename:first_argument_type	file:
value_type	std-headers/map	/^        typedef second_argument_type value_type;$/;"	t	class:std::map::value_compare	typeref:typename:second_argument_type	file:
value_type	std-headers/map	/^        typedef second_argument_type value_type;$/;"	t	class:std::multimap::value_compare	typeref:typename:second_argument_type	file:
value_type	std-headers/map	/^    typedef pair<const Key, T> value_type;$/;"	t	class:std::map	typeref:typename:pair<const Key,T>	file:
value_type	std-headers/map	/^    typedef pair<const Key, T> value_type;$/;"	t	class:std::multimap	typeref:typename:pair<const Key,T>	file:
value_type	std-headers/memory	/^    typedef T value_type;$/;"	t	struct:std::allocator	typeref:typename:T	file:
value_type	std-headers/memory	/^    typedef typename Alloc::value_type value_type;$/;"	t	struct:std::allocator_traits	typeref:typename:Alloc::value_type	file:
value_type	std-headers/memory	/^    typedef void value_type;$/;"	t	class:std::raw_storage_iterator	typeref:typename:void	file:
value_type	std-headers/queue	/^    typedef typename Container::value_type value_type;$/;"	t	class:std::priority_queue	typeref:typename:Container::value_type	file:
value_type	std-headers/queue	/^    typedef typename Container::value_type value_type;$/;"	t	class:std::queue	typeref:typename:Container::value_type	file:
value_type	std-headers/regex	/^    typedef BidirIt::value_type value_type;$/;"	t	class:std::sub_match	typeref:typename:BidirIt::value_type	file:
value_type	std-headers/regex	/^    typedef CharT value_type;$/;"	t	class:std::basic_regex	typeref:typename:CharT	file:
value_type	std-headers/regex	/^    typedef match_result<BidirIt> value_type;$/;"	t	class:std::regex_iterator	typeref:typename:match_result<BidirIt>	file:
value_type	std-headers/regex	/^    typedef sub_match<BidirIt> value_type;$/;"	t	class:std::match_results	typeref:typename:sub_match<BidirIt>	file:
value_type	std-headers/regex	/^    typedef sub_match<BidirIt> value_type;$/;"	t	class:std::regex_token_iterator	typeref:typename:sub_match<BidirIt>	file:
value_type	std-headers/regex	/^    typedef typename std::iterator_traits<BidirIt>::value_type value_type;$/;"	t	class:std::sub_match	typeref:typename:std::iterator_traits<BidirIt>::value_type	file:
value_type	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::value_type value_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::value_type	file:
value_type	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::value_type value_type;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::value_type	file:
value_type	std-headers/set	/^    typedef Key value_type;$/;"	t	class:std::multiset	typeref:typename:Key	file:
value_type	std-headers/set	/^    typedef Key value_type;$/;"	t	class:std::set	typeref:typename:Key	file:
value_type	std-headers/stack	/^    typedef typename Container::value_type value_type;$/;"	t	class:std::stack	typeref:typename:Container::value_type	file:
value_type	std-headers/string	/^    typedef CharT value_type;$/;"	t	class:std::basic_string	typeref:typename:CharT	file:
value_type	std-headers/string	/^    typedef typename Traits::char_type value_type;$/;"	t	class:std::basic_string	typeref:typename:Traits::char_type	file:
value_type	std-headers/type_traits	/^    typedef T value_type;$/;"	t	struct:std::integral_constant	typeref:typename:T	file:
value_type	std-headers/unordered_map	/^    typedef pair<const Key, T> value_type;$/;"	t	class:std::unordered_map	typeref:typename:pair<const Key,T>	file:
value_type	std-headers/unordered_map	/^    typedef pair<const Key, T> value_type;$/;"	t	class:std::unordered_multimap	typeref:typename:pair<const Key,T>	file:
value_type	std-headers/unordered_set	/^    typedef Key value_type;$/;"	t	class:std::unordered_multiset	typeref:typename:Key	file:
value_type	std-headers/unordered_set	/^    typedef Key value_type;$/;"	t	class:std::unordered_set	typeref:typename:Key	file:
value_type	std-headers/valarray	/^    typedef T value_type;$/;"	t	class:std::gslice_array	typeref:typename:T	file:
value_type	std-headers/valarray	/^    typedef T value_type;$/;"	t	class:std::indirect_array	typeref:typename:T	file:
value_type	std-headers/valarray	/^    typedef T value_type;$/;"	t	class:std::mask_array	typeref:typename:T	file:
value_type	std-headers/valarray	/^    typedef T value_type;$/;"	t	class:std::slice_array	typeref:typename:T	file:
value_type	std-headers/valarray	/^    typedef T value_type;$/;"	t	class:std::valarray	typeref:typename:T	file:
value_type	std-headers/vector	/^    typedef T value_type;$/;"	t	class:std::vector	typeref:typename:T	file:
values	std-headers/README.md	/^   values are 1998, 2003, 2011, 2014, 2017 which correspond to the respective$/;"	t	file:
vector	std-headers/vector	/^    explicit vector(const Allocator& alloc = Allocator());$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    explicit vector(const Allocator& alloc);$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    explicit vector(size_type count,$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    explicit vector(size_type n);$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    explicit vector(size_type n, const Allocator& alloc = Allocator());$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector();$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(InputIt first, InputIt last,$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(const vector& other);$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(const vector& other, const Allocator& alloc);$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(size_type count,$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(std::initializer_list<T> init,$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(vector&& other);$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^    vector(vector&& other, const Allocator& alloc);$/;"	p	class:std::vector	file:
vector	std-headers/vector	/^class vector {$/;"	c	namespace:std	file:
vfprintf	std-headers/cstdio	/^int vfprintf(std::FILE* stream, const char* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vfscanf	std-headers/cstdio	/^int vfscanf(std::FILE* stream, const char* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vfwprintf	std-headers/cwchar	/^int vfwprintf(std::FILE* stream, const wchar_t* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vfwscanf	std-headers/cwchar	/^int vfwscanf(std::FILE* stream, const wchar_t* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
void_pointer	std-headers/memory	/^    typedef nullptr_t void_pointer;$/;"	t	struct:std::allocator_traits	typeref:typename:nullptr_t	file:
void_pointer	std-headers/scoped_allocator	/^    typedef typename OuterAlloc::void_pointer void_pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:OuterAlloc::void_pointer	file:
void_pointer	std-headers/scoped_allocator	/^    typedef typename std::allocator_traits<OuterAlloc>::void_pointer void_pointer;$/;"	t	class:std::scoped_allocator_adaptor	typeref:typename:std::allocator_traits<OuterAlloc>::void_pointer	file:
vprintf	std-headers/cstdio	/^int vprintf(const char* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vscanf	std-headers/cstdio	/^int vscanf(const char* format, v_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vsnprintf	std-headers/cstdio	/^int vsnprintf(char* buffer, std::size_t buf_size, const char* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vsprintf	std-headers/cstdio	/^int vsprintf(char* buffer, const char* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vsscanf	std-headers/cstdio	/^int vsscanf(const char* buffer, const char* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vswprintf	std-headers/cwchar	/^int vswprintf(const wchar_t* buffer, std::size_t size, const wchar_t* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vswscanf	std-headers/cwchar	/^int vswscanf(const wchar_t* buffer, const wchar_t* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vwprintf	std-headers/cwchar	/^int vwprintf(const wchar_t* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
vwscanf	std-headers/cwchar	/^int vwscanf(const wchar_t* format, va_list vlist);$/;"	p	namespace:std	typeref:typename:int	file:
wait	std-headers/condition_variable	/^    void wait(Lock& lock);$/;"	p	class:std::condition_variable_any	typeref:typename:void	file:
wait	std-headers/condition_variable	/^    void wait(Lock& lock, Predicate pred);$/;"	p	class:std::condition_variable_any	typeref:typename:void	file:
wait	std-headers/condition_variable	/^    void wait(std::unique_lock<std::mutex>& lock);$/;"	p	class:std::condition_variable	typeref:typename:void	file:
wait	std-headers/condition_variable	/^    void wait(std::unique_lock<std::mutex>& lock, Predicate pred);$/;"	p	class:std::condition_variable	typeref:typename:void	file:
wait	std-headers/future	/^    void wait() const;$/;"	p	class:std::future	typeref:typename:void	file:
wait	std-headers/future	/^    void wait() const;$/;"	p	class:std::shared_future	typeref:typename:void	file:
wait_for	std-headers/condition_variable	/^    bool wait_for(Lock& lock,$/;"	p	class:std::condition_variable_any	typeref:typename:bool	file:
wait_for	std-headers/condition_variable	/^    bool wait_for(std::unique_lock<std::mutex>& lock,$/;"	p	class:std::condition_variable	typeref:typename:bool	file:
wait_for	std-headers/condition_variable	/^    std::cv_status wait_for(Lock& lock,$/;"	p	class:std::condition_variable_any	typeref:typename:std::cv_status	file:
wait_for	std-headers/condition_variable	/^    std::cv_status wait_for(std::unique_lock<std::mutex>& lock,$/;"	p	class:std::condition_variable	typeref:typename:std::cv_status	file:
wait_for	std-headers/future	/^    std::future_status wait_for(const std::chrono::duration<Rep, Period>& timeout_duration) cons/;"	p	class:std::future	typeref:typename:std::future_status	file:
wait_for	std-headers/future	/^    std::future_status wait_for(const std::chrono::duration<Rep, Period>& timeout_duration) cons/;"	p	class:std::shared_future	typeref:typename:std::future_status	file:
wait_until	std-headers/condition_variable	/^    bool wait_until(Lock& lock,$/;"	p	class:std::condition_variable_any	typeref:typename:bool	file:
wait_until	std-headers/condition_variable	/^    bool wait_until(std::unique_lock<std::mutex>& lock,$/;"	p	class:std::condition_variable	typeref:typename:bool	file:
wait_until	std-headers/condition_variable	/^    std::cv_status wait_until(Lock& lock,$/;"	p	class:std::condition_variable_any	typeref:typename:std::cv_status	file:
wait_until	std-headers/condition_variable	/^    std::cv_status wait_until(std::unique_lock<std::mutex>& lock,$/;"	p	class:std::condition_variable	typeref:typename:std::cv_status	file:
wait_until	std-headers/future	/^    std::future_status wait_until(const std::chrono::time_point<Clock, Duration>& timeout_time) /;"	p	class:std::future	typeref:typename:std::future_status	file:
wait_until	std-headers/future	/^    std::future_status wait_until(const std::chrono::time_point<Clock, Duration>& timeout_time) /;"	p	class:std::shared_future	typeref:typename:std::future_status	file:
wbuffer_convert	std-headers/locale	/^    explicit wbuffer_convert(std::streambuf* bytebuf = 0,$/;"	p	class:std::wbuffer_convert	file:
wbuffer_convert	std-headers/locale	/^    wbuffer_convert(const std::wbuffer_convert&) = delete;$/;"	p	class:std::wbuffer_convert	file:
wbuffer_convert	std-headers/locale	/^class wbuffer_convert : public std::basic_streambuf<Elem, Tr> {$/;"	c	namespace:std	file:
wcerr	std-headers/iostream	/^extern wostream wcerr;$/;"	x	namespace:std	typeref:typename:wostream
wcerr	std-headers/ostream	/^extern wostream wcerr;$/;"	x	namespace:std	typeref:typename:wostream
wcin	std-headers/iostream	/^extern wistream wcin;$/;"	x	namespace:std	typeref:typename:wistream
wcin	std-headers/istream	/^extern wistream wcin;$/;"	x	namespace:std	typeref:typename:wistream
wclog	std-headers/iostream	/^extern wostream wclog;$/;"	x	namespace:std	typeref:typename:wostream
wclog	std-headers/ostream	/^extern wostream wclog;$/;"	x	namespace:std	typeref:typename:wostream
wcmatch	std-headers/regex	/^typedef match_results<const wchar_t*> wcmatch;$/;"	t	namespace:std	typeref:typename:match_results<const wchar_t * >	file:
wcout	std-headers/iostream	/^extern wostream wcout;$/;"	x	namespace:std	typeref:typename:wostream
wcout	std-headers/ostream	/^extern wostream wcout;$/;"	x	namespace:std	typeref:typename:wostream
wcregex_iterator	std-headers/regex	/^typedef regex_iterator<const wchar_t*> wcregex_iterator;$/;"	t	namespace:std	typeref:typename:regex_iterator<const wchar_t * >	file:
wcregex_token_iterator	std-headers/regex	/^typedef regex_token_iterator<const wchar_t*> wcregex_token_iterator;$/;"	t	namespace:std	typeref:typename:regex_token_iterator<const wchar_t * >	file:
wcrtomb	std-headers/cwchar	/^std::size_t wcrtomb(char* s, wchar_t wc, std::mbstate_t* ps);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
wcscat	std-headers/cwchar	/^wchar_t* wcscat(wchar_t* dest, const wchar_t* src);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcschr	std-headers/cwchar	/^const wchar_t* wcschr(const wchar_t* str, wchar_t ch);$/;"	p	namespace:std	typeref:typename:const wchar_t *	file:
wcschr	std-headers/cwchar	/^wchar_t* wcschr(wchar_t* str, wchar_t ch);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcscmp	std-headers/cwchar	/^int wcscmp(const wchar_t* lhs, const wchar_t* rhs);$/;"	p	namespace:std	typeref:typename:int	file:
wcscoll	std-headers/cwchar	/^int wcscoll(const wchar_t* lhs, const wchar_t* rhs);$/;"	p	namespace:std	typeref:typename:int	file:
wcscpy	std-headers/cwchar	/^wchar_t* wcscpy(wchar_t* dest, const wchar_t* src);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcscspn	std-headers/cwchar	/^std::size_t wcscspn(const wchar_t* dest, const wchar_t* src);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
wcsftime	std-headers/ctime	/^std::size_t wcsftime(wchar_t* str, std::size_t count, const wchar_t* format, const std::tm* time/;"	p	namespace:std	typeref:typename:std::size_t	file:
wcslen	std-headers/cwchar	/^std::size_t wcslen(const wchar_t* str);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
wcsncat	std-headers/cwchar	/^wchar_t* wcsncat(wchar_t* dest, const wchar_t* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcsncmp	std-headers/cwchar	/^int wcsncmp(const wchar_t* lhs, const wchar_t* rhs, std::size_t count);$/;"	p	namespace:std	typeref:typename:int	file:
wcsncpy	std-headers/cwchar	/^wchar_t* wcsncpy(wchar_t* dest, const wchar_t* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcspbrk	std-headers/cwchar	/^const wchar_t* wcspbrk(const wchar_t* dest, const wchar_t* str);$/;"	p	namespace:std	typeref:typename:const wchar_t *	file:
wcspbrk	std-headers/cwchar	/^wchar_t* wcspbrk(wchar_t* dest, const wchar_t* str);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcsrchr	std-headers/cwchar	/^const wchar_t* wcsrchr(const wchar_t* str, wchar_t ch);$/;"	p	namespace:std	typeref:typename:const wchar_t *	file:
wcsrchr	std-headers/cwchar	/^wchar_t* wcsrchr(wchar_t* str, wchar_t ch);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcsrtombs	std-headers/cwchar	/^std::size_t wcsrtombs(char* dst,$/;"	p	namespace:std	typeref:typename:std::size_t	file:
wcsspn	std-headers/cwchar	/^size_t wcsspn(const wchar_t* dest, const wchar_t* src);$/;"	p	namespace:std	typeref:typename:size_t	file:
wcsstr	std-headers/cwchar	/^const wchar_t* wcsstr(const wchar_t* dest, const wchar_t* src);$/;"	p	namespace:std	typeref:typename:const wchar_t *	file:
wcsstr	std-headers/cwchar	/^wchar_t* wcsstr(wchar_t* dest, const wchar_t* src);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcstod	std-headers/cwchar	/^double      wcstod(const wchar_t* str, wchar_t** str_end);$/;"	p	namespace:std	typeref:typename:double	file:
wcstof	std-headers/cwchar	/^float       wcstof(const wchar_t* str, wchar_t** str_end);$/;"	p	namespace:std	typeref:typename:float	file:
wcstoimax	std-headers/cinttypes	/^std::intmax_t wcstoimax(const wchar_t* nptr, wchar_t** endptr, int base);$/;"	p	namespace:std	typeref:typename:std::intmax_t	file:
wcstok	std-headers/cwchar	/^wchar_t* wcstok(wchar_t* str, const wchar_t* delim, wchar_t** ptr);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wcstol	std-headers/cwchar	/^long      wcstol(const wchar_t* str, wchar_t** str_end, int base);$/;"	p	namespace:std	typeref:typename:long	file:
wcstold	std-headers/cwchar	/^long double wcstold(const wchar_t* str, wchar_t** str_end);$/;"	p	namespace:std	typeref:typename:long double	file:
wcstoll	std-headers/cwchar	/^long long wcstoll(const wchar_t* str, wchar_t** str_end, int base);$/;"	p	namespace:std	typeref:typename:long long	file:
wcstombs	std-headers/cstdlib	/^std::size_t wcstombs(char* dst, const wchar_t* src, std::size_t len);$/;"	p	namespace:std	typeref:typename:std::size_t	file:
wcstoul	std-headers/cwchar	/^unsigned long      wcstoul(const wchar_t* str, wchar_t** str_end, int base);$/;"	p	namespace:std	typeref:typename:unsigned long	file:
wcstoull	std-headers/cwchar	/^unsigned long long wcstoull(const wchar_t* str, wchar_t** str_end, int base);$/;"	p	namespace:std	typeref:typename:unsigned long long	file:
wcstoumax	std-headers/cinttypes	/^std::uintmax_t wcstoumax(const wchar_t* nptr, wchar_t** endptr, int base);$/;"	p	namespace:std	typeref:typename:std::uintmax_t	file:
wcsub_match	std-headers/regex	/^typedef sub_match<const wchar_t*> wcsub_match;$/;"	t	namespace:std	typeref:typename:sub_match<const wchar_t * >	file:
wctob	std-headers/cwchar	/^int wctob(std::wint_t c);$/;"	p	namespace:std	typeref:typename:int	file:
wctomb	std-headers/cstdlib	/^int wctomb(char* s, wchar_t wc);$/;"	p	namespace:std	typeref:typename:int	file:
wctrans	std-headers/cwctype	/^std::wctrans_t wctrans(const char* str);$/;"	p	namespace:std	typeref:typename:std::wctrans_t	file:
wctrans_t	std-headers/cwctype	/^typedef int wctrans_t; \/\/ actually unspecified$/;"	t	namespace:std	typeref:typename:int	file:
wctype	std-headers/cwctype	/^std::wctype_t wctype(const char* str);$/;"	p	namespace:std	typeref:typename:std::wctype_t	file:
wctype_t	std-headers/cwctype	/^typedef int wctype_t; \/\/ actually unspefified$/;"	t	namespace:std	typeref:typename:int	file:
weak_ptr	std-headers/memory	/^    constexpr weak_ptr();$/;"	p	class:std::weak_ptr	file:
weak_ptr	std-headers/memory	/^    weak_ptr(const std::shared_ptr<Y>& r);$/;"	p	class:std::weak_ptr	file:
weak_ptr	std-headers/memory	/^    weak_ptr(const weak_ptr& r);$/;"	p	class:std::weak_ptr	file:
weak_ptr	std-headers/memory	/^    weak_ptr(const weak_ptr<Y>& r);$/;"	p	class:std::weak_ptr	file:
weak_ptr	std-headers/memory	/^    weak_ptr(weak_ptr&& r);$/;"	p	class:std::weak_ptr	file:
weak_ptr	std-headers/memory	/^    weak_ptr(weak_ptr<Y>&& r);$/;"	p	class:std::weak_ptr	file:
weak_ptr	std-headers/memory	/^class weak_ptr {$/;"	c	namespace:std	file:
weibull_distribution	std-headers/random	/^    explicit weibull_distribution(RealType a = 1.0, RealType b = 1.0);$/;"	p	class:std::weibull_distribution	file:
weibull_distribution	std-headers/random	/^    explicit weibull_distribution(const param_type& params);$/;"	p	class:std::weibull_distribution	file:
weibull_distribution	std-headers/random	/^class weibull_distribution {$/;"	c	namespace:std	file:
wfilebuf	std-headers/fstream	/^typedef basic_filebuf<wchar_t> wfilebuf;$/;"	t	namespace:std	typeref:typename:basic_filebuf<wchar_t>	file:
wfilebuf	std-headers/iosfwd	/^typedef basic_filebuf<wchar_t> wfilebuf;$/;"	t	namespace:std	typeref:typename:basic_filebuf<wchar_t>	file:
wfstream	std-headers/fstream	/^typedef basic_fstream<wchar_t> wfstream;$/;"	t	namespace:std	typeref:typename:basic_fstream<wchar_t>	file:
wfstream	std-headers/iosfwd	/^typedef basic_fstream<wchar_t> wfstream;$/;"	t	namespace:std	typeref:typename:basic_fstream<wchar_t>	file:
what	std-headers/exception	/^    virtual const char* what() const;$/;"	p	class:std::exception	typeref:typename:const char *	file:
what	std-headers/new	/^    virtual const char* what() const;$/;"	p	class:std::bad_alloc	typeref:typename:const char *	file:
what	std-headers/system_error	/^    virtual const char* what() const;$/;"	p	class:std::system_error	typeref:typename:const char *	file:
widen	std-headers/ios	/^    char_type widen(char c) const;$/;"	p	class:std::basic_ios	typeref:typename:char_type	file:
widen	std-headers/locale	/^    CharT widen(char c) const;$/;"	p	class:std::ctype	typeref:typename:CharT	file:
widen	std-headers/locale	/^    const char* widen(const char* beg, const char* end, CharT* dst) const;$/;"	p	class:std::ctype	typeref:typename:const char *	file:
width	std-headers/ios	/^    streamsize width() const;$/;"	p	class:std::ios_base	typeref:typename:streamsize	file:
width	std-headers/ios	/^    streamsize width(streamsize new_width);$/;"	p	class:std::ios_base	typeref:typename:streamsize	file:
wifstream	std-headers/fstream	/^typedef basic_ifstream<wchar_t> wifstream;$/;"	t	namespace:std	typeref:typename:basic_ifstream<wchar_t>	file:
wifstream	std-headers/iosfwd	/^typedef basic_ifstream<wchar_t> wifstream;$/;"	t	namespace:std	typeref:typename:basic_ifstream<wchar_t>	file:
wint_t	std-headers/cwctype	/^typedef int wint_t; \/\/ actually unspecified$/;"	t	namespace:std	typeref:typename:int	file:
wios	std-headers/ios	/^typedef basic_ios<wchar_t> wios;$/;"	t	namespace:std	typeref:typename:basic_ios<wchar_t>	file:
wios	std-headers/iosfwd	/^typedef basic_ios<wchar_t> wios;$/;"	t	namespace:std	typeref:typename:basic_ios<wchar_t>	file:
wiostream	std-headers/iosfwd	/^typedef basic_iostream<wchar_t> wiostream;$/;"	t	namespace:std	typeref:typename:basic_iostream<wchar_t>	file:
wiostream	std-headers/istream	/^typedef basic_iostream<wchar_t> wiostream;$/;"	t	namespace:std	typeref:typename:basic_iostream<wchar_t>	file:
wistream	std-headers/iosfwd	/^typedef basic_istream<wchar_t> wistream;$/;"	t	namespace:std	typeref:typename:basic_istream<wchar_t>	file:
wistream	std-headers/istream	/^typedef basic_istream<wchar_t> wistream;$/;"	t	namespace:std	typeref:typename:basic_istream<wchar_t>	file:
wistringstream	std-headers/iosfwd	/^typedef basic_istringstream<wchar_t> wistringstream;$/;"	t	namespace:std	typeref:typename:basic_istringstream<wchar_t>	file:
wistringstream	std-headers/sstream	/^typedef basic_istringstream<wchar_t> wistringstream;$/;"	t	namespace:std	typeref:typename:basic_istringstream<wchar_t>	file:
wmemchr	std-headers/cwchar	/^const wchar_t* wmemchr(const wchar_t* ptr, wchar_t ch, std::size_t count);$/;"	p	namespace:std	typeref:typename:const wchar_t *	file:
wmemchr	std-headers/cwchar	/^wchar_t* wmemchr(wchar_t* ptr, wchar_t ch, std::size_t count);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wmemcmp	std-headers/cwchar	/^int wmemcmp(const wchar_t* lhs, const wchar_t* rhs, std::size_t count);$/;"	p	namespace:std	typeref:typename:int	file:
wmemcpy	std-headers/cwchar	/^wchar_t* wmemcpy(wchar_t* dest, const wchar_t* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wmemmove	std-headers/cwchar	/^wchar_t* wmemmove(wchar_t* dest, const wchar_t* src, std::size_t count);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wmemset	std-headers/cwchar	/^wchar_t* wmemset(wchar_t* dest, wchar_t ch, std::size_t count);$/;"	p	namespace:std	typeref:typename:wchar_t *	file:
wofstream	std-headers/fstream	/^typedef basic_ofstream<wchar_t> wofstream;$/;"	t	namespace:std	typeref:typename:basic_ofstream<wchar_t>	file:
wofstream	std-headers/iosfwd	/^typedef basic_ofstream<wchar_t> wofstream;$/;"	t	namespace:std	typeref:typename:basic_ofstream<wchar_t>	file:
word_size	std-headers/random	/^    static constexpr size_t word_size;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:size_t	file:
word_size	std-headers/random	/^    static constexpr size_t word_size;$/;"	m	class:std::subtract_with_carry_engine	typeref:typename:size_t	file:
wostream	std-headers/iosfwd	/^typedef basic_ostream<wchar_t> wostream;$/;"	t	namespace:std	typeref:typename:basic_ostream<wchar_t>	file:
wostream	std-headers/ostream	/^typedef basic_ostream<wchar_t> wostream;$/;"	t	namespace:std	typeref:typename:basic_ostream<wchar_t>	file:
wostringstream	std-headers/iosfwd	/^typedef basic_ostringstream<wchar_t> wostringstream;$/;"	t	namespace:std	typeref:typename:basic_ostringstream<wchar_t>	file:
wostringstream	std-headers/sstream	/^typedef basic_ostringstream<wchar_t> wostringstream;$/;"	t	namespace:std	typeref:typename:basic_ostringstream<wchar_t>	file:
wprintf	std-headers/cwchar	/^int wprintf(const wchar_t* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
wregex	std-headers/regex	/^typedef basic_regex<wchar_t> wregex;$/;"	t	namespace:std	typeref:typename:basic_regex<wchar_t>	file:
write	std-headers/ostream	/^    basic_ostream& write(const char_type* s, std::streamsize count);$/;"	p	class:std::basic_ostream	typeref:typename:basic_ostream &	file:
wrong_protocol_type	std-headers/system_error	/^    wrong_protocol_type,                \/\/  EPROTOTYPE$/;"	e	enum:std::errc	file:
ws	std-headers/istream	/^std::basic_istream<CharT, Traits>& ws(std::basic_istream<CharT, Traits>& is);$/;"	p	namespace:std	typeref:typename:std::basic_istream<CharT,Traits> &	file:
wscanf	std-headers/cwchar	/^int wscanf(const wchar_t* format, ...);$/;"	p	namespace:std	typeref:typename:int	file:
wsmatch	std-headers/regex	/^typedef match_results<std::wstring::const_iterator> wsmatch;$/;"	t	namespace:std	typeref:typename:match_results<std::wstring::const_iterator>	file:
wsregex_iterator	std-headers/regex	/^typedef regex_iterator<std::wstring::const_iterator> wsregex_iterator;$/;"	t	namespace:std	typeref:typename:regex_iterator<std::wstring::const_iterator>	file:
wsregex_token_iterator	std-headers/regex	/^typedef regex_token_iterator<std::wstring::const_iterator> wsregex_token_iterator;$/;"	t	namespace:std	typeref:typename:regex_token_iterator<std::wstring::const_iterator>	file:
wssub_match	std-headers/regex	/^typedef sub_match<std::wstring::const_iterator> wssub_match;$/;"	t	namespace:std	typeref:typename:sub_match<std::wstring::const_iterator>	file:
wstreambuf	std-headers/iosfwd	/^typedef basic_streambuf<wchar_t> wstreambuf;$/;"	t	namespace:std	typeref:typename:basic_streambuf<wchar_t>	file:
wstreampos	std-headers/iosfwd	/^typedef fpos<char_traits<wchar_t>::state_type> wstreampos;$/;"	t	namespace:std	typeref:typename:fpos<char_traits<wchar_t>::state_type>	file:
wstreampos	std-headers/string	/^typedef fpos<char_traits<wchar_t>::state_type> wstreampos;$/;"	t	namespace:std	typeref:typename:fpos<char_traits<wchar_t>::state_type>	file:
wstring	std-headers/string	/^typedef std::basic_string<wchar_t> wstring;$/;"	t	namespace:std	typeref:typename:std::basic_string<wchar_t>	file:
wstring_convert	std-headers/locale	/^    explicit wstring_convert(Codecvt* pcvt = new Codecvt);$/;"	p	class:std::wstring_convert	file:
wstring_convert	std-headers/locale	/^    explicit wstring_convert(const byte_string& byte_err,$/;"	p	class:std::wstring_convert	file:
wstring_convert	std-headers/locale	/^    wstring_convert(Codecvt* pcvt, state_type state);$/;"	p	class:std::wstring_convert	file:
wstring_convert	std-headers/locale	/^    wstring_convert(const std::wstring_convert&) = delete;$/;"	p	class:std::wstring_convert	file:
wstring_convert	std-headers/locale	/^class wstring_convert {$/;"	c	namespace:std	file:
wstringbuf	std-headers/iosfwd	/^typedef basic_stringbuf<wchar_t> wstringbuf;$/;"	t	namespace:std	typeref:typename:basic_stringbuf<wchar_t>	file:
wstringbuf	std-headers/sstream	/^typedef basic_stringbuf<wchar_t> wstringbuf;$/;"	t	namespace:std	typeref:typename:basic_stringbuf<wchar_t>	file:
wstringstream	std-headers/iosfwd	/^typedef basic_stringstream<wchar_t> wstringstream;$/;"	t	namespace:std	typeref:typename:basic_stringstream<wchar_t>	file:
wstringstream	std-headers/sstream	/^typedef basic_stringstream<wchar_t> wstringstream;$/;"	t	namespace:std	typeref:typename:basic_stringstream<wchar_t>	file:
xalloc	std-headers/ios	/^    static int xalloc();$/;"	p	class:std::ios_base	typeref:typename:int	file:
xdigit	std-headers/locale	/^    static const mask xdigit;$/;"	m	class:std::ctype_base	typeref:typename:const mask	file:
xor_mask	std-headers/random	/^    static constexpr UIntType xor_mask;$/;"	m	class:std::mersenne_twister_engine	typeref:typename:UIntType	file:
xsgetn	std-headers/streambuf	/^    virtual streamsize xsgetn(char_type* s, streamsize n);$/;"	p	class:std::basic_streambuf	typeref:typename:streamsize	file:
xsputn	std-headers/streambuf	/^    virtual streamsize xsputn(const char_type* s, streamsize n);$/;"	p	class:std::basic_streambuf	typeref:typename:streamsize	file:
ydm	std-headers/locale	/^        no_order, dmy, mdy, ymd, ydm$/;"	e	enum:std::time_base::dateorder	file:
yield	std-headers/thread	/^void yield();$/;"	p	namespace:std::this_thread	typeref:typename:void	file:
ymd	std-headers/locale	/^        no_order, dmy, mdy, ymd, ydm$/;"	e	enum:std::time_base::dateorder	file:
yocto	std-headers/ratio	/^typedef ratio<1, 1000000000000000000000000> yocto;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000000000000000000000>	file:
yotta	std-headers/ratio	/^typedef ratio<1000000000000000000000000, 1> yotta;$/;"	t	namespace:std	typeref:typename:ratio<1000000000000000000000000,1>	file:
zepto	std-headers/ratio	/^typedef ratio<1,    1000000000000000000000> zepto;$/;"	t	namespace:std	typeref:typename:ratio<1,1000000000000000000000>	file:
zero	std-headers/chrono	/^    static constexpr Rep zero();$/;"	p	struct:std::chrono::duration_values	typeref:typename:Rep	file:
zero	std-headers/chrono	/^    static constexpr duration zero();$/;"	p	class:std::chrono::duration	typeref:typename:duration	file:
zetta	std-headers/ratio	/^typedef ratio<   1000000000000000000000, 1> zetta;$/;"	t	namespace:std	typeref:typename:ratio<1000000000000000000000,1>	file:
~allocator	std-headers/memory	/^    ~allocator();$/;"	p	struct:std::allocator	file:
~auto_ptr	std-headers/memory	/^    ~auto_ptr();$/;"	p	class:std::auto_ptr	file:
~basic_filebuf	std-headers/fstream	/^    virtual ~basic_filebuf();$/;"	p	class:std::basic_filebuf	file:
~basic_ios	std-headers/ios	/^    virtual ~basic_ios();$/;"	p	class:std::basic_ios	file:
~basic_istream	std-headers/istream	/^    virtual ~basic_istream();$/;"	p	class:std::basic_istream	file:
~basic_ostream	std-headers/ostream	/^    virtual ~basic_ostream();$/;"	p	class:std::basic_ostream	file:
~basic_regex	std-headers/regex	/^    ~basic_regex();$/;"	p	class:std::basic_regex	file:
~basic_streambuf	std-headers/streambuf	/^    virtual ~basic_streambuf();$/;"	p	class:std::basic_streambuf	file:
~basic_string	std-headers/string	/^    ~basic_string();$/;"	p	class:std::basic_string	file:
~basic_stringbuf	std-headers/sstream	/^    virtual ~basic_stringbuf();$/;"	p	class:std::basic_stringbuf	file:
~codecvt	std-headers/locale	/^    virtual ~codecvt();$/;"	p	class:std::codecvt	file:
~codecvt_byname	std-headers/locale	/^    ~codecvt_byname();$/;"	p	class:std::codecvt_byname	file:
~codecvt_utf16	std-headers/codecvt	/^    ~codecvt_utf16();$/;"	p	class:std::codecvt_utf16	file:
~codecvt_utf8	std-headers/codecvt	/^    ~codecvt_utf8();$/;"	p	class:std::codecvt_utf8	file:
~codecvt_utf8_utf16	std-headers/codecvt	/^    ~codecvt_utf8_utf16();$/;"	p	class:std::codecvt_utf8_utf16	file:
~collate	std-headers/locale	/^    virtual ~collate();$/;"	p	class:std::collate	file:
~collate_byname	std-headers/locale	/^    ~collate_byname();$/;"	p	class:std::collate_byname	file:
~condition_variable	std-headers/condition_variable	/^    ~condition_variable();$/;"	p	class:std::condition_variable	file:
~condition_variable_any	std-headers/condition_variable	/^    ~condition_variable_any();$/;"	p	class:std::condition_variable_any	file:
~ctype	std-headers/locale	/^    virtual ~ctype();$/;"	p	class:std::ctype	file:
~ctype_byname	std-headers/locale	/^    ~ctype_byname();$/;"	p	class:std::ctype_byname	file:
~deque	std-headers/deque	/^    ~deque();$/;"	p	class:std::deque	file:
~enable_shared_from_this	std-headers/memory	/^    ~enable_shared_from_this();$/;"	p	class:std::enable_shared_from_this	file:
~error_category	std-headers/system_error	/^    virtual ~error_category();$/;"	p	class:std::error_category	file:
~facet	std-headers/locale	/^        virtual ~facet();$/;"	p	class:std::locale::facet	file:
~forward_list	std-headers/forward_list	/^    ~forward_list();$/;"	p	class:std::forward_list	file:
~function	std-headers/functional	/^    ~function();$/;"	p	class:std::function	file:
~future	std-headers/future	/^    ~future();$/;"	p	class:std::future	file:
~gslice_array	std-headers/valarray	/^    ~gslice_array();$/;"	p	class:std::gslice_array	file:
~indirect_array	std-headers/valarray	/^    ~indirect_array();$/;"	p	class:std::indirect_array	file:
~ios_base	std-headers/ios	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	file:
~list	std-headers/list	/^    ~list();$/;"	p	class:std::list	file:
~locale	std-headers/locale	/^    ~locale();$/;"	p	class:std::locale	file:
~lock_guard	std-headers/mutex	/^    ~lock_guard();$/;"	p	class:std::lock_guard	file:
~map	std-headers/map	/^    ~map();$/;"	p	class:std::map	file:
~mask_array	std-headers/valarray	/^    ~mask_array();$/;"	p	class:std::mask_array	file:
~match_results	std-headers/regex	/^    ~match_results();$/;"	p	class:std::match_results	file:
~messages	std-headers/locale	/^    virtual ~messages();$/;"	p	class:std::messages	file:
~messages_byname	std-headers/locale	/^    ~messages_byname();$/;"	p	class:std::messages_byname	file:
~money_get	std-headers/locale	/^    virtual ~money_get();$/;"	p	class:std::money_get	file:
~money_put	std-headers/locale	/^    virtual ~money_put();$/;"	p	class:std::money_put	file:
~moneypunct	std-headers/locale	/^    virtual ~moneypunct();$/;"	p	class:std::moneypunct	file:
~moneypunct_byname	std-headers/locale	/^    ~moneypunct_byname();$/;"	p	class:std::moneypunct_byname	file:
~multimap	std-headers/map	/^    ~multimap();$/;"	p	class:std::multimap	file:
~multiset	std-headers/set	/^    ~multiset();$/;"	p	class:std::multiset	file:
~mutex	std-headers/mutex	/^    ~mutex();$/;"	p	class:std::mutex	file:
~nested_exception	std-headers/exception	/^    virtual ~nested_exception() = default;$/;"	p	class:std::nested_exception	file:
~num_get	std-headers/locale	/^    virtual ~num_get();$/;"	p	class:std::num_get	file:
~num_put	std-headers/locale	/^    virtual ~num_put();$/;"	p	class:std::num_put	file:
~numpunct	std-headers/locale	/^    virtual ~numpunct();$/;"	p	class:std::numpunct	file:
~numpunct_byname	std-headers/locale	/^    ~numpunct_byname();$/;"	p	class:std::numpunct_byname	file:
~ostream_iterator	std-headers/iterator	/^    ~ostream_iterator();$/;"	p	class:std::ostream_iterator	file:
~packaged_task	std-headers/future	/^    ~packaged_task();$/;"	p	class:std::packaged_task	file:
~priority_queue	std-headers/queue	/^    ~priority_queue();$/;"	p	class:std::priority_queue	file:
~promise	std-headers/future	/^    ~promise();$/;"	p	class:std::promise	file:
~queue	std-headers/queue	/^    ~queue();$/;"	p	class:std::queue	file:
~recursive_mutex	std-headers/mutex	/^    ~recursive_mutex();$/;"	p	class:std::recursive_mutex	file:
~recursive_timed_mutex	std-headers/mutex	/^    ~recursive_timed_mutex();$/;"	p	class:std::recursive_timed_mutex	file:
~reference	std-headers/bitset	/^        ~reference();$/;"	p	class:std::bitset::reference	file:
~scoped_allocator_adaptor	std-headers/scoped_allocator	/^    ~scoped_allocator_adaptor();$/;"	p	class:std::scoped_allocator_adaptor	file:
~sentry	std-headers/istream	/^        ~sentry();$/;"	p	class:std::basic_istream::sentry	file:
~sentry	std-headers/ostream	/^        ~sentry();$/;"	p	class:std::basic_ostream::sentry	file:
~set	std-headers/set	/^    ~set();$/;"	p	class:std::set	file:
~shared_future	std-headers/future	/^    ~shared_future();$/;"	p	class:std::shared_future	file:
~shared_lock	std-headers/shared_mutex	/^    ~shared_lock();$/;"	p	class:std::shared_lock	file:
~shared_mutex	std-headers/shared_mutex	/^    ~shared_mutex();$/;"	p	class:std::shared_mutex	file:
~shared_ptr	std-headers/memory	/^    ~shared_ptr();$/;"	p	class:std::shared_ptr	file:
~shared_timed_mutex	std-headers/shared_mutex	/^    ~shared_timed_mutex();$/;"	p	class:std::shared_timed_mutex	file:
~slice_array	std-headers/valarray	/^    ~slice_array();$/;"	p	class:std::slice_array	file:
~stack	std-headers/stack	/^    ~stack();$/;"	p	class:std::stack	file:
~thread	std-headers/thread	/^    ~thread();$/;"	p	class:std::thread	file:
~time_get	std-headers/locale	/^    virtual ~time_get();$/;"	p	class:std::time_get	file:
~time_get_byname	std-headers/locale	/^    ~time_get_byname();$/;"	p	class:std::time_get_byname	file:
~time_put	std-headers/locale	/^    virtual ~time_put();$/;"	p	class:std::time_put	file:
~time_put_byname	std-headers/locale	/^    ~time_put_byname();$/;"	p	class:std::time_put_byname	file:
~timed_mutex	std-headers/mutex	/^    ~timed_mutex();$/;"	p	class:std::timed_mutex	file:
~type_info	std-headers/typeinfo	/^    virtual ~type_info();$/;"	p	class:std::type_info	file:
~unique_lock	std-headers/mutex	/^    ~unique_lock();$/;"	p	class:std::unique_lock	file:
~unique_ptr	std-headers/memory	/^    ~unique_ptr();$/;"	p	class:std::unique_ptr	file:
~unordered_map	std-headers/unordered_map	/^    ~unordered_map();$/;"	p	class:std::unordered_map	file:
~unordered_multimap	std-headers/unordered_map	/^    ~unordered_multimap();$/;"	p	class:std::unordered_multimap	file:
~unordered_multiset	std-headers/unordered_set	/^    ~unordered_multiset();$/;"	p	class:std::unordered_multiset	file:
~unordered_set	std-headers/unordered_set	/^    ~unordered_set();$/;"	p	class:std::unordered_set	file:
~valarray	std-headers/valarray	/^    ~valarray();$/;"	p	class:std::valarray	file:
~vector	std-headers/vector	/^    ~vector();$/;"	p	class:std::vector	file:
~wbuffer_convert	std-headers/locale	/^    ~wbuffer_convert();$/;"	p	class:std::wbuffer_convert	file:
~weak_ptr	std-headers/memory	/^    ~weak_ptr();$/;"	p	class:std::weak_ptr	file:
~wstring_convert	std-headers/locale	/^    ~wstring_convert();$/;"	p	class:std::wstring_convert	file:
